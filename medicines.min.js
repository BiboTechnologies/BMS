import{initializeApp}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-app.js";import{getDatabase,ref,remove,push,get,onValue,child,set}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-database.js";import{getAuth,onAuthStateChanged,sendPasswordResetEmail,signInWithEmailAndPassword,GoogleAuthProvider,signInWithPopup}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-auth.js";const firebaseConfig={apiKey:"AIzaSyCi_hufIZTzsYtdPGQtvtmKmAkkrydmn_A",authDomain:"abbah-83a7b.firebaseapp.com",databaseURL:"https://abbah-83a7b-default-rtdb.firebaseio.com",projectId:"abbah-83a7b",storageBucket:"abbah-83a7b.appspot.com",messagingSenderId:"379729759051",appId:"1:379729759051:web:e75528d61b02d1e4f536ce",measurementId:"G-H41J2WMR6S"};const app=initializeApp(firebaseConfig);const database=getDatabase(app);const auth=getAuth(app);let authToken;let tokenExpiryTime;function generateToken(){authToken=Math.random().toString(36).substring(2);const currentTime=new Date;const tokenExpiryTime=new Date(currentTime.getTime()+24*60*60*1e3);localStorage.setItem("authToken",authToken);localStorage.setItem("tokenExpiryTime",tokenExpiryTime.toString())}function retrieveTokenFromLocalStorage(){authToken=localStorage.getItem("authToken");const storedExpiryTime=localStorage.getItem("tokenExpiryTime");if(authToken&&storedExpiryTime){tokenExpiryTime=new Date(storedExpiryTime)}}function isTokenValid(){const currentTime=new Date;return tokenExpiryTime>currentTime}window.addEventListener("load",function(){retrieveTokenFromLocalStorage();if(!isTokenValid()){window.location.href="login.html"}});document.addEventListener("contextmenu",function(event){if(document.getElementById("loginpopup").style.display==="block"){event.preventDefault()}document.addEventListener("keydown",function(event){if(event.keyCode===123){event.preventDefault()}})});const allowedEmails=["biboofficial256@gmail.com"];document.getElementById("loginForm").addEventListener("submit",function(event){event.preventDefault();const submitBtn=document.getElementById("submitBtn");submitBtn.innerHTML='<i class="fas fa-spinner fa-spin"></i> Submitting';const email=document.getElementById("email").value;const password=document.getElementById("password").value;signInWithEmailAndPassword(auth,email,password).then(userCredential=>{if(allowedEmails.includes(email)){document.getElementById("loginoverlay").style.display="none";document.getElementById("loginpopup").style.display="none";generateToken()}else{const errorContainer=document.getElementById("errorContainer");errorContainer.textContent="Access denied. You are not authorized.";errorContainer.style.display="block";signOut(auth).then(()=>{setTimeout(function(){submitBtn.innerHTML="Submit"},2e3)}).catch(error=>{console.error("Error signing out:",error)})}}).catch(error=>{const errorMessage=error.message;const errorContainer=document.getElementById("errorContainer");errorContainer.textContent=errorMessage;errorContainer.style.display="block";setTimeout(function(){submitBtn.innerHTML="Submit"},2e3)})});document.getElementById("forgotPasswordLink").addEventListener("click",function(event){event.preventDefault();const email=document.getElementById("email").value;sendPasswordResetEmail(auth,email).then(()=>{showMessage(" A password reset email has been sent. Please check your inbox.")}).catch(error=>{const errorMessage=error.message;alert("Password reset email failed to send. "+errorMessage)})});function displayMessage(title,message,isSuccess=false){const existingMessages=document.querySelectorAll(".retry-message");existingMessages.forEach(function(message){message.remove()});const messageDiv=document.createElement("div");messageDiv.classList.add("retry-message");if(isSuccess){messageDiv.style.backgroundColor="#4caf50"}const closeButton=document.createElement("button");closeButton.classList.add("close-btn");closeButton.innerHTML='<i class="fa fa-times"></i>';closeButton.addEventListener("click",function(){messageDiv.remove()});const titleElement=document.createElement("h2");titleElement.textContent=title;const messageElement=document.createElement("p");messageElement.textContent=message;messageDiv.appendChild(titleElement);messageDiv.appendChild(messageElement);document.body.appendChild(messageDiv);setTimeout(function(){messageDiv.remove()},1500)}function displayUserInformation(user){const profileName=document.querySelector(".profile_info h2");profileName.textContent=user.displayName;const profileImage=document.querySelector(".profile_pic img");profileImage.src=user.photoURL;const dropdownProfileImage=document.querySelector(".user-profile img");dropdownProfileImage.src=user.photoURL;displayMessage("",`Welcome, ${user.displayName}.`,true)}function handleSignInSuccess(user){displayUserInformation(user)}function handleSignInError(error){console.error("Error signing in:",error);displayMessage("Access Denied. Please sign in with a valid email.")}function signInWithGoogle(){var provider=new GoogleAuthProvider;signInWithPopup(auth,provider).then(function(result){const user=result.user;handleSignInSuccess(user)}).catch(function(error){handleSignInError(error)})}window.addEventListener("load",function(){auth.onAuthStateChanged(function(user){if(user){displayUserInformation(user)}else{signInWithGoogle()}})});function retryCallback(){signInWithGoogle()}displayMessage("Signing in...","Please wait...",false);document.addEventListener("click",function(event){const target=event.target;if(target.tagName==="A"&&target.href.startsWith(window.location.origin)){localStorage.setItem("clickedLink",target.href)}});const logoutButton=document.getElementById("logoutButton");const overlay=document.getElementById("overlay");logoutButton.addEventListener("click",function(event){event.preventDefault();localStorage.setItem("logoutPage",window.location.href);const clickedLink=localStorage.getItem("clickedLink");if(clickedLink){localStorage.setItem("logoutPage",clickedLink)}displayOverlay();setTimeout(()=>{logOut();hideOverlay()},2e3)});function displayOverlay(){const spinner=document.createElement("div");spinner.id="loadingSpinner";overlay.appendChild(spinner);const loggingOutText=document.createElement("div");loggingOutText.id="loggingOutText";loggingOutText.textContent="Logging Out...";overlay.appendChild(loggingOutText);overlay.style.display="flex"}function hideOverlay(){const spinner=document.getElementById("loadingSpinner");const loggingOutText=document.getElementById("loggingOutText");overlay.removeChild(spinner);overlay.removeChild(loggingOutText);overlay.style.display="none"}function logOut(){auth.signOut().then(function(){localStorage.removeItem("authToken");localStorage.removeItem("tokenExpiryTime");localStorage.removeItem("clickedLink");const logoutPage=localStorage.getItem("logoutPage")||"login.html";window.location.href=logoutPage}).catch(function(error){console.error("Error signing out:",error)})}const form=document.querySelector(".popup-form");const submitButton=document.querySelector(".popup-form button");const patientsContainer=document.getElementById("patients");let patients=[];form.addEventListener("submit",function(e){e.preventDefault();const name=document.getElementById("name").value;const dob=document.getElementById("dob").value;const parents=document.getElementById("parents").value;const dos=document.getElementById("dos").value;const price=document.getElementById("price").value;const pricepergram=document.getElementById("pricepergram").value;const gramsPerPiece=document.getElementById("gramsPerPiece").value;const patientData={name:name,dob:dob,parents:parents,dos:dos,price:price,pricepergram:pricepergram,gramsPerPiece:gramsPerPiece};const patientsRef=ref(database,"medicine");const newPatientRef=child(patientsRef,name);set(newPatientRef,patientData).then(()=>{form.reset();showMessage("Medicine details uploaded successfully!")}).catch(()=>{showMessage("Error uploading medicine details. Please try again.")})});searchButton.addEventListener("click",()=>{const searchTerm=searchInput.value.trim();loaderElement.classList.remove("hidden");patientsContainer.innerHTML="";const patientsRef=ref(database,"medicine");onValue(patientsRef,snapshot=>{const patientsData=snapshot.val();const searchResults=[];if(patientsData){const patients=Object.values(patientsData);if(searchTerm!==""){patients.forEach(patient=>{if(patient.name.toLowerCase().includes(searchTerm.toLowerCase())){searchResults.push(patient)}})}else{searchResults.push(...patients)}}loaderElement.classList.add("hidden");if(searchResults.length>0){renderPatients(searchResults)}else{patientsContainer.innerHTML='<p class="no-results">No medicine found.</p>'}})});function filterPatients(patients,searchTerm){const filteredPatients=patients.filter(patient=>{const patientName=patient.name.toLowerCase();return patientName.includes(searchTerm.toLowerCase())});renderPatients(filteredPatients)}searchInput.addEventListener("input",()=>{const searchTerm=searchInput.value.trim();const patientsRef=ref(database,"medicine");onValue(patientsRef,snapshot=>{const patientsData=snapshot.val();const patients=patientsData?Object.values(patientsData):[];filterPatients(patients,searchTerm)})});patientsContainer.innerHTML="";const sellProductForm=document.getElementById("sellProductForm2");sellProductForm.addEventListener("submit",handleSellProductSubmit);function renderPatients(patients){const table=document.createElement("table");table.classList.add("patient-table");const headers=["Name","Rmg Stock","Expiry","Stock lvl","D.O.S","Mgs @pc","Price @Piece","Price @Mgs","Initial Stock","Est. Revenue","Actions"];const headerRow=document.createElement("tr");headers.forEach(headerText=>{const th=document.createElement("th");th.textContent=headerText;headerRow.appendChild(th)});table.appendChild(headerRow);const alertMessages=[];const alertCategories=[{categoryName:"Expiring Medicines",messages:[]},{categoryName:"Out of Stock Medicines",messages:[]},{categoryName:"Expired Medicines",messages:[]}];patients.forEach(patient=>{const row=document.createElement("tr");const nameCell=document.createElement("td");nameCell.textContent=patient.name;row.appendChild(nameCell);const initialStock=parseInt(patient.parents);let remainingStock;if(patient.hasOwnProperty("sales")){const salesNode=patient.sales;let totalSalesQuantity=0;for(const saleKey in salesNode){const saleQuantity=parseInt(salesNode[saleKey].quantity);if(!isNaN(saleQuantity)){totalSalesQuantity+=saleQuantity}}remainingStock=initialStock-totalSalesQuantity}else{remainingStock=initialStock}const remainingStockCell=document.createElement("td");remainingStockCell.textContent=`${remainingStock} pcs`;remainingStockCell.classList.add("remaining-stock-cell");row.appendChild(remainingStockCell);const expiryDate=new Date(patient.dob);const currentDate=new Date;const daysRemaining=Math.floor((expiryDate-currentDate)/(1e3*60*60*24));const expiryCell=document.createElement("td");if(daysRemaining>=0){expiryCell.textContent=`${daysRemaining}`;if(daysRemaining<5){const alertMessage=`${patient.name} is almost expiring! Days remaining: ${daysRemaining}`;alertCategories[0].messages.push(alertMessage)}}else{expiryCell.textContent="Expired";expiryCell.style.backgroundColor="red";expiryCell.style.color="white";const alertMessage=`${patient.name} has expired!`;alertCategories[2].messages.push(alertMessage)}row.appendChild(expiryCell);if(remainingStock===0){const outOfStockCell=document.createElement("td");outOfStockCell.textContent="Out of Stock";outOfStockCell.style.backgroundColor="red";outOfStockCell.style.color="white";row.appendChild(outOfStockCell);const alertMessage=`${patient.name} is out of stock!`;alertMessages.push(alertMessage);alertCategories[1].messages.push(alertMessage)}else{const stockLevelCell=document.createElement("td");if(remainingStock<20){stockLevelCell.textContent="Low Stock";stockLevelCell.style.backgroundColor="yellow"}else{stockLevelCell.textContent="In Stock"}row.appendChild(stockLevelCell);alertCategories.forEach(category=>{if(category.messages.length===0){category.messages.push("No medicines found")}});if(alertCategories.some(category=>category.messages.some(message=>message!=="No medicines found"))){showAlert(alertCategories)}function showAlert(reportMessages){const customAlert=document.getElementById("customAlert");const categoryContainer=document.getElementById("categoryContainer");const customAlertButton=document.getElementById("customAlertButton");categoryContainer.innerHTML="";reportMessages.forEach(category=>{const categoryTitle=document.createElement("h3");categoryTitle.classList.add("category-title");categoryTitle.textContent=category.categoryName;categoryContainer.appendChild(categoryTitle);category.messages.forEach(message=>{const alertMessage=document.createElement("p");alertMessage.classList.add("alert-message");alertMessage.textContent=message;categoryContainer.appendChild(alertMessage)})});customAlert.style.display="block";customAlertButton.addEventListener("click",hideAlert);function hideAlert(){customAlert.style.display="none";customAlertButton.removeEventListener("click",hideAlert)}}}const dosCell=document.createElement("td");dosCell.textContent=patient.dos;row.appendChild(dosCell);const gramsPerPieceCell=document.createElement("td");gramsPerPieceCell.textContent=`${patient.gramsPerPiece}g`;gramsPerPieceCell.classList.add("grams-per-piece-cell");row.appendChild(gramsPerPieceCell);const priceCell=document.createElement("td");priceCell.textContent=`${patient.price}.00`;row.appendChild(priceCell);const pricePerGramCell=document.createElement("td");pricePerGramCell.textContent=`${patient.pricepergram}.00`;pricePerGramCell.classList.add("price-per-gram-cell");row.appendChild(pricePerGramCell);const initialStockCell=document.createElement("td");initialStockCell.textContent=`${patient.parents} pcs`;row.appendChild(initialStockCell);const estimatedRevenue=initialStock*patient.price;const formattedRevenue=estimatedRevenue.toLocaleString("en");const revenueCell=document.createElement("td");revenueCell.textContent=`${formattedRevenue}.00`;row.appendChild(revenueCell);const actionsCell=document.createElement("td");const viewButton=document.createElement("button");viewButton.textContent="View";viewButton.classList.add("view-button");viewButton.addEventListener("click",function(){currentPatientName=patient.name;openPatientHistoryPopup(patient)});actionsCell.appendChild(viewButton);const sellButton=document.createElement("button");sellButton.textContent="Sell";sellButton.classList.add("sell-button");let gramsPerPieceValue;sellButton.addEventListener("click",function(event){if(daysRemaining<0){alert(`The medicine ${patient.name} has expired!`)}else if(remainingStock===0){alert(`The medicine ${patient.name} is out of stock!`)}else{const sellPopupOverlay=document.getElementById("sellPopupOverlay2");sellPopupOverlay.style.display="block";const gramsPerPieceCell=event.target.parentElement.parentElement.querySelector(".grams-per-piece-cell");gramsPerPieceValue=parseFloat(gramsPerPieceCell.textContent);const pricePerGramCell=event.target.parentElement.parentElement.querySelector(".price-per-gram-cell");const pricePerGram=parseFloat(pricePerGramCell.textContent);const remainingStockCell=event.target.parentElement.parentElement.querySelector(".remaining-stock-cell");const remainingStockValue=parseInt(remainingStockCell.textContent.split(" ")[0]);const sellFormPatientName=document.getElementById("sellFormPatientName");const sellPiecesInput=document.getElementById("sellPieces");const sellGramsInput=document.getElementById("sellGrams");const totalCostInput=document.getElementById("totalCost");sellFormPatientName.value=patient.name;sellGramsInput.addEventListener("input",function(){const grams=parseFloat(sellGramsInput.value);if(!isNaN(grams)&&!isNaN(gramsPerPieceValue)&&gramsPerPieceValue>0&&!isNaN(pricePerGram)&&pricePerGram>0){const pieces=grams/gramsPerPieceValue;sellPiecesInput.value=pieces.toFixed(2);const total=grams*pricePerGram;totalCostInput.value=total.toFixed(2);if(pieces>remainingStockValue){addToCartButton.disabled=true;addToCartButton.style.cursor="disabled";addToCartButton.style.backgroundColor="lightblue";const sellPopupMessage=document.getElementById("sellPopupMessage");sellPopupMessage.textContent="Pieces are more than remaining stock"}else{addToCartButton.disabled=false;addToCartButton.style.cursor="pointer";addToCartButton.style.backgroundColor="orange";const sellPopupMessage=document.getElementById("sellPopupMessage");sellPopupMessage.textContent=""}}else{sellPiecesInput.value="";totalCostInput.value="";const sellPopupMessage=document.getElementById("sellPopupMessage");sellPopupMessage.textContent=""}});const sellPopupClose=document.getElementById("sellPopupClose2");sellPopupClose.addEventListener("click",function(){const sellPopupOverlay=document.getElementById("sellPopupOverlay2");sellPopupOverlay.style.display="none";gramsPerPieceValue=null;const sellPopupMessage=document.getElementById("sellPopupMessage");sellPopupMessage.textContent="";sellFormPatientName.value="";sellPiecesInput.value="";sellGramsInput.value="";totalCostInput.value=""})}});actionsCell.appendChild(sellButton);const sellPiecesInput=document.getElementById("sellPieces");const sellGramsInput=document.getElementById("sellGrams");sellGramsInput.addEventListener("input",function(){const grams=parseFloat(sellGramsInput.value);if(!isNaN(grams)&&!isNaN(gramsPerPieceValue)&&gramsPerPieceValue>0){const pieces=grams/gramsPerPieceValue;sellPiecesInput.value=pieces.toFixed(2)}else{sellPiecesInput.value=""}});const openCartButton=document.getElementById("openCartButton");const cartItems=document.getElementById("cartItems");const itemCount=document.getElementById("itemCount");const cartTotalElement=document.getElementById("cartTotal");const cartPopup=document.getElementById("cartPopup");const closeCartPopupButton=document.getElementById("closeCartPopupButton");let cartCount=0;let cartTotal=0;const cartItemsArray=[];openCartButton.addEventListener("click",function(){showCartPopup()});closeCartPopupButton.addEventListener("click",function(){closeCartPopup()});function closeCartPopup(){cartPopup.style.display="none"}function generateAndPrintReceipt(cartItemsArray){const receiptContent=generateReceiptContent(cartItemsArray);const printWindow=window.open("","","width=700,height=700");printWindow.document.open();printWindow.document.write(receiptContent);printWindow.document.close();printWindow.print()}function generateReceiptContent(cartItemsArray){const hospitalInfo=`
<!-- Updated HTML structure with the hospital logo -->
<div class="hospital-info">
  <div class="hospital-logo">
    <img src="sanyu.png" alt="Hospital Logo">
  </div>
  <div class="hospital-details">
    <h1>SANYU HOSPITAL</h1>
    <p>Address: Katooke Wakiso District (Uganda)</p>
    <p>Phone: +256 708 657 717</p>
    <p>Email: sanyuhospital@gmail.com</p>
  </div>
</div>
<div class="watermark">
  <img src="sanyu.png" alt="Watermark" class="watermark-image">
</div>

  <style>
  /* Updated CSS styles for larger receipt content */
  /* Use the "Open Sans" font */
  @import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@300&display=swap');
  
  /* Updated CSS styles for larger receipt content */
  .receipt {
    font-family: 'Anton', sans-serif;
        max-width: 100%; /* Fit to the paper width */
    margin: 0 auto;
    padding: 20px; /* Increased padding */
    font-weight: 50px
  }
  .hospital-info {
    display: flex;
    align-items: center;
    margin-bottom: 20px; /* Increased margin */
  }
  /* Add styles for the watermark */
  .watermark {
    position: absolute;
    top: 50%; /* Position at the vertical center of the receipt */
    left: 50%; /* Position at the horizontal center of the receipt */
    transform: translate(-50%, -50%); /* Center the watermark */
    z-index: -1; /* Place it behind the receipt content */
    opacity: 0.2; /* Adjust opacity to your preference */
  }
  
  .watermark-image {
    width: 100%; /* Make the watermark cover the entire receipt */
    height: auto;
  }
  
  .hospital-info h1 {
    font-size: 32px; /* Increased font size */
    margin: 0;
  }
  
  .hospital-details {
    flex-grow: 1;
    text-align: right;
  }
  
  .hospital-details p {
    font-size: 20px; /* Increased font size */
    margin: 10px; /* Increased margin */
  }
  
  .receipt-header h2 {
    font-size: 26px; /* Increased font size */
    text-align: center;
    margin: 0;
  }
  
  .receipt-header p {
    font-size: 18px; /* Increased font size */
    text-align: left;
    margin: 10px;
  }
  
  .receipt-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px; /* Increased margin */
  }
  
  .receipt-table th,
   .receipt-table td {
    padding: 15px; /* Increased padding */
    border: none; /* Remove borders */
    font-size: 20px; /* Increased font size */
    text-align: left;
  }
  
  .receipt-footer {
    text-align: right;
    margin-top: 20px; /* Increased margin */
  }
  
  .disclaimer {
    font-size: 18px; /* Increased font size */
    text-align: center;
    margin-top: 30px; /* Increased margin */
    font-style: italic;
  }
  
  /* Updated CSS styles with hospital logo */
  .hospital-info {
    display: flex;
    align-items: center;
    margin-bottom: 20px; /* Increased margin */
  }
  
  .hospital-logo {
    margin-right: 20px; /* Add margin to separate the logo from hospital details */
  }
  
  .hospital-logo img {
    max-width: 180px; /* Adjust the max width as needed */
    height: auto;
  }
  
  .hospital-info h1 {
    font-size: 32px; /* Increased font size */
    margin: 0;
  }
  
  .hospital-details {
    flex-grow: 1;
    text-align: right;
  }
  
  .hospital-details p {
    font-size: 24px; /* Increased font size */
    margin: 10px; /* Increased margin */
  }

  .receipt-table {
    width: 100%;
    border-collapse: collapse;
  }

  .receipt-table th, .receipt-table td {
    padding: 10px; /* Increased padding */
    border: 1px solid #ccc;
    font-size: 16px; /* Increased font size */
  }

  .receipt-footer {
    text-align: right;
  }

  .disclaimer {
    font-size: 14px; /* Increased font size */
    text-align: center;
    margin-top: 20px; /* Increased margin */
    font-style: italic;
  }

  
</style>


`;const receiptHeader=`
  <div class="receipt-header">
    <h2>Medicine Purchase Receipt</h2>
    <p>Date: ${(new Date).toLocaleDateString()}</p>
    <p>Time: ${(new Date).toLocaleTimeString()}</p>
  </div>
`;const receiptTable=`
  <table class="receipt-table">
    <thead>
      <tr>
        <th>Medicine</th>
        <th>Mgs</th>
        <th>Pieces</th>
        <th>Cost</th>
      </tr>
    </thead>
    <tbody>
      ${generateReceiptRows(cartItemsArray)}
    </tbody>
  </table>
`;const disclaimer=`
  <div class="disclaimer">
    <p>Goods once sold are not returnable.</p>
  </div>
`;const totalCost=cartItemsArray.reduce((total,item)=>total+item.totalCost,0);const receiptFooter=`
  <div class="receipt-footer">
    <p>Total Cost: Ug.shs. ${totalCost}.00</p>
  </div>
`;const receiptContent=`
  <div class="receipt">
    ${hospitalInfo}
    ${receiptHeader}
    ${receiptTable}
    ${disclaimer}
    ${receiptFooter}
  </div>
`;return receiptContent}function generateReceiptRows(cartItemsArray){return cartItemsArray.map(item=>`
  <tr>
    <td>${item.patientName}</td>
    <td>${item.grams}</td>
    <td>${item.pieces}</td>
    <td>${item.totalCost}</td>
  </tr>
`).join("")}function showCartPopup(){cartPopup.style.display="block";popupItems.innerHTML="";const cartTitle=document.createElement("h2");cartTitle.textContent="Cart Items";popupItems.appendChild(cartTitle);const cartTable=document.createElement("table");cartTable.classList.add("cart-table");const tableHeader=document.createElement("thead");const headerRow=document.createElement("tr");const headers=["Medicine","Milligrams","Pieces","Total Cost","Action"];headers.forEach(headerText=>{const headerCell=document.createElement("th");headerCell.textContent=headerText;headerRow.appendChild(headerCell)});tableHeader.appendChild(headerRow);cartTable.appendChild(tableHeader);const tableBody=document.createElement("tbody");let cartTotalCost=0;for(const item of cartItemsArray){const row=document.createElement("tr");const patientNameCell=document.createElement("td");patientNameCell.textContent=item.patientName;const gramsCell=document.createElement("td");gramsCell.textContent=item.grams;const piecesCell=document.createElement("td");piecesCell.textContent=item.pieces;const totalCostCell=document.createElement("td");totalCostCell.textContent=item.totalCost;const sellCell=document.createElement("td");const sellButton=document.createElement("button");sellButton.textContent="Sell";sellButton.addEventListener("click",function(){handleSellForMedicine(item)});const deleteCell=document.createElement("td");const deleteButton=document.createElement("button");deleteButton.innerHTML='<i class="fas fa-trash-alt"></i>';deleteButton.addEventListener("click",function(){deleteCartItem(item)});sellCell.appendChild(deleteButton);row.appendChild(patientNameCell);row.appendChild(gramsCell);row.appendChild(piecesCell);row.appendChild(totalCostCell);row.appendChild(sellCell);tableBody.appendChild(row);cartTotalCost+=item.totalCost}cartTable.appendChild(tableBody);popupItems.appendChild(cartTable);const totalRow=document.createElement("tr");const totalCell=document.createElement("td");totalCell.colSpan=4;totalCell.textContent="Overall Total Cost:";totalRow.appendChild(totalCell);const totalCostCell=document.createElement("td");totalCostCell.textContent=cartTotalCost;totalRow.appendChild(totalCostCell);tableBody.appendChild(totalRow);const sellButton=document.createElement("button");sellButton.classList.add("add-to-cart-button");sellButton.innerHTML='<i class="fas fa-receipt"></i> Sell & Print Receipt';popupItems.appendChild(sellButton);sellButton.addEventListener("click",function(){sellButton.disabled=true;sellButton.textContent="Selling...";generateAndPrintReceipt(cartItemsArray);sellMedicinesInCart(cartItemsArray).then(()=>{sellButton.innerHTML='<i class="fas fa-spinner fa-spin"></i> Processing...';sellButton.disabled=false;itemCount.innerHTML="0"}).catch(error=>{console.error("Error while selling:",error);sellButton.textContent='<i class="fas fa-receipt"></i> Sell & Print Receipt';sellButton.disabled=false})});popupItems.appendChild(sellButton);cartCount=cartItemsArray.length;itemCount.textContent=cartCount}function deleteCartItem(item){const index=cartItemsArray.indexOf(item);if(index!==-1){cartItemsArray.splice(index,1);showCartPopup()}}addToCartButton.addEventListener("click",function(){const patientName=document.getElementById("sellFormPatientName").value;const grams=parseFloat(document.getElementById("sellGrams").value);const pieces=parseFloat(document.getElementById("sellPieces").value);const totalCost=parseFloat(document.getElementById("totalCost").value);const sellPopupClose=document.getElementById("sellPopupClose2");if(!isNaN(grams)&&!isNaN(pieces)&&!isNaN(totalCost)&&pieces>0){const item={patientName:patientName,grams:grams,pieces:pieces,totalCost:totalCost};cartItemsArray.push(item);cartCount=cartItemsArray.length;itemCount.textContent=cartCount;addToCartButton.innerHTML='<i class="fas fa-check-circle"></i> Added';addToCartButton.style.backgroundColor="orange";addToCartButton.disabled=true;setTimeout(()=>{addToCartButton.innerHTML='<i class="fas fa-shopping-cart"></i> Add to Cart';addToCartButton.style.backgroundColor="";addToCartButton.disabled=false;const sellPopupClose=document.getElementById("sellPopupClose2");sellPopupClose.click()},1e3);cartTotal+=totalCost;cartTotalElement.textContent=`$${cartTotal}`}else{alert("Please fill in valid values before adding to the cart.")}});row.appendChild(actionsCell);table.appendChild(row)});patientsContainer.innerHTML="";patientsContainer.appendChild(table)}async function sellMedicinesInCart(cart){const sellButton=document.querySelector(".add-to-cart-button");sellButton.innerHTML='<i class="fas fa-spinner fa-spin"></i> Processing...';if(cart.length===0){sellButton.innerHTML='<i class="fas fa-receipt"></i> Sell & Print Receipt';return}const item=cart[0];try{await handleSellForMedicine(item);cart.shift()}catch(error){console.error("Error while selling:",error)}sellMedicinesInCart(cart)}function handleSellForMedicine(item){const sellFormPatientName=item.patientName;const piecesSold=item.pieces;const patient=patients.find(p=>p.name===sellFormPatientName);if(!patient){console.error("Medicine not found.");return}const initialStock=parseInt(patient.parents);if(patient.hasOwnProperty("sales")){const salesNode=patient.sales;let totalSalesQuantity=0;for(const saleKey in salesNode){const saleQuantity=parseInt(salesNode[saleKey].quantity);if(!isNaN(saleQuantity)){totalSalesQuantity+=saleQuantity}}const remainingStock=initialStock-totalSalesQuantity;if(piecesSold>remainingStock){alert("Cannot sell beyond remaining stock.");return}}const patientSalesRef=push(ref(database,`medicine/${sellFormPatientName}/sales`));const saleId=patientSalesRef.key;const currentTime=new Date;const saleDate=`${(currentTime.getMonth()+1).toString().padStart(2,"0")}/${currentTime.getDate().toString().padStart(2,"0")}/${currentTime.getFullYear().toString().slice(2)}`;const saleTime=new Date(currentTime).toLocaleTimeString();set(patientSalesRef,{saleId:saleId,quantity:piecesSold,date:saleDate,time:saleTime}).then(()=>{const successMessage=document.getElementById("sellSuccessMessage");successMessage.textContent=`Sale recorded with successfully!`;successMessage.style.display="block";setTimeout(()=>{successMessage.style.display="none";cartPopup.style.display="none"},2e3)}).catch(error=>{console.error("Failed to add sale data:",error);alert("Error adding sale. Please try again.")})}function handleSellProductSubmit(e){e.preventDefault();const sellFormPatientName=document.getElementById("sellFormPatientName").value;const sellPiecesInput=document.getElementById("sellPieces");const piecesSold=parseInt(sellPiecesInput.value,10);if(!isNaN(piecesSold)&&piecesSold>0){const patient=patients.find(p=>p.name===sellFormPatientName);if(!patient){console.error("Medicine not found.");return}const initialStock=parseInt(patient.parents);if(patient.hasOwnProperty("sales")){const salesNode=patient.sales;let totalSalesQuantity=0;for(const saleKey in salesNode){const saleQuantity=parseInt(salesNode[saleKey].quantity);if(!isNaN(saleQuantity)){totalSalesQuantity+=saleQuantity}}const remainingStock=initialStock-totalSalesQuantity;if(piecesSold>remainingStock){alert("Cannot sell beyond remaining stock.");return}}const patientSalesRef=push(ref(database,`medicine/${sellFormPatientName}/sales`));const saleId=patientSalesRef.key;const currentTime=(new Date).getTime();const saleDate=new Date(currentTime).toLocaleDateString();const saleTime=new Date(currentTime).toLocaleTimeString();set(patientSalesRef,{saleId:saleId,quantity:piecesSold,date:saleDate,time:saleTime}).then(()=>{console.log("Sale added successfully with ID:",saleId);const successMessage=document.getElementById("sellSuccessMessage");successMessage.textContent=`Sale recorded with  id ${saleId} successfully on ${saleDate} at ${saleTime}`;successMessage.style.display="block";setTimeout(()=>{successMessage.style.display="none"},5e3)}).catch(error=>{console.error("Failed to add sale data:",error);alert("Error adding sale. Please try again.")});const sellPopupOverlay=document.getElementById("sellPopupOverlay2");sellPopupOverlay.style.display="none"}else{alert("Please enter a valid number of pieces to sell.")}}const addRecordForm=document.getElementById("addRecordForm");let currentPatientName="";function showMessage(message){const messageElement=document.getElementById("message");messageElement.textContent=message;messageElement.style.display="block";setTimeout(()=>{messageElement.style.display="none"},4e3)}showMessage("");addRecordForm.addEventListener("submit",function(e){e.preventDefault();const patientName=currentPatientName;const testsTaken=document.getElementById("testsTaken").value;const resultsObtained=document.getElementById("resultsObtained").value;const medicationTaken=document.getElementById("medicationTaken").value;const additionalNotes=document.getElementById("additionalNotes").value;const recordData={testsTaken:testsTaken,resultsObtained:resultsObtained,medicationTaken:medicationTaken,additionalNotes:additionalNotes};const patientRef=ref(database,`medicine/${patientName}`);const newRecordRef=push(child(patientRef,"history"));set(newRecordRef,recordData).then(()=>{addRecordForm.reset();showMessage("Record added successfully!")}).catch(error=>{console.error("Error adding record:",error);showMessage("Error adding record. Please try again.")})});function openPatientHistoryPopup(patient){const popupOverlay=document.getElementById("popupOverlay1");const popupClose=document.getElementById("popupClose1");const patientHistory=document.getElementById("patientHistory");patientHistory.innerHTML="";const patientHistoryContent=document.createElement("div");patientHistoryContent.innerHTML=`
    <p><strong>Name of Medicine:</strong> ${patient.name}</p>
    <p><strong>Date of Expiry:</strong> ${patient.dob}</p>
    <p><strong>Number of Pieces:</strong> ${patient.parents}</p>
    <p><strong>Date of Stock:</strong> ${patient.dos}</p>
    <p><strong>Medical History:</strong> ${patient.medicalHistory}</p>
  `;patientHistory.appendChild(patientHistoryContent);popupOverlay.style.visibility="visible";popupOverlay.style.opacity="1";addRecordPopupOverlay.style.visibility="hidden";addRecordPopupOverlay.style.opacity="0";popupClose.addEventListener("click",function(){popupOverlay.style.visibility="hidden";popupOverlay.style.opacity="0"});const patientHistoryElement=document.getElementById("patientHistory");const patientName=patient.name;const patientHistoryRef=ref(database,`medicine/${patientName}/history`);onValue(patientHistoryRef,snapshot=>{patientHistoryElement.innerHTML="";if(snapshot.exists()){snapshot.forEach(childSnapshot=>{const recordKey=childSnapshot.key;const record=childSnapshot.val();const recordElement=createRecordElement(recordKey,record);patientHistoryElement.appendChild(recordElement)})}else{const noRecordsElement=document.createElement("p");noRecordsElement.textContent="No Records Found";noRecordsElement.style.fontStyle="italic";patientHistoryElement.appendChild(noRecordsElement)}});function createRecordElement(recordKey,record){const recordElement=document.createElement("div");recordElement.classList.add("record");const recordKeyElement=document.createElement("h4");recordKeyElement.textContent="Record Key: "+recordKey;recordElement.appendChild(recordKeyElement);const testsTakenElement=document.createElement("p");testsTakenElement.textContent="Age Range: "+record.testsTaken;recordElement.appendChild(testsTakenElement);const resultsObtainedElement=document.createElement("p");resultsObtainedElement.textContent="Prescription: "+record.resultsObtained;recordElement.appendChild(resultsObtainedElement);const medicationTakenElement=document.createElement("p");medicationTakenElement.textContent="Works on (Treats): "+record.medicationTaken;recordElement.appendChild(medicationTakenElement);const additionalNotesElement=document.createElement("p");additionalNotesElement.textContent="Additional Notes: "+record.additionalNotes;recordElement.appendChild(additionalNotesElement);const deleteButton=document.createElement("button");deleteButton.classList.add("delete-button");const binIcon=document.createElement("i");binIcon.classList.add("fa","fa-trash");deleteButton.innerHTML="";deleteButton.appendChild(binIcon);deleteButton.innerHTML+=" Delete";deleteButton.addEventListener("click",()=>{deleteRecord(recordKey)});recordElement.appendChild(deleteButton);return recordElement}function deleteRecord(recordKey){const patientName=patient.name;const confirmation=confirm("Are you sure you want to delete this record?");if(confirmation){const password=prompt("Please enter your password to confirm the deletion:");if(password==="mm"){const recordRef=ref(database,`medicine/${patientName}/history/${recordKey}`);remove(recordRef).then(()=>{alert("Record deleted successfully!")}).catch(error=>{console.error("Error deleting record:",error);alert("Error deleting record. Please try again.")})}else{alert("Wrong password. Deletion cancelled.")}}}}const addMedicationBtn=document.getElementById("addMedicationBtn");const addRecordPopupOverlay=document.getElementById("addRecordPopupOverlay");const addRecordPopupClose=document.getElementById("addRecordPopupClose");addMedicationBtn.addEventListener("click",()=>{addRecordPopupOverlay.style.visibility="visible";addRecordPopupOverlay.style.opacity="1"});addRecordPopupClose.addEventListener("click",()=>{addRecordPopupOverlay.style.visibility="hidden";addRecordPopupOverlay.style.opacity="0"});const loaderElement=document.getElementById("loader");const patientsRef=ref(database,"medicine");loaderElement.classList.remove("hidden");onValue(patientsRef,snapshot=>{const patientsData=snapshot.val();if(patientsData){patients=Object.values(patientsData);renderPatients(patients)}loaderElement.classList.add("hidden")});const uploadForm=document.getElementById("addPatientForm");uploadForm.addEventListener("submit",e=>{e.preventDefault();const nameInput=document.getElementById("name");const dobInput=document.getElementById("dob");const parentsInput=document.getElementById("parents");const database=getDatabase();const savePatientData=()=>{const name=nameInput.value;const dob=dobInput.value;const parents=parentsInput.value;const patientsRef=ref(database,"medicine");const newPatientRef=child(patientsRef,name);set(newPatientRef,{name:name,dob:dob,parents:parents}).then(()=>{nameInput.value="";dobInput.value="";parentsInput.value="";showMessage("Patient details uploaded successfully!")}).catch(error=>{console.error("Error uploading patient details:",error);showMessage("Error uploading patient details. Please try again.")})};const showMessage=message=>{const messageElement=document.getElementById("message");messageElement.textContent=message;messageElement.style.display="block";setTimeout(()=>{messageElement.style.display="none"},3e3)}});const onlineStatusElement=document.getElementById("onlineStatus");const overlayElement=document.getElementById("overlay");function updateOnlineStatus(){if(navigator.onLine){onlineStatusElement.innerHTML='<i class="fa fa-wifi"></i>';onlineStatusElement.classList.remove("offline");onlineStatusElement.classList.add("online");overlayElement.style.display="none"}else{onlineStatusElement.innerHTML='<i class="fa fa-exclamation-triangle"></i>';onlineStatusElement.classList.remove("online");onlineStatusElement.classList.add("offline");overlayElement.style.display="block"}}updateOnlineStatus();window.addEventListener("online",updateOnlineStatus);window.addEventListener("offline",updateOnlineStatus);window.addEventListener("load",function(){const splashScreen=document.getElementById("splashScreen");splashScreen.style.opacity="0";setTimeout(function(){splashScreen.style.display="none"},500)});