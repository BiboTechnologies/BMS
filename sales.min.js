import{initializeApp}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-app.js";import{getDatabase,update,ref,remove,push,get,onValue,child,set}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-database.js";import{getAuth,onAuthStateChanged,sendPasswordResetEmail,signInWithEmailAndPassword,GoogleAuthProvider,signInWithPopup}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-auth.js";const firebaseConfig={apiKey:"AIzaSyCi_hufIZTzsYtdPGQtvtmKmAkkrydmn_A",authDomain:"abbah-83a7b.firebaseapp.com",databaseURL:"https://abbah-83a7b-default-rtdb.firebaseio.com",projectId:"abbah-83a7b",storageBucket:"abbah-83a7b.appspot.com",messagingSenderId:"379729759051",appId:"1:379729759051:web:e75528d61b02d1e4f536ce",measurementId:"G-H41J2WMR6S"};const app=initializeApp(firebaseConfig);const database=getDatabase(app);const auth=getAuth(app);if("serviceWorker"in navigator){window.addEventListener("load",()=>{navigator.serviceWorker.register("service-worker.js").then(registration=>{console.log("Service Worker registered with scope:",registration.scope)}).catch(error=>{console.error("Service Worker registration failed:",error)})})}let deferredPrompt;const installPopup=document.getElementById("installPopup");const installButton=document.getElementById("installButton");window.addEventListener("beforeinstallprompt",event=>{event.preventDefault();deferredPrompt=event;installPopup.style.display="block"});installButton.addEventListener("click",()=>{deferredPrompt.prompt();deferredPrompt.userChoice.then(choiceResult=>{if(choiceResult.outcome==="accepted"){console.log("User accepted the A2HS prompt")}else{console.log("User dismissed the A2HS prompt")}deferredPrompt=null});installPopup.style.display="none"});function showMessage(message){const messageElement=document.getElementById("message");messageElement.textContent=message;messageElement.style.display="block";setTimeout(()=>{messageElement.style.display="none"},4e3)}showMessage("");let authToken;let tokenExpiryTime;function generateToken(){authToken=Math.random().toString(36).substring(2);const currentTime=new Date;const tokenExpiryTime=new Date(currentTime.getTime()+24*60*60*1e3);localStorage.setItem("authToken",authToken);localStorage.setItem("tokenExpiryTime",tokenExpiryTime.toString())}function retrieveTokenFromLocalStorage(){authToken=localStorage.getItem("authToken");const storedExpiryTime=localStorage.getItem("tokenExpiryTime");if(authToken&&storedExpiryTime){tokenExpiryTime=new Date(storedExpiryTime)}}function isTokenValid(){const currentTime=new Date;return tokenExpiryTime>currentTime}window.addEventListener("load",function(){retrieveTokenFromLocalStorage();if(!isTokenValid()){window.location.href="login.html"}});document.addEventListener("contextmenu",function(event){if(document.getElementById("loginpopup").style.display==="block"){event.preventDefault()}document.addEventListener("keydown",function(event){if(event.keyCode===123){event.preventDefault()}})});const allowedEmails=["biboofficial256@gmail.com"];document.getElementById("loginForm").addEventListener("submit",function(event){event.preventDefault();const submitBtn=document.getElementById("submitBtn");submitBtn.innerHTML='<i class="fas fa-spinner fa-spin"></i> Submitting';const email=document.getElementById("email").value;const password=document.getElementById("password").value;signInWithEmailAndPassword(auth,email,password).then(userCredential=>{if(allowedEmails.includes(email)){document.getElementById("loginoverlay").style.display="none";document.getElementById("loginpopup").style.display="none";generateToken()}else{const errorContainer=document.getElementById("errorContainer");errorContainer.textContent="Access denied. You are not authorized.";errorContainer.style.display="block";signOut(auth).then(()=>{setTimeout(function(){submitBtn.innerHTML="Submit"},2e3)}).catch(error=>{console.error("Error signing out:",error)})}}).catch(error=>{const errorMessage=error.message;const errorContainer=document.getElementById("errorContainer");errorContainer.textContent=errorMessage;errorContainer.style.display="block";setTimeout(function(){submitBtn.innerHTML="Submit"},2e3)})});document.getElementById("forgotPasswordLink").addEventListener("click",function(event){event.preventDefault();const email=document.getElementById("email").value;sendPasswordResetEmail(auth,email).then(()=>{showMessage(" A password reset email has been sent. Please check your inbox.")}).catch(error=>{const errorMessage=error.message;alert("Password reset email failed to send. "+errorMessage)})});function displayMessage(title,message,isSuccess=false){const existingMessages=document.querySelectorAll(".retry-message");existingMessages.forEach(function(message){message.remove()});const messageDiv=document.createElement("div");messageDiv.classList.add("retry-message");if(isSuccess){messageDiv.style.backgroundColor="#4caf50"}const closeButton=document.createElement("button");closeButton.classList.add("close-btn");closeButton.innerHTML='<i class="fa fa-times"></i>';closeButton.addEventListener("click",function(){messageDiv.remove()});const titleElement=document.createElement("h2");titleElement.textContent=title;const messageElement=document.createElement("p");messageElement.textContent=message;messageDiv.appendChild(titleElement);messageDiv.appendChild(messageElement);document.body.appendChild(messageDiv);setTimeout(function(){messageDiv.remove()},1500)}function displayUserInformation(user){const profileName=document.querySelector(".profile_info h2");profileName.textContent=user.displayName;const profileImage=document.querySelector(".profile_pic img");profileImage.src=user.photoURL;const dropdownProfileImage=document.querySelector(".user-profile img");dropdownProfileImage.src=user.photoURL;displayMessage("",`Welcome, ${user.displayName}.`,true)}function handleSignInSuccess(user){displayUserInformation(user)}function handleSignInError(error){console.error("Error signing in:",error);displayMessage("Access Denied. Please sign in with a valid email.")}function signInWithGoogle(){var provider=new GoogleAuthProvider;signInWithPopup(auth,provider).then(function(result){const user=result.user;handleSignInSuccess(user)}).catch(function(error){handleSignInError(error)})}window.addEventListener("load",function(){auth.onAuthStateChanged(function(user){if(user){displayUserInformation(user)}else{signInWithGoogle()}})});function retryCallback(){signInWithGoogle()}function updateStaffCount(){const staffRef=ref(database,"staff");get(staffRef).then(snapshot=>{const staffData=snapshot.val();const staffCount=staffData?Object.keys(staffData).length:0;const staffCountElement=document.getElementById("staffCount");if(staffCountElement){staffCountElement.innerText=staffCount.toString()}}).catch(error=>{console.error("Error fetching staff count:",error)})}function updatePatientsCount(){const patientsRef=ref(database,"patients");get(patientsRef).then(snapshot=>{const patientsData=snapshot.val();const patientsCount=patientsData?Object.keys(patientsData).length:0;const patientsCountElement=document.getElementById("patientsCount");if(patientsCountElement){patientsCountElement.innerText=patientsCount.toString()}}).catch(error=>{console.error("Error fetching patients count:",error)})}updateStaffCount();updatePatientsCount();setInterval(()=>{updateStaffCount();updatePatientsCount()},1e3);function openExpenseSummaryPopup(){const overlay=document.getElementById("ExpenseSummaryPopupOverlay");const ExpenseSummaryPopup=document.getElementById("ExpenseSummaryPopup");overlay.style.display="block";ExpenseSummaryPopup.style.display="block";const startDate=document.getElementById("dailystartDate").value;const endDate=document.getElementById("dailyendDate").value;fetchAndDisplayDailyExpenses(startDate,endDate)}function closeExpenseSummaryPopup(){const overlay=document.getElementById("ExpenseSummaryPopupOverlay");const ExpenseSummaryPopup=document.getElementById("ExpenseSummaryPopup");overlay.style.display="none";ExpenseSummaryPopup.style.display="none"}document.getElementById("showPopupButton").addEventListener("click",openExpenseSummaryPopup);document.getElementById("closePopupButton").addEventListener("click",closeExpenseSummaryPopup);function filterExpensesByDate(){const startDateValue=document.getElementById("dailystartDate").value;const endDateValue=document.getElementById("dailyendDate").value;if(!startDateValue||!endDateValue){alert("Please select both start and end dates.");return}const startDate=new Date(startDateValue);const endDate=new Date(endDateValue);fetchAndDisplayDailyExpenses(startDate,endDate)}function renderFilteredDailyExpenses(filteredExpenses){const dailyExpensesTableBody=document.getElementById("dailyExpensesBody");dailyExpensesTableBody.innerHTML="";filteredExpenses.forEach(expense=>{const row=document.createElement("tr");row.innerHTML=`
    <td>${expense.date}</td>
    <td>${expense.amount.toLocaleString("en-US",{style:"currency",currency:"UGX"})}</td>
    <td>${expense.expense}</td>
    
    <td>
      <button class="delete-button2" onclick="deleteDailyExpense('${expense.key}')">Delete</button>
    </td>
  `;dailyExpensesTableBody.appendChild(row)})}document.getElementById("filterByDateButton").addEventListener("click",filterExpensesByDate);function fetchAndDisplayDailyExpenses(startDate,endDate){const dailyExpensesRef=ref(database,"daily_expenses");onValue(dailyExpensesRef,snapshot=>{const dailyExpensesData=snapshot.val();if(dailyExpensesData){const dailyExpensesTableBody=document.getElementById("dailyExpensesBody");dailyExpensesTableBody.innerHTML="";const dailyExpensesSummary={};let totalAmountSum=0;for(const dateKey in dailyExpensesData){const dateExpenses=dailyExpensesData[dateKey];const dateParts=dateKey.split("-");const formattedDate=`${dateParts[1]}/${dateParts[2]}/${dateParts[0]}`;for(const expenseKey in dateExpenses){const expenseData=dateExpenses[expenseKey];const expenseDate=new Date(expenseData.date);if(!startDate||!endDate||expenseDate>=startDate&&expenseDate<=endDate){if(!dailyExpensesSummary[formattedDate]){dailyExpensesSummary[formattedDate]={count:0,totalAmount:0}}dailyExpensesSummary[formattedDate].count++;dailyExpensesSummary[formattedDate].totalAmount+=expenseData.amount;totalAmountSum+=expenseData.amount}}}const sortedDates=Object.keys(dailyExpensesSummary).sort((a,b)=>{const dateA=new Date(a);const dateB=new Date(b);return dateB-dateA});for(const date of sortedDates){const summary=dailyExpensesSummary[date];const row=document.createElement("tr");row.innerHTML=`
        <td>${date}</td>
        <td>${summary.count}</td>
        <td>${summary.totalAmount.toLocaleString("en-US",{style:"currency",currency:"UGX"})}</td>
        <td>
          <button class="details-button" data-date="${date}">Details</button>
        </td>
      `;dailyExpensesTableBody.appendChild(row)}const totalAmountSumDiv=document.getElementById("totalAmountSum");totalAmountSumDiv.innerHTML=`<i class="fas fa-money-bill"></i>  Table Summation : ${totalAmountSum.toLocaleString("en-US",{style:"currency",currency:"UGX"})}`;const detailsButtons=document.querySelectorAll(".details-button");detailsButtons.forEach(button=>{button.addEventListener("click",function(){const dateCell=this.parentElement.parentElement.querySelector("td:first-child");const selectedDateCellFormat=dateCell.textContent.trim();const selectedDateFirebaseFormat=convertDateToFirebaseFormat(selectedDateCellFormat);searchAndDisplayExpensesByDate(selectedDateFirebaseFormat)})})}});const clearFilterButton=document.getElementById("clear-filter-details");clearFilterButton.addEventListener("click",function(){fetchAndDisplayDailyExpenses(null,null);const startDateInput=document.getElementById("dailystartDate");const endDateInput=document.getElementById("dailyendDate");startDateInput.value="";endDateInput.value=""})}function convertDateToFirebaseFormat(dateString){const parts=dateString.split("/");const year=parts[2];const month=parts[0].padStart(2,"0");const day=parts[1].padStart(2,"0");return`${year}-${month}-${day}`}function searchAndDisplayExpensesByDate(searchDate){const detailsPopup=document.getElementById("detailsPopup");const dailyExpensesDetails=document.getElementById("dailyExpensesDetails");const popupTitle=document.getElementById("popupTitle");popupTitle.textContent=`Expenses made on ${searchDate}`;dailyExpensesDetails.innerHTML="";const dateExpensesRef=ref(database,"daily_expenses/"+searchDate);get(dateExpensesRef).then(snapshot=>{const dateExpensesData=snapshot.val();if(dateExpensesData){const table=document.createElement("table");table.classList.add("expense-table");const headerRow=table.createTHead().insertRow(0);const expenseHeader=document.createElement("th");expenseHeader.textContent="Expense";headerRow.appendChild(expenseHeader);const timeHeader=document.createElement("th");timeHeader.textContent="Time";headerRow.appendChild(timeHeader);const amountHeader=document.createElement("th");amountHeader.textContent="Amount (UGX)";headerRow.appendChild(amountHeader);const actionHeader=document.createElement("th");actionHeader.textContent="Action";headerRow.appendChild(actionHeader);let totalAmount=0;for(const key in dateExpensesData){const expenseData=dateExpensesData[key];const row=table.insertRow(-1);const expenseCell=row.insertCell(0);const timeCell=row.insertCell(1);const amountCell=row.insertCell(2);const actionCell=row.insertCell(3);expenseCell.textContent=expenseData.expense;timeCell.textContent=new Date(expenseData.date).toLocaleTimeString("en-US");amountCell.textContent=expenseData.amount.toLocaleString("en-US",{style:"currency",currency:"UGX"});const deleteButton=document.createElement("button");deleteButton.textContent="Delete";deleteButton.classList.add("delete-button");deleteButton.addEventListener("click",()=>deleteDailyExpense(searchDate,key));actionCell.appendChild(deleteButton);totalAmount+=expenseData.amount}const totalRow=table.insertRow(-1);const totalLabelCell=totalRow.insertCell(0);totalLabelCell.textContent="Total:";const totalAmountCell=totalRow.insertCell(1);totalAmountCell.colSpan=3;totalAmountCell.textContent=totalAmount.toLocaleString("en-US",{style:"currency",currency:"UGX"});dailyExpensesDetails.appendChild(table)}else{dailyExpensesDetails.innerHTML="No expenses found for the selected date."}detailsPopup.style.display="block";document.getElementById("closeDetailsButton").addEventListener("click",closeDetailsPopup)}).catch(error=>{console.error("Error fetching expenses:",error)})}function closeDetailsPopup(){const detailsPopup=document.getElementById("detailsPopup");detailsPopup.style.display="none"}function deleteDailyExpense(date,expenseKey){const enteredPassword=window.prompt("Enter the password to delete the expense:");const correctPassword="mm";if(enteredPassword===correctPassword){const expenseRef=ref(database,`daily_expenses/${date}/${expenseKey}`);remove(expenseRef).then(()=>{showMessage("Daily expense deleted successfully!");searchAndDisplayExpensesByDate(date)}).catch(error=>{console.error("Error deleting expense:",error)})}else{showMessage("Password incorrect. Deletion canceled.")}}document.addEventListener("DOMContentLoaded",()=>{fetchAndDisplayDailyExpenses()});function calculateAndDisplayTotalSums(expensesData){let totalSumMonthly=0;let totalSumYearly=0;let totalSumAfter2Years=0;let totalSumAfter3Years=0;let totalSumAfter5Years=0;for(const key in expensesData){const expenseData=expensesData[key];switch(expenseData.scheme){case"monthly":totalSumMonthly+=expenseData.amount;break;case"yearly":totalSumYearly+=expenseData.amount;break;case"after_2_years":totalSumAfter2Years+=expenseData.amount;break;case"after_3_years":totalSumAfter3Years+=expenseData.amount;break;case"after_5_years":totalSumAfter5Years+=expenseData.amount;break;default:break}}const totalSumMonthlyDiv=document.getElementById("totalSumMonthly");totalSumMonthlyDiv.textContent=`Billed (Monthly): ${totalSumMonthly.toLocaleString("en-US",{style:"currency",currency:"UGX"})}`;const totalSumYearlyDiv=document.getElementById("totalSumYearly");totalSumYearlyDiv.textContent=`Billed  (Yearly): ${totalSumYearly.toLocaleString("en-US",{style:"currency",currency:"UGX"})}`;const totalSumAfter2YearsDiv=document.getElementById("totalSumAfter2Years");totalSumAfter2YearsDiv.textContent=`Billed  (After 2 Years): ${totalSumAfter2Years.toLocaleString("en-US",{style:"currency",currency:"UGX"})}`;const totalSumAfter3YearsDiv=document.getElementById("totalSumAfter3Years");totalSumAfter3YearsDiv.textContent=`Billed  (After 3 Years): ${totalSumAfter3Years.toLocaleString("en-US",{style:"currency",currency:"UGX"})}`;const totalSumAfter5YearsDiv=document.getElementById("totalSumAfter5Years");totalSumAfter5YearsDiv.textContent=`Billed  (After 5 Years): ${totalSumAfter5Years.toLocaleString("en-US",{style:"currency",currency:"UGX"})}`;const expensesPieChart=document.getElementById("expensesPieChart");new Chart(expensesPieChart,{type:"pie",data:{labels:["Monthly","Yearly","After 2 Years","After 3 Years","After 5 Years"],datasets:[{data:[totalSumMonthly,totalSumYearly,totalSumAfter2Years,totalSumAfter3Years,totalSumAfter5Years],backgroundColor:["rgba(255, 99, 132, 0.6)","rgba(54, 162, 235, 0.6)","rgba(255, 206, 86, 0.6)","rgba(75, 192, 192, 0.6)","rgba(153, 102, 255, 0.6)"]}]},options:{responsive:true,maintainAspectRatio:false,title:{display:true,text:"Expense Distribution"},plugins:{legend:{labels:{color:"white"}}}}})}function fetchAndDisplaySchemedExpensesWithRetry(maxRetries,retryDelay){let retries=0;function fetchSchemedExpenses(){retries++;const schemedExpensesRef=ref(database,"schemed_expenses");return new Promise((resolve,reject)=>{onValue(schemedExpensesRef,snapshot=>{const schemedExpensesData=snapshot.val();if(schemedExpensesData){const schemedExpensesTableBody=document.getElementById("schemedExpensesBody");schemedExpensesTableBody.innerHTML="";for(const key in schemedExpensesData){const expenseData=schemedExpensesData[key];const formattedDate=new Date(expenseData.date).toLocaleDateString("en-US");const paymentScheme=expenseData.scheme;const startDate=new Date(expenseData.date);let dueDate;if(paymentScheme==="monthly"){dueDate=new Date(startDate);dueDate.setMonth(startDate.getMonth()+1)}else if(paymentScheme==="yearly"){dueDate=new Date(startDate);dueDate.setFullYear(startDate.getFullYear()+1)}else if(paymentScheme==="after_2_years"){dueDate=new Date(startDate);dueDate.setFullYear(startDate.getFullYear()+2)}else if(paymentScheme==="after_3_years"){dueDate=new Date(startDate);dueDate.setFullYear(startDate.getFullYear()+3)}else if(paymentScheme==="after_5_years"){dueDate=new Date(startDate);dueDate.setFullYear(startDate.getFullYear()+5)}const formattedDueDate=dueDate.toLocaleDateString("en-US");const currentDate=new Date;const daysLeft=Math.ceil((dueDate-currentDate)/(1e3*60*60*24));let daysLeftColorClass;if(daysLeft<=0){daysLeftColorClass="red-text"}else if(daysLeft<=10){daysLeftColorClass="orange-text"}else{daysLeftColorClass="green-text"}const row=document.createElement("tr");row.innerHTML=`
        <td>${expenseData.expense}</td>
        <td>${expenseData.amount.toLocaleString("en-US",{style:"currency",currency:"UGX"})}</td>
        <td>${expenseData.scheme}</td>
        <td>${formattedDate}</td>
        <td>${formattedDueDate}</td>
        <td class="${daysLeftColorClass}">${daysLeft} days</td>
        <td>
          <button class="delete-button" data-key="${key}"><i class="fa fa-trash"></i></button>
         <button class="renew-button" data-key="${key}"><i class="fa fa-refresh"></i></button>
        </td>
      `;schemedExpensesTableBody.appendChild(row)}const deleteButtons=document.querySelectorAll(".delete-button");deleteButtons.forEach(button=>{button.addEventListener("click",function(){const key=this.dataset.key;deleteExpense(key)})});const renewButtons=document.querySelectorAll(".renew-button");renewButtons.forEach(button=>{button.addEventListener("click",function(){const key=this.dataset.key;renewExpense(key)})});calculateAndDisplayTotalSums(schemedExpensesData);console.log("Schemed expenses fetched successfully!");resolve()}else{if(retries<maxRetries){console.log(`Retrying in ${retryDelay} milliseconds...`);setTimeout(()=>{fetchSchemedExpenses().then(resolve)},retryDelay)}else{console.error("Exceeded maximum retries. Unable to fetch schemed expenses.");reject()}}},error=>{console.error("Error fetching schemed expenses:",error);if(retries<maxRetries){console.log(`Retrying in ${retryDelay} milliseconds...`);setTimeout(()=>{fetchSchemedExpenses().then(resolve)},retryDelay)}else{console.error("Exceeded maximum retries. Unable to fetch schemed expenses.");reject()}})})}fetchSchemedExpenses().catch(()=>{console.log("Initial fetch failed. Retrying...");return fetchSchemedExpenses()})}fetchAndDisplaySchemedExpensesWithRetry(3,1e3);function deleteExpense(key){const enteredPassword=window.prompt("Enter the password to delete the expense:");const correctPassword="mm";if(enteredPassword===correctPassword){const expenseRef=ref(database,`schemed_expenses/${key}`);remove(expenseRef).then(()=>{showMessage("Expense deleted successfully!")}).catch(error=>{showMessage("Error deleting expense:",error)})}else{showMessage("Password incorrect. Deletion canceled.")}}function renewExpense(key){const enteredPassword=window.prompt("Enter the password to renew the expense:");const correctPassword="mm";if(enteredPassword===correctPassword){const expenseRef=ref(database,`schemed_expenses/${key}`);const currentDate=(new Date).toISOString();update(expenseRef,{date:currentDate}).then(()=>{showMessage("Expense renewed successfully!")}).catch(error=>{showMessage("Error renewing expense:",error)})}else{showMessage("Password incorrect. Renewal canceled.")}}fetchAndDisplayDailyExpenses();function saveSchemeExpense(expense,amount,scheme){const schemeExpensesRef=ref(database,"schemed_expenses");const newSchemeExpenseRef=push(schemeExpensesRef);const currentDate=new Date;const currentDateTimeString=currentDate.toISOString();const schemeExpenseData={expense:expense,amount:amount,scheme:scheme,date:currentDateTimeString};set(newSchemeExpenseRef,schemeExpenseData).then(()=>{showMessage("Schemed expense details saved successfully!")}).catch(error=>{showMessage("Error saving schemed expense details:",error)})}const saveSchemeExpenseButton=document.getElementById("saveSchemeExpenseButton");saveSchemeExpenseButton.addEventListener("click",function(){const schemeExpenseInput=document.getElementById("schemeExpense");const schemeAmountInput=document.getElementById("schemeAmount");const schemePaymentSelect=document.getElementById("schemePayment");const schemeExpense=schemeExpenseInput.value.trim();const schemeAmount=parseFloat(schemeAmountInput.value);const schemePayment=schemePaymentSelect.value;if(schemeExpense&&!isNaN(schemeAmount)&&schemeAmount>0){saveSchemeExpense(schemeExpense,schemeAmount,schemePayment);schemeExpenseInput.value="";schemeAmountInput.value="";closeSchemePopup()}else{alert("Please enter valid expense and amount.")}});function openSchemePopup(){const schemePopupContainer=document.getElementById("schemePopupContainer");const schemeOverlay=document.getElementById("schemeOverlay");schemePopupContainer.classList.add("active");schemeOverlay.classList.add("active")}function closeSchemePopup(){const schemePopupContainer=document.getElementById("schemePopupContainer");const schemeOverlay=document.getElementById("schemeOverlay");schemePopupContainer.classList.remove("active");schemeOverlay.classList.remove("active")}const openSchemePopupButton=document.getElementById("openSchemePopupButton");openSchemePopupButton.addEventListener("click",openSchemePopup);const schemeCloseButton=document.getElementById("schemeCloseButton");schemeCloseButton.addEventListener("click",closeSchemePopup);function saveExpenseDetails(expense,amount){const expensesRef=ref(database,"daily_expenses");const currentDate=(new Date).toISOString().split("T")[0];const expenseData={expense:expense,amount:amount,date:(new Date).toISOString()};const dateNodeRef=child(expensesRef,currentDate);push(dateNodeRef,expenseData).then(()=>{showMessage("Expense details saved successfully!")}).catch(error=>{showMessage("Error saving expense details:",error)})}const saveExpenseButton=document.getElementById("saveExpenseButton");saveExpenseButton.addEventListener("click",function(){const expenseInput=document.getElementById("expense");const amountInput=document.getElementById("amount");const expense=expenseInput.value.trim();const amount=parseFloat(amountInput.value);if(expense&&!isNaN(amount)&&amount>0){saveExpenseDetails(expense,amount);expenseInput.value="";amountInput.value="";closePopup()}else{alert("Please enter valid expense and amount.")}});function openPopup(){const popupContainer=document.getElementById("popupContainer");const overlay=document.getElementById("overlay");popupContainer.classList.add("active");overlay.classList.add("active")}function closePopup(){const popupContainer=document.getElementById("popupContainer");const overlay=document.getElementById("overlay");popupContainer.classList.remove("active");overlay.classList.remove("active")}const openPopupButton=document.getElementById("openPopupButton");const popupContainer=document.getElementById("popupContainer");const overlay=document.getElementById("overlay");const closeButton=document.getElementById("closeButton");openPopupButton.addEventListener("click",()=>{popupContainer.style.display="block";overlay.style.display="block"});closeButton.addEventListener("click",()=>{popupContainer.style.display="none";overlay.style.display="none"});const clearFilterButton2=document.getElementById("clear-filter-button2");clearFilterButton2.addEventListener("click",function(){document.getElementById("start-date2").value="";document.getElementById("end-date2").value="";fetchAndDisplayTests()});const filterButton2=document.getElementById("filter-button2");filterButton2.addEventListener("click",function(){const startDateValue=document.getElementById("start-date2").value;const endDateValue=document.getElementById("end-date2").value;const startDate2=new Date(startDateValue);const endDate2=new Date(endDateValue);filterTestsByDate(startDate2,endDate2).then(filteredTests=>{renderFilteredTests(filteredTests)})});function filterTestsByDate(startDate2,endDate2){const patientsRef=ref(database,"patients");return get(patientsRef).then(snapshot=>{const patientsData=snapshot.val();const filteredTests=[];if(patientsData){for(const patientId in patientsData){const patient=patientsData[patientId];if(patient.hasOwnProperty("testsTaken")){const testsTaken=patient.testsTaken;for(const testId in testsTaken){const testData=testsTaken[testId];const dateTakenValue=testData.dateTaken;if(dateTakenValue>=startDate2&&dateTakenValue<=endDate2){filteredTests.push({patientId:patientId,testId:testId,testsTakenValue:testData.testsTaken,dateTakenValue:new Date(testData.dateTaken),priceValue:testData.price})}}}}}return filteredTests}).catch(error=>{console.error("Error fetching patients data:",error);return[]})}function renderFilteredTests(filteredTests){const table=document.createElement("table");table.classList.add("test-table");let totalPrice=0;filteredTests.forEach(test=>{totalPrice+=test.priceValue});const totalPriceDiv=document.getElementById("total-price");totalPriceDiv.innerHTML=`Total Tests Revenue: ${totalPrice.toLocaleString("en-US",{style:"currency",currency:"UGX"})}`;const headerRow=document.createElement("tr");headerRow.innerHTML=`
    <th>Patient</th>
    <th>Test ID</th>
    <th>Tests Taken</th>
  
    <th>Date Taken</th>
    <th>Price (UGX)</th>
  `;table.appendChild(headerRow);filteredTests.forEach(test=>{const row=document.createElement("tr");const formattedDate=test.dateTakenValue.toLocaleDateString("en-US");row.innerHTML=`
      <td>${test.patientId}</td>
      <td>${test.testId}</td>
      <td>${test.testsTakenValue}</td>
      
      <td>${formattedDate}</td>
      <td>${test.priceValue.toLocaleString("en-US",{style:"currency",currency:"UGX"})}</td>
    `;table.appendChild(row)});const testTableContainer=document.getElementById("test-table-container");testTableContainer.innerHTML="";testTableContainer.appendChild(table)}let testsData=[];const testsPerPage=10;let currentPage=1;function fetchAndDisplayTestsWithPagination(){const testTableContainer=document.getElementById("test-table-container");const startIndex=(currentPage-1)*testsPerPage;const endIndex=startIndex+testsPerPage;const testsForPage=testsData.slice(startIndex,endIndex);const table=document.createElement("table");table.classList.add("test-table");const headerRow=document.createElement("tr");headerRow.innerHTML=`
  <th>Patient</th>
  <th>Test ID</th>
  <th>Tests Taken</th>
  <th>Date Taken</th>
  <th>Price (UGX)</th>
`;table.appendChild(headerRow);let totalPrice=0;testsForPage.forEach(test=>{const{patientId,testId,testsTaken,dateTaken,price}=test;const formattedDate=new Date(dateTaken).toLocaleDateString("en-US");const row=document.createElement("tr");row.innerHTML=`
    <td>${patientId}</td>
    <td>${testId}</td>
    <td>${testsTaken}</td>
    <td>${formattedDate}</td>
    <td>${price}</td>
  `;table.appendChild(row);totalPrice+=price});testTableContainer.innerHTML="";testTableContainer.appendChild(table);const totalPriceDiv=document.getElementById("total-price");totalPriceDiv.innerHTML=`Total Tests Revenue: ${totalPrice.toLocaleString("en-US",{style:"currency",currency:"UGX"})}`}function updatePagination(){const totalPages=Math.ceil(testsData.length/testsPerPage);const paginationDiv=document.getElementById("pagination");paginationDiv.innerHTML="";const prevButton=document.createElement("button");prevButton.textContent="Previous";prevButton.addEventListener("click",()=>{if(currentPage>1){currentPage--;fetchAndDisplayTestsWithPagination()}});const nextButton=document.createElement("button");nextButton.textContent="Next";nextButton.addEventListener("click",()=>{if(currentPage<totalPages){currentPage++;fetchAndDisplayTestsWithPagination()}});const pageInfo=document.createElement("span");pageInfo.textContent=`Page ${currentPage} of ${totalPages}`;paginationDiv.appendChild(prevButton);paginationDiv.appendChild(pageInfo);paginationDiv.appendChild(nextButton)}function fetchAndDisplayTestsWithRetry(maxRetries,retryDelay){let retries=0;function fetchTests(){retries++;const patientsRef=ref(database,"patients");get(patientsRef).then(snapshot=>{const patientsData=snapshot.val();if(patientsData){const extractedTests=extractTestsData(patientsData);testsData=extractedTests;currentPage=1;fetchAndDisplayTestsWithPagination();updatePagination()}else{showMessage("No patients data found.")}}).catch(error=>{console.error("Error fetching patients data:",error);if(retries<maxRetries){setTimeout(fetchTests,retryDelay)}else{console.error("Exceeded maximum retries. Unable to display tests.")}})}fetchTests()}function extractTestsData(patientsData){const extractedTests=[];for(const patientId in patientsData){const patient=patientsData[patientId];if(patient.hasOwnProperty("testsTaken")){const testsTaken=patient.testsTaken;for(const testId in testsTaken){const testData=testsTaken[testId];const testsTakenValue=testData.testsTaken;const dateTakenValue=new Date(testData.dateTaken);const priceValue=testData.price;extractedTests.push({patientId:patientId,testId:testId,testsTaken:testsTakenValue,dateTaken:dateTakenValue,price:priceValue})}}}return extractedTests}fetchAndDisplayTestsWithRetry(10,1e3);displayMessage("Signing in...","Please wait...",false);document.addEventListener("click",function(event){const target=event.target;if(target.tagName==="A"&&target.href.startsWith(window.location.origin)){localStorage.setItem("clickedLink",target.href)}});const logoutButton=document.getElementById("logoutButton");logoutButton.addEventListener("click",function(event){event.preventDefault();localStorage.setItem("logoutPage",window.location.href);const clickedLink=localStorage.getItem("clickedLink");if(clickedLink){localStorage.setItem("logoutPage",clickedLink)}displayOverlay();setTimeout(()=>{logOut();hideOverlay()},2e3)});function displayOverlay(){const spinner=document.createElement("div");spinner.id="loadingSpinner";overlay.appendChild(spinner);const loggingOutText=document.createElement("div");loggingOutText.id="loggingOutText";loggingOutText.textContent="Logging Out...";overlay.appendChild(loggingOutText);overlay.style.display="flex"}function hideOverlay(){const spinner=document.getElementById("loadingSpinner");const loggingOutText=document.getElementById("loggingOutText");overlay.removeChild(spinner);overlay.removeChild(loggingOutText);overlay.style.display="none"}function logOut(){auth.signOut().then(function(){localStorage.removeItem("authToken");localStorage.removeItem("tokenExpiryTime");localStorage.removeItem("clickedLink");const logoutPage=localStorage.getItem("logoutPage")||"login.html";window.location.href=logoutPage}).catch(function(error){console.error("Error signing out:",error)})}const form=document.querySelector(".popup-form");const submitButton=document.querySelector(".popup-form button");const successMessage=document.createElement("p");successMessage.textContent="Medicine details uploaded successfully!";successMessage.style.color="green";const errorMessage=document.createElement("p");errorMessage.textContent="Error uploading patient details. Please try again.";errorMessage.style.color="red";const patientsContainer=document.getElementById("patients");let patients=[];function renderPatients(patients){}patientsContainer.innerHTML="";const salesContainer=document.getElementById("salesContainer");const startDateInput=document.getElementById("start-date");const endDateInput=document.getElementById("end-date");const filterButton=document.getElementById("filter-button");let salesChart;let salesTrendChart;function renderSalesTable(sales,salesByDate){sales.sort((a,b)=>{const dateA=new Date(`${a.saleData.date} ${a.saleData.time}`);const dateB=new Date(`${b.saleData.date} ${b.saleData.time}`);return dateB-dateA});filterButton.addEventListener("click",applyDateFilter);function applyDateFilter(){const startDate=new Date(startDateInput.value);let endDate=new Date(endDateInput.value);endDate.setHours(23,59,59,999);const originalSales=[...sales];const filteredSales=originalSales.filter(sale=>{const[month,day,year]=sale.saleData.date.split("/").map(Number);const saleDate=new Date(year,month-1,day,0,0,0,0);return saleDate>=startDate&&saleDate<=endDate});showMessage("Filter Complete");renderSalesTable(filteredSales)}const clearFilterButton=document.getElementById("clear-filter-button");function clearDateFilter(){startDateInput.value="";endDateInput.value="";renderSalesTable(originalSales)}clearFilterButton.addEventListener("click",searchByMedicine);const table=document.createElement("table");table.classList.add("sales-table");const headerRow=document.createElement("tr");headerRow.innerHTML=`
  <th>Medicine</th>
  <th>Quantity</th>
  <th>Price (Ug.sh)</th>
  <th>Date</th>
  <th>Time</th>
  <th>Action</th>
`;table.appendChild(headerRow);const medicineIncomes={};const salesByDay={};if(salesChart){salesChart.destroy()}if(salesTrendChart){salesTrendChart.destroy()}sales.forEach(sale=>{const patientName=sale.patientName;const saleData=sale.saleData;const row=document.createElement("tr");const patientNameCell=document.createElement("td");patientNameCell.textContent=patientName;row.appendChild(patientNameCell);const quantityCell=document.createElement("td");quantityCell.textContent=saleData.quantity+" pcs";row.appendChild(quantityCell);const medicineId=saleData.medicineId;const priceCell=document.createElement("td");const medicineRef=ref(database,`medicine/${patientName}`);get(medicineRef).then(snapshot=>{if(snapshot.exists()){const medicineData=snapshot.val();const price=medicineData.price;priceCell.textContent=price?price:"N/A";const totalIncome=price*saleData.quantity;if(medicineIncomes[patientName]){medicineIncomes[patientName]+=totalIncome}else{medicineIncomes[patientName]=totalIncome}const day=saleData.date;if(salesByDay[day]){salesByDay[day]++}else{salesByDay[day]=1}updateChart();updateTotalAmount()}else{priceCell.textContent="N/A"}}).catch(error=>{console.log("Error fetching medicine data:",error);priceCell.textContent="N/A"});row.appendChild(priceCell);const dateCell=document.createElement("td");dateCell.textContent=saleData.date;row.appendChild(dateCell);const timeCell=document.createElement("td");timeCell.textContent=saleData.time;row.appendChild(timeCell);const deleteCell=document.createElement("td");const deleteButton=document.createElement("button");deleteButton.classList.add("delete-button");deleteButton.innerHTML='<i class="fa fa-trash"></i>';const saleId=sale.saleId;deleteButton.dataset.saleId=saleId;deleteButton.addEventListener("click",function(){const patientName=sale.patientName;const saleId=this.dataset.saleId;deleteSale(patientName,saleId).then(()=>{row.remove();updateChart();updateTotalAmount()}).catch(error=>{console.log("Error deleting sale:",error)})});deleteCell.appendChild(deleteButton);row.appendChild(deleteCell);function deleteSale(patientName,saleId){console.log("Deleting sale for medicine:",patientName);console.log("Sale ID:",saleId);const confirmation=confirm("Are you sure you want to delete this sale?");if(confirmation){const password=prompt("Please enter your password to confirm the deletion:");if(password==="mm"){const saleRef=ref(database,`medicine/${patientName}/sales/${saleId}`);return remove(saleRef).then(()=>{alert("Sale deleted successfully!")}).catch(error=>{console.error("Error deleting sale:",error);alert("Error deleting sale. Please try again.")})}else{alert("Wrong password. Deletion cancelled.")}}}const day=saleData.date;if(salesByDay[day]){salesByDay[day]++}else{salesByDay[day]=1}table.appendChild(row)});salesContainer.innerHTML="";salesContainer.appendChild(table);const chartCanvas=document.getElementById("salesChart");if(chartCanvas){updateChart()}const trendChartCanvas=document.getElementById("salesTrendChart");if(trendChartCanvas){updateSalesTrendChart()}function updateChart(){if(salesChart){salesChart.destroy()}const medicineNames=Object.keys(medicineIncomes);const totalIncomes=Object.values(medicineIncomes);const sortedMedicines=medicineNames.map((name,index)=>({name:name,income:totalIncomes[index]})).sort((a,b)=>b.income-a.income);const topSellingMedicines=sortedMedicines.slice(0,5);const chartData={labels:medicineNames,datasets:[{label:"Estimated Income (UGX)",data:totalIncomes,backgroundColor:"rgba(75, 192, 192, 0.5)",borderColor:"rgba(75, 192, 192, 1)",borderWidth:1}]};const chartOptions={scales:{y:{beginAtZero:true}}};const ctx=chartCanvas.getContext("2d");salesChart=new Chart(ctx,{type:"bar",data:chartData,options:chartOptions});const topSellingTable=document.getElementById("topsells");topSellingTable.innerHTML="";const table=document.createElement("table");table.classList.add("topsell-table");const headerRow=document.createElement("tr");headerRow.innerHTML=`
<th>Medicine Name</th>
<th>Income (UGX)</th>
`;table.appendChild(headerRow);topSellingMedicines.forEach(medicine=>{const row=document.createElement("tr");const medicineNameCell=document.createElement("td");medicineNameCell.textContent=medicine.name;row.appendChild(medicineNameCell);const medicineIncomeCell=document.createElement("td");medicineIncomeCell.textContent=` ${medicine.income.toLocaleString("en-US",{style:"currency",currency:"UGX"})}`;row.appendChild(medicineIncomeCell);table.appendChild(row)});topSellingTable.appendChild(table)}function updateSalesTrendChart(){if(salesTrendChart){salesTrendChart.destroy()}const days=Object.keys(salesByDay).reverse();const salesCount=Object.values(salesByDay).reverse();const chartData={labels:days,datasets:[{label:"Sales Count by Date",data:salesCount,backgroundColor:"rgba(255, 99, 132, 0.5)",borderColor:"rgba(255, 99, 132, 1)",borderWidth:1}]};const chartOptions={scales:{y:{beginAtZero:true}}};const ctx=trendChartCanvas.getContext("2d");salesTrendChart=new Chart(ctx,{type:"line",data:chartData,options:chartOptions})}function updateTotalAmount(){const totalAmountElement=document.getElementById("totalAmount");const totalAmount=Object.values(medicineIncomes).reduce((acc,curr)=>acc+curr,0);const formattedAmount=totalAmount.toLocaleString("en");totalAmountElement.innerHTML=`<i class="fa fa-money earnings-icon"></i> <span class="earnings-text"><br> UGX ${formattedAmount}.00</span>`}updateTotalAmount();let totalSalesCount=0;let previousDaySalesCount=0;const salesCountElement=document.getElementById("salesCount");Object.values(salesByDay).forEach(count=>{totalSalesCount+=count});if(previousDaySalesCount>totalSalesCount){const arrowUp='<span class="arrow-down">&#8595;</span>';salesCountElement.innerHTML=totalSalesCount+" "+arrowUp}else if(previousDaySalesCount<totalSalesCount){const arrowDown='<span class="arrow-up">&#8593;</span>';salesCountElement.innerHTML=totalSalesCount+" "+arrowDown}else{salesCountElement.innerText=totalSalesCount.toString()}previousDaySalesCount=totalSalesCount}function fetchAllSalesDataWithRetry(maxRetries,retryDelay){let retries=0;function fetchSalesData(){retries++;salesContainer.innerHTML="";const patientsRef=ref(database,"medicine");return new Promise((resolve,reject)=>{onValue(patientsRef,snapshot=>{const patientsData=snapshot.val();const allSales=[];const salesByDate={};if(patientsData){const patients=Object.values(patientsData);patients.forEach(patient=>{if(patient.hasOwnProperty("sales")){const salesNode=patient.sales;for(const saleKey in salesNode){const saleData=salesNode[saleKey];const saleId=saleKey;const date=new Date(saleData.date);const dateString=date.toISOString().split("T")[0];allSales.push({patientName:patient.name,saleData:saleData,saleId:saleId,date:date,dateString:dateString});if(!salesByDate[dateString]){salesByDate[dateString]=0}salesByDate[dateString]+=saleData.amount}}})}renderSalesTable(allSales,salesByDate);loaderElement.classList.add("hidden");console.log("Sales data fetched successfully!");resolve()},error=>{console.error("Error fetching sales data:",error);if(retries<maxRetries){console.log(`Retrying in ${retryDelay} milliseconds...`);setTimeout(()=>{fetchSalesData().then(resolve)},retryDelay)}else{console.error("Exceeded maximum retries. Unable to fetch sales data.");reject()}})})}fetchSalesData().catch(()=>{console.log("Initial fetch failed. Retrying...");return fetchSalesData()})}fetchAllSalesDataWithRetry(3,1e3);const treatmentPatientsRef=ref(database,"treatment-patients");let admittedPatientsCount=0;let opdClientsCount=0;onValue(treatmentPatientsRef,snapshot=>{snapshot.forEach(childSnapshot=>{const patientStatus=childSnapshot.child("patientStatus").val();if(patientStatus==="Admitted"){admittedPatientsCount++}else if(patientStatus==="OPD Client"){opdClientsCount++}});const admittedPatientsCountElement=document.getElementById("admittedPatientsCount");const opdClientsCountElement=document.getElementById("opdClientsCount");console.log("Admitted Patients Count:",admittedPatientsCount);console.log("OPD Clients Count:",opdClientsCount);if(admittedPatientsCountElement){admittedPatientsCountElement.textContent=admittedPatientsCount}else{console.error("Element with ID 'admittedPatientsCount' not found.")}if(opdClientsCountElement){opdClientsCountElement.textContent=opdClientsCount}else{console.error("Element with ID 'opdClientsCount' not found.")}});function searchByMedicine(){const medicineInput=document.getElementById("medicineInput");const medicineKeyword=medicineInput.value.toLowerCase();function filterPatients(patients,searchTerm){const filteredPatients=patients.filter(patient=>{const patientName=patient.name.toLowerCase();return patientName.includes(searchTerm.toLowerCase())});renderPatients(filteredPatients)}medicineInput.addEventListener("input",()=>{const searchTerm=medicineInput.value.trim();const patientsRef=ref(database,"medicine");onValue(patientsRef,snapshot=>{const patientsData=snapshot.val();const patients=patientsData?Object.values(patientsData):[];filterPatients(patients,searchTerm)})});loaderElement.classList.remove("hidden");salesContainer.innerHTML="";const patientsRef=ref(database,"medicine");onValue(patientsRef,snapshot=>{const patientsData=snapshot.val();const searchResults=[];if(patientsData){const patients=Object.values(patientsData);patients.forEach(patient=>{const medicineMatch=patient.name.toLowerCase().includes(medicineKeyword);if(patient.hasOwnProperty("sales")){const salesNode=patient.sales;for(const saleKey in salesNode){const saleData=salesNode[saleKey];if(medicineKeyword===""||medicineMatch){searchResults.push({patientName:patient.name,saleData:saleData})}}}})}loaderElement.classList.add("hidden");if(searchResults.length>0){renderSalesTable(searchResults)}else{salesContainer.innerHTML='<p class="no-results">Oops... No sales found.</p>'}})}const medicineInput=document.getElementById("medicineInput");medicineInput.addEventListener("input",searchByMedicine);const searchMedicineButton=document.getElementById("searchMedicineButton");searchMedicineButton.addEventListener("click",searchByMedicine);window.addEventListener("load",fetchAllSalesDataWithRetry);const loaderElement=document.getElementById("loader");const patientsRef=ref(database,"medicine");loaderElement.classList.remove("hidden");onValue(patientsRef,snapshot=>{const patientsData=snapshot.val();if(patientsData){patients=Object.values(patientsData);renderPatients(patients)}loaderElement.classList.add("hidden")});const onlineStatusElement=document.getElementById("onlineStatus");const overlayElement=document.getElementById("overlay");function updateOnlineStatus(){if(navigator.onLine){onlineStatusElement.innerHTML='<i class="fa fa-wifi"></i>';onlineStatusElement.classList.remove("offline");onlineStatusElement.classList.add("online");overlayElement.style.display="none"}else{onlineStatusElement.innerHTML='<i class="fa fa-exclamation-triangle"></i>';onlineStatusElement.classList.remove("online");onlineStatusElement.classList.add("offline");overlayElement.style.display="block"}}updateOnlineStatus();window.addEventListener("online",updateOnlineStatus);window.addEventListener("offline",updateOnlineStatus);function getGreeting(){var currentDate=new Date;var currentHour=currentDate.getHours();var greeting;if(currentHour<12){greeting="Good morning"}else if(currentHour<18){greeting="Good afternoon"}else{greeting="Good evening"}return greeting}var greetingDiv=document.getElementById("greeting");var greeting=getGreeting();greetingDiv.textContent=greeting;window.addEventListener("load",function(){const splashScreen=document.getElementById("splashScreen");splashScreen.style.opacity="1";setTimeout(function(){splashScreen.style.transition="opacity 0.5s ease-in-out";splashScreen.style.opacity="0";setTimeout(function(){splashScreen.style.display="none"},500)},1e3);const spinner=(new Spinner).spin();const spinnerElement=document.getElementById("spinner");spinnerElement.appendChild(spinner.el)});