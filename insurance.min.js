import{initializeApp}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-app.js";import{getStorage,ref as storageRef,uploadBytes,getDownloadURL}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-storage.js";import{getDatabase,ref,remove,push,get,update,onValue,child,set}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-database.js";import{getAuth,onAuthStateChanged,sendPasswordResetEmail,signInWithEmailAndPassword,GoogleAuthProvider,signInWithPopup}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-auth.js";const firebaseConfig={apiKey:"AIzaSyCi_hufIZTzsYtdPGQtvtmKmAkkrydmn_A",authDomain:"abbah-83a7b.firebaseapp.com",databaseURL:"https://abbah-83a7b-default-rtdb.firebaseio.com",projectId:"abbah-83a7b",storageBucket:"abbah-83a7b.appspot.com",messagingSenderId:"379729759051",appId:"1:379729759051:web:e75528d61b02d1e4f536ce",measurementId:"G-H41J2WMR6S"};const app=initializeApp(firebaseConfig);const database=getDatabase(app);const auth=getAuth(app);const storage=getStorage(app);let authToken;let tokenExpiryTime;function generateToken(){authToken=Math.random().toString(36).substring(2);const currentTime=new Date;const tokenExpiryTime=new Date(currentTime.getTime()+24*60*60*1e3);localStorage.setItem("authToken",authToken);localStorage.setItem("tokenExpiryTime",tokenExpiryTime.toString())}function retrieveTokenFromLocalStorage(){authToken=localStorage.getItem("authToken");const storedExpiryTime=localStorage.getItem("tokenExpiryTime");if(authToken&&storedExpiryTime){tokenExpiryTime=new Date(storedExpiryTime)}}function isTokenValid(){const currentTime=new Date;return tokenExpiryTime>currentTime}window.addEventListener("load",function(){retrieveTokenFromLocalStorage();if(!isTokenValid()){window.location.href="login.html"}});document.addEventListener("contextmenu",function(event){if(document.getElementById("loginpopup").style.display==="block"){event.preventDefault()}document.addEventListener("keydown",function(event){if(event.keyCode===123){event.preventDefault()}})});const allowedEmails=["biboofficial256@gmail.com"];document.getElementById("loginForm").addEventListener("submit",function(event){event.preventDefault();const submitBtn=document.getElementById("submitBtn");submitBtn.innerHTML='<i class="fas fa-spinner fa-spin"></i> Submitting';const email=document.getElementById("email").value;const password=document.getElementById("password").value;signInWithEmailAndPassword(auth,email,password).then(userCredential=>{if(allowedEmails.includes(email)){document.getElementById("loginoverlay").style.display="none";document.getElementById("loginpopup").style.display="none";generateToken()}else{const errorContainer=document.getElementById("errorContainer");errorContainer.textContent="Access denied. You are not authorized.";errorContainer.style.display="block";signOut(auth).then(()=>{setTimeout(function(){submitBtn.innerHTML="Submit"},2e3)}).catch(error=>{console.error("Error signing out:",error)})}}).catch(error=>{const errorMessage=error.message;const errorContainer=document.getElementById("errorContainer");errorContainer.textContent=errorMessage;errorContainer.style.display="block";setTimeout(function(){submitBtn.innerHTML="Submit"},2e3)})});document.getElementById("forgotPasswordLink").addEventListener("click",function(event){event.preventDefault();const email=document.getElementById("email").value;sendPasswordResetEmail(auth,email).then(()=>{showMessage(" A password reset email has been sent. Please check your inbox.")}).catch(error=>{const errorMessage=error.message;alert("Password reset email failed to send. "+errorMessage)})});function displayMessage(title,message,isSuccess=false){const existingMessages=document.querySelectorAll(".retry-message");existingMessages.forEach(function(message){message.remove()});const messageDiv=document.createElement("div");messageDiv.classList.add("retry-message");if(isSuccess){messageDiv.style.backgroundColor="#4caf50"}const closeButton=document.createElement("button");closeButton.classList.add("close-btn");closeButton.innerHTML='<i class="fa fa-times"></i>';closeButton.addEventListener("click",function(){messageDiv.remove()});const titleElement=document.createElement("h2");titleElement.textContent=title;const messageElement=document.createElement("p");messageElement.textContent=message;messageDiv.appendChild(titleElement);messageDiv.appendChild(messageElement);document.body.appendChild(messageDiv);setTimeout(function(){messageDiv.remove()},1500)}function displayUserInformation(user){const profileName=document.querySelector(".profile_info h2");profileName.textContent=user.displayName;const profileImage=document.querySelector(".profile_pic img");profileImage.src=user.photoURL;const dropdownProfileImage=document.querySelector(".user-profile img");dropdownProfileImage.src=user.photoURL;displayMessage("",`Welcome, ${user.displayName}.`,true)}function handleSignInSuccess(user){displayUserInformation(user)}function handleSignInError(error){console.error("Error signing in:",error);displayMessage("Access Denied. Please sign in with a valid email.")}function signInWithGoogle(){var provider=new GoogleAuthProvider;signInWithPopup(auth,provider).then(function(result){const user=result.user;handleSignInSuccess(user)}).catch(function(error){handleSignInError(error)})}window.addEventListener("load",function(){auth.onAuthStateChanged(function(user){if(user){displayUserInformation(user)}else{signInWithGoogle()}})});function retryCallback(){signInWithGoogle()}displayMessage("Signing in...","Please wait...",false);document.addEventListener("click",function(event){const target=event.target;if(target.tagName==="A"&&target.href.startsWith(window.location.origin)){localStorage.setItem("clickedLink",target.href)}});const logoutButton=document.getElementById("logoutButton");const overlay=document.getElementById("overlay");logoutButton.addEventListener("click",function(event){event.preventDefault();localStorage.setItem("logoutPage",window.location.href);const clickedLink=localStorage.getItem("clickedLink");if(clickedLink){localStorage.setItem("logoutPage",clickedLink)}displayOverlay();setTimeout(()=>{logOut();hideOverlay()},2e3)});function displayOverlay(){const spinner=document.createElement("div");spinner.id="loadingSpinner";overlay.appendChild(spinner);const loggingOutText=document.createElement("div");loggingOutText.id="loggingOutText";loggingOutText.textContent="Logging Out...";overlay.appendChild(loggingOutText);overlay.style.display="flex"}function hideOverlay(){const spinner=document.getElementById("loadingSpinner");const loggingOutText=document.getElementById("loggingOutText");overlay.removeChild(spinner);overlay.removeChild(loggingOutText);overlay.style.display="none"}function logOut(){auth.signOut().then(function(){localStorage.removeItem("authToken");localStorage.removeItem("tokenExpiryTime");localStorage.removeItem("clickedLink");const logoutPage=localStorage.getItem("logoutPage")||"login.html";window.location.href=logoutPage}).catch(function(error){console.error("Error signing out:",error)})}const form=document.querySelector(".popup-form");const submitButton=document.querySelector(".popup-form button");const patientsContainer=document.getElementById("patients");const loader=document.getElementById("loader");let patients=[];let patientCount=1;const patientsRef=ref(database,"patients");get(patientsRef).then(snapshot=>{if(snapshot.exists()){const patientData=snapshot.val();const patientIds=Object.values(patientData).map(patient=>parseInt(patient.patientId));patientCount=Math.max(...patientIds,0)+1}else{patientCount=1}form.addEventListener("submit",function(e){e.preventDefault();const name=document.getElementById("name").value.trim();const dob=document.getElementById("dob").value;const parents=document.getElementById("parents").value;const residence=document.getElementById("residence").value;const patientId=patientCount.toString();const patientData={name:name,dob:dob,parents:parents,residence:residence,patientId:patientId};const newPatientRef=ref(database,`insurance-companies/${name}`);get(newPatientRef).then(snapshot=>{if(snapshot.exists()){alert("Company with the same name already exists.")}else{loader.style.display="block";set(newPatientRef,patientData).then(()=>{form.reset();showMessage("Company details uploaded successfully!");patientCount++;loader.style.display="none"}).catch(error=>{console.error("Error uploading company details:",error);showMessage("Error uploading company details. Please try again.");loader.style.display="none"})}}).catch(error=>{console.error("Error checking if company exists:",error);showMessage("Error checking if company exists. Please try again.");loader.style.display="none"})})}).catch(error=>{console.error("Error retrieving company count:",error);showMessage("Error retrieving company count. Please try again.")});searchButton.addEventListener("click",()=>{const searchTerm=searchInput.value.trim();loaderElement.classList.remove("hidden");patientsContainer.innerHTML="";const patientsRef=ref(database,"patients");onValue(patientsRef,snapshot=>{const patientsData=snapshot.val();const searchResults=[];if(patientsData){const patients=Object.entries(patientsData);if(searchTerm!==""){patients.forEach(([patientId,patient])=>{if(patient.name.toLowerCase().includes(searchTerm.toLowerCase())||patient.patientId.includes(searchTerm)){searchResults.push(patient)}})}else{searchResults.push(...patients.map(([patientId,patient])=>patient))}}loaderElement.classList.add("hidden");if(searchResults.length>0){renderPatients(searchResults)}else{patientsContainer.innerHTML='<p class="no-results">No Patients found.</p>'}})});function filterPatients(patients,searchTerm){const filteredPatients=patients.filter(patient=>{const patientName=patient.name.toLowerCase();return patientName.includes(searchTerm.toLowerCase())});renderPatients(filteredPatients)}searchInput.addEventListener("input",()=>{const searchTerm=searchInput.value.trim();const patientsRef=ref(database,"patients");onValue(patientsRef,snapshot=>{const patientsData=snapshot.val();const patients=patientsData?Object.values(patientsData):[];filterPatients(patients,searchTerm)})});function renderPatients(patients){patientsContainer.innerHTML="";const table=document.createElement("table");table.classList.add("patient-table");const tableHeaderRow=document.createElement("tr");tableHeaderRow.classList.add("table-header");const headers=["Name","Place of Residence","Payment Terms","Sex","Patient ID","Contact","Date of Birth","Age","Actions"];headers.forEach(headerText=>{const tableHeaderCell=document.createElement("th");tableHeaderCell.textContent=headerText;tableHeaderRow.appendChild(tableHeaderCell)});function createHiddenDigitsTableCell(text,visibleDigitsCount){const cell=document.createElement("td");const hiddenDigits="*".repeat(text.length-visibleDigitsCount);const visibleDigits=text.slice(-visibleDigitsCount);cell.textContent=hiddenDigits+visibleDigits;return cell}table.appendChild(tableHeaderRow);patients.forEach(patient=>{if(patient.payment.toLowerCase()==="insurance"){const tableRow=document.createElement("tr");tableRow.classList.add("table-row");const nameCell=createTableCell(patient.name);const residenceCell=createTableCell(patient.residence);const paymentCell=createTableCell(patient.payment);const sexCell=createTableCell(patient.sex);const patientIdCell=createTableCell("PI - "+patient.patientId);const parentsCell=createHiddenDigitsTableCell(patient.parents,3);const dobCell=createTableCell(patient.dob);const dob=new Date(patient.dob);const today=new Date;const age=today.getFullYear()-dob.getFullYear();const ageCell=createTableCell(age.toString());const actionsCell=document.createElement("td");const viewButton=document.createElement("button");viewButton.textContent="View";viewButton.classList.add("view-button");viewButton.addEventListener("click",function(){currentPatientName=patient.name;openPatientHistoryPopup(patient)});actionsCell.appendChild(viewButton);tableRow.appendChild(nameCell);tableRow.appendChild(residenceCell);tableRow.appendChild(paymentCell);tableRow.appendChild(sexCell);tableRow.appendChild(patientIdCell);tableRow.appendChild(parentsCell);tableRow.appendChild(dobCell);tableRow.appendChild(ageCell);tableRow.appendChild(actionsCell);table.appendChild(tableRow)}});patientsContainer.appendChild(table);function createTableCell(text){const cell=document.createElement("td");cell.textContent=text;return cell}}function formatDate(timestamp){const date=new Date(timestamp);const options={year:"numeric",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"};return date.toLocaleString("en-US",options)}function openPatientHistoryPopup(patient){const popupOverlay=document.getElementById("popupOverlay1");const popupClose=document.getElementById("popupClose1");const patientDetails=document.getElementById("patientDetails");const patientHistory=document.getElementById("patientHistory");patientDetails.innerHTML="";patientHistory.innerHTML="";popupOverlay.style.visibility="visible";popupOverlay.style.opacity="1";popupClose.addEventListener("click",function(){popupOverlay.style.visibility="hidden";popupOverlay.style.opacity="0"});const patientDetailsHTML=`
  <div class="patient-details">
    <div class="patient-image-frame">
  <label for="uploadImage" class="upload-label">
    <i class="fa fa-upload"></i>
   Upload Patient's Image 
  </label>
  <input type="file" id="uploadImage" accept="image/*">
</div>
<style>
  .button {
    background-color: #4CAF50;
    border: none;
    color: white;
    padding: 10px;
    text-align: center;
    text-decoration: none;
    font-size: 14px;
    margin: 4px 2px;
    cursor: disabled;
    border-radius: 50px;
  }

  .save-button {
    background-color: #4CAF50;
  }

  .delete-button {
    background-color: #f44336;
  }
</style>

    
<h3>Patient Demographics:</h3>
<table class="patient-demographics-table">
    <tr>
      <td><strong>Name:</strong></td>
      <td>${patient.name}</td>
    </tr>
    <tr>
      <td><strong>Date of Birth:</strong></td>
      <td>${patient.dob}</td>
    </tr>
    <tr>
      <td><strong>Gender:</strong></td>
      <td>${patient.sex}</td>
    </tr>
    <tr>
      <td><strong>Payment Type:</strong></td>
      <td>${patient.payment}</td>
    </tr>
    <tr>
      <td><strong>Residence:</strong></td>
      <td>${patient.residence}</td>
    </tr>
    <tr>
      <td><strong>Contact:</strong></td>
      <td>${patient.parents}</td>
    </tr>
    <tr>
      <td><strong>Patient ID:</strong></td>
      <td>${patient.patientId}</td>
    </tr>
    <tr>
      <td><strong>Current Patient's Status:</strong></td>
      <td><span id="currentStatus"></span></td>
    </tr>
  </table>
    <!-- Add a "Visit Count" element in your HTML -->
    <p style="text-decoration: underline;"><strong>No. of visits:</strong>  <span id="visitCount"></span></p>
    <!-- Add more patient details as needed -->
    <div id="insuranceDetailsContainer" ></div>
    <!-- The container for patient visit details -->
<div id="patientVisitDetails" ></div>


          <button style="background: darkblue; display:none " id="triageButton"  class="button save-button"><i style="margin-right: 5px;" class="fas fa-chart-line"></i>Triage History</button>

          <button id="insuranceButton" class="button save-button">
  <i style="margin-right: 5px;" class="fas fa-pencil-alt"></i>
  Update insurance details
</button>

<button id="insurancehistoryButton" class="button save-button">
  <i style="margin-right: 5px;" class="fas fa-history"></i> <!-- History Icon -->
  Insurance History
</button>


  </div>
  `;patientDetails.innerHTML=patientDetailsHTML;renderCurrentPatientInsuranceDetails(patient.patientId);const insuranceHistoryButton=document.getElementById("insurancehistoryButton");const insuranceHistoryPopup=document.getElementById("insuranceHistoryPopup");const overlay=document.getElementById("historyoverlay");const closePopupButton=document.getElementById("closePopupButton");insuranceHistoryButton.addEventListener("click",()=>{overlay.style.display="block";const currentPatientName=patient.patientId;getInsuranceHistory(currentPatientName).then(insuranceHistory=>{renderInsuranceHistoryTable(insuranceHistory)}).catch(error=>{console.error("Error fetching insurance history:",error)});insuranceHistoryPopup.style.display="block"});closePopupButton.addEventListener("click",()=>{overlay.style.display="none";insuranceHistoryPopup.style.display="none"});function getInsuranceHistory(patientName){const insuranceHistoryRef=ref(database,`patients/${patientName}/insurances`);return get(insuranceHistoryRef).then(snapshot=>{return snapshot.exists()?snapshot.val():null})}function renderInsuranceHistoryTable(insuranceHistory){const tableBody=document.querySelector("#insuranceHistoryTable tbody");tableBody.innerHTML="";if(insuranceHistory){Object.values(insuranceHistory).forEach(insurance=>{const row=document.createElement("tr");row.innerHTML=`
        <td>${insurance.insuranceCompany}</td>
        <td>${insurance.premium}</td>
        <td>${insurance.startDate}</td>
        <td>${insurance.policyNumber}</td>
        <td>${insurance.paymentScheme}</td>
      `;tableBody.appendChild(row)})}else{const emptyRow=document.createElement("tr");emptyRow.innerHTML='<td colspan="5">No insurance history available</td>';tableBody.appendChild(emptyRow)}}const insurancePopup=document.getElementById("insurancePopup");const insuranceCompanySelect=document.getElementById("insuranceCompanySelect");let saveInsuranceButton=document.getElementById("saveInsuranceButton");const patientNameInput=document.getElementById("patientName");function replaceSaveButton(){const saveInsuranceButtonClone=saveInsuranceButton.cloneNode(true);saveInsuranceButton.parentNode.replaceChild(saveInsuranceButtonClone,saveInsuranceButton);saveInsuranceButton=saveInsuranceButtonClone}insuranceButton.addEventListener("click",function(){const currentPatientName=patient.patientId;patientNameInput.value=currentPatientName;renderCurrentPatientInsuranceDetails(currentPatientName);insurancePopup.style.display="block";replaceSaveButton();saveInsuranceButton.addEventListener("click",function(event){event.preventDefault();const insuranceCompany=insuranceCompanySelect.value;const premium=document.getElementById("premium").value;const startDate=document.getElementById("startDate").value;const startTime=(new Date).toLocaleTimeString();const policyNumber=document.getElementById("policyNumber").value;const paymentScheme=document.getElementById("paymentScheme").value;const currentPatientName=patientNameInput.value;const formattedStartDate=new Date(startDate).toDateString();const insurancesRef=ref(database,`patients/${currentPatientName}/insurances`);const insuranceDetails={insuranceCompany:insuranceCompany,premium:premium,startDate:formattedStartDate+" "+startTime,policyNumber:policyNumber,paymentScheme:paymentScheme};push(insurancesRef,insuranceDetails).then(()=>{showMessage("Insurance details saved successfully.");insurancePopup.style.display="none";insuranceForm.reset();renderCurrentPatientInsuranceDetails(currentPatientName)}).catch(error=>{console.error("Error saving insurance details:",error)})})});window.addEventListener("click",function(event){if(event.target===insurancePopup){insurancePopup.style.display="none";patientNameInput.value=""}});const staffRef=ref(database,"insurance-companies");onValue(staffRef,snapshot=>{if(snapshot.exists()){insuranceCompanySelect.innerHTML='<option value="" disabled selected>Select an insurance company</option>';snapshot.forEach(childSnapshot=>{const staffData=childSnapshot.val();const option=document.createElement("option");option.value=staffData.name+"   Contact:"+staffData.parents+"   Location:"+staffData.residence;option.textContent=staffData.name+"   Location:"+staffData.residence;insuranceCompanySelect.appendChild(option)});$(insuranceCompanySelect).select2({maximumSelectionLength:3})}else{console.log("No company data found.")}});closePopupButton.addEventListener("click",()=>{insuranceHistoryPopup.style.display="none"});function getInsuranceDetails(patientName){const insuranceRef=ref(database,`patients/${patientName}/insurances`);return get(insuranceRef).then(snapshot=>{if(snapshot.exists()){const insuranceArray=Object.keys(snapshot.val()).map(key=>({key:key,data:snapshot.val()[key]}));insuranceArray.sort((a,b)=>new Date(b.data.startDate)-new Date(a.data.startDate));return insuranceArray.length>0?insuranceArray[0].data:null}else{return null}})}function formatMoney(number){return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}function renderCurrentPatientInsuranceDetails(currentPatientName){const insuranceDetailsContainer=document.getElementById("insuranceDetailsContainer");insuranceDetailsContainer.innerHTML="";const patientNameInput=document.getElementById("patientName");patientNameInput.value=currentPatientName;getInsuranceDetails(currentPatientName).then(insuranceDetails=>{if(insuranceDetails){const insuranceDetailsElement=document.createElement("div");insuranceDetailsElement.classList.add("insurance-details");const premiumFormatted=formatMoney(insuranceDetails.premium);function calculateExpirationDate(startDate,paymentScheme){const startDateObj=new Date(startDate);let expirationDate;switch(paymentScheme){case"monthly":expirationDate=new Date(startDateObj);expirationDate.setMonth(expirationDate.getMonth()+1);break;case"quarterly":expirationDate=new Date(startDateObj);expirationDate.setMonth(expirationDate.getMonth()+3);break;case"yearly":expirationDate=new Date(startDateObj);expirationDate.setFullYear(expirationDate.getFullYear()+1);break;case"biennial":expirationDate=new Date(startDateObj);expirationDate.setFullYear(expirationDate.getFullYear()+2);break;default:expirationDate=new Date(startDateObj)}return expirationDate}function getInsuranceStatus(expirationDate){const currentDate=new Date;if(currentDate<expirationDate){const daysUntilExpiration=Math.floor((expirationDate-currentDate)/(1e3*60*60*24));if(daysUntilExpiration>30){return'<span style="color: green;">Active</span>'}else{return`<span style="color: orange;">Expiring in ${daysUntilExpiration} days</span>`}}else{return'<span style="color: red;">Expired</span>'}}const expirationDate=calculateExpirationDate(insuranceDetails.startDate,insuranceDetails.paymentScheme);const insuranceStatus=getInsuranceStatus(expirationDate);const insuranceCompany=insuranceDetails.insuranceCompany?insuranceDetails.insuranceCompany:"Please Contact Company";const paymentScheme=insuranceDetails.paymentScheme?insuranceDetails.paymentScheme:"Please Contact Company";insuranceDetailsElement.innerHTML=`
  <h3>Current Insurance Details for Patient with ID:${currentPatientName}</h3>
  <table>
    <tr>
      <td><i class="fas fa-building"></i></td>
      <td><strong>Insurance Company:</strong></td>
      <td>${insuranceCompany}</td>
    </tr>
    <tr>
      <td><i class="far fa-calendar-alt"></i></td>
      <td><strong>Start Date of Subscription:</strong></td>
      <td>${insuranceDetails.startDate}</td>
    </tr>
    <tr>
      <td><i class="fas fa-calendar-check"></i></td>
      <td><strong>Expiration Date:</strong></td>
      <td>${expirationDate.toDateString()}</td>
    </tr>
    <tr>
      <td><i class="fas fa-info-circle"></i></td>
      <td><strong>Status:</strong></td>
      <td>${insuranceStatus}</td>
    </tr>
    <tr>
      <td><i class="fas fa-file-alt"></i></td>
      <td><strong>Policy Number:</strong></td>
      <td>${insuranceDetails.policyNumber}</td>
    </tr>
    <tr>
      <td><i class="fas fa-money-bill"></i></td>
      <td><strong>Payment Scheme:</strong></td>
      <td>${paymentScheme}</td>
    </tr>
    <tr>
      <td><i class="fas fa-dollar-sign"></i></td>
      <td><strong>Premium:</strong></td>
      <td>UGX ${premiumFormatted}</td>
    </tr>
  </table>
`;insuranceDetailsContainer.appendChild(insuranceDetailsElement)}else{const noDetailsElement=document.createElement("p");noDetailsElement.textContent=`No insurance details found for ${currentPatientName}`;noDetailsElement.style.fontStyle="italic";insuranceDetailsContainer.appendChild(noDetailsElement)}}).catch(error=>{console.error(`Error retrieving insurance details for ${currentPatientName}:`,error)})}function formatDate(date){const year=date.getFullYear();const month=String(date.getMonth()+1).padStart(2,"0");const day=String(date.getDate()).padStart(2,"0");const hours=String(date.getHours()).padStart(2,"0");const minutes=String(date.getMinutes()).padStart(2,"0");const seconds=String(date.getSeconds()).padStart(2,"0");return`${year}-${month}-${day} ${hours}:${minutes}:${seconds}`}const patientHistoryElement=document.getElementById("patientHistory");const patientName=patient.patientId;const patientHistoryRef=ref(database,`patients/${patientName}/testsTaken`);function getLatestTestStatus(records){if(records.length===0)return"Unknown";records.sort((a,b)=>b.data.dateTaken-a.data.dateTaken);const latestTestStatus=records[0].data.results?.finalStatus||"Pending...";return latestTestStatus}onValue(patientHistoryRef,snapshot=>{patientHistoryElement.innerHTML="";if(snapshot.exists()){const records=[];let overallMedicineCost=0;let overallTestPrice=0;snapshot.forEach(childSnapshot=>{const recordKey=childSnapshot.key;const record=childSnapshot.val();records.push({key:recordKey,data:record});if(record.results&&record.results.medication){const medicationNodes=record.results.medication;Object.keys(medicationNodes).forEach(medicationKey=>{const medicationData=medicationNodes[medicationKey];overallMedicineCost+=parseFloat(medicationData.totalCost)})}const testPrice=record.price||0;overallTestPrice+=parseFloat(testPrice)});const currentStatusElement=document.getElementById("currentStatus");const currentStatus=getLatestTestStatus(records);currentStatusElement.textContent=currentStatus;records.forEach(recordObj=>{const recordKey=recordObj.key;const record=recordObj.data;const recordElement=createRecordElement(recordKey,record);patientHistoryElement.appendChild(recordElement);const testResultRef=ref(database,`patients/${patientName}/testsTaken/${recordKey}/resultsObtained`);onValue(testResultRef,resultSnapshot=>{const resultsObtainedElement=recordElement.querySelector(".results-obtained-data");if(resultsObtainedElement){if(resultSnapshot.exists()){const resultsObtained=resultSnapshot.val();resultsObtainedElement.textContent="Test Results status: "+(resultsObtained==="Completed Successfully"?"Completed Successfully":"Pending...");resultsObtainedElement.style.color=resultsObtained==="Completed Successfully"?"darkblue":"orange"}else{resultsObtainedElement.textContent="Test Results status: Pending...";resultsObtainedElement.style.color="orange"}}else{console.error("results-obtained-data element not found in recordElement")}})});const testPriceDiv=document.createElement("div");testPriceDiv.textContent="Overall Test Price: UGX "+overallTestPrice.toFixed(2);testPriceDiv.classList.add("test-price");const testTotalSpan=document.getElementById("testtotal");testTotalSpan.textContent="";const testTotalText=document.createElement("span");testTotalText.textContent="Overall Test Total: UGX "+overallTestPrice.toFixed(2);const testPriceIcon=document.createElement("i");testPriceIcon.classList.add("fas","fa-syringe");testTotalSpan.appendChild(testPriceIcon);testTotalSpan.appendChild(testTotalText);const medicineTotalDiv=document.getElementById("medicinetotal");medicineTotalDiv.textContent="";const medicineTotalIcon=document.createElement("i");medicineTotalIcon.classList.add("fas","fa-pills");const medicineTotalText=document.createElement("span");medicineTotalText.textContent="Overall Medicine total: UGX "+overallMedicineCost.toFixed(2);medicineTotalDiv.appendChild(medicineTotalIcon);medicineTotalDiv.appendChild(medicineTotalText)}else{const noRecordsElement=document.createElement("p");noRecordsElement.textContent="No Records Found";noRecordsElement.style.fontStyle="italic";patientHistoryElement.appendChild(noRecordsElement)}});function displayPatientVisitDetails(visitKeys,visitDetails){const patientVisitDetailsDiv=document.getElementById("patientVisitDetails");patientVisitDetailsDiv.innerHTML="";if(visitDetails){const visitKeys=Object.keys(visitDetails);visitKeys.sort((a,b)=>visitDetails[b].timestamp-visitDetails[a].timestamp);const visitCount=visitKeys.length;const visitCountElement=document.getElementById("visitCount");visitCountElement.textContent=visitCount;const latestVisitKey=visitKeys[0];const latestVisitData=visitDetails[latestVisitKey];const visitElement=document.createElement("div");visitElement.innerHTML=`
    <h3>LATEST VISIT TRIAGE:</h3>
<div class="visit-details-container">
  <p><b>Date:</b> ${formatDate(latestVisitData.timestamp)}</p>
  <p><b>Clinician's Name:</b> ${latestVisitData.clinicianName||"N/D"}</p>
  <p><b>Temperature:</b> ${latestVisitData.temperature||"N/D"} &deg;C</p>
  <p><b>BP:</b> ${latestVisitData.bp||"N/D"} (mmHg)</p>
  <p><b>RR:</b> ${latestVisitData.rr||"N/D"}</p>
  <p><b>HR:</b> ${latestVisitData.hr||"N/D"}</p>
  <p><b>SpO2:</b> ${latestVisitData.sp02||"N/D"} (%)</p>
  <p><b>WT:</b> ${latestVisitData.wt||"N/D"} (Kg)</p>
  <p><b>HT:</b> ${latestVisitData.ht||"N/D"} (Cm)</p>
  <p><b>BMI:</b> ${latestVisitData.bmi||"N/D"}</p>
  <p><b>MUAC:</b> ${latestVisitData.muac||"N/D"}</p>
  <p><b>Weight for Age Z score:</b> ${latestVisitData.weightForAgeZScore||"N/D"} (Kg)</p>
  <p><b>Disability:</b> ${latestVisitData.disability||"N/D"}</p>
  <p><b>Known Chronic Illness:</b> ${latestVisitData.chronicIllness||"N/D"}</p>
  <p><b>Any Drug Abuse:</b> ${latestVisitData.drugAbuse||"N/D"}</p>
  <p><b>Allergies:</b> ${latestVisitData.allergies&&latestVisitData.allergies.length>0?latestVisitData.allergies.join(", "):"N/D"}
  </p>
</div>
<hr>

    `;patientVisitDetailsDiv.appendChild(visitElement)}else{patientVisitDetailsDiv.textContent="No visit details found.";patientVisitDetailsDiv.style.fontStyle="italic"}}function getPatientVisitDetails(patientName){const visitsRef=ref(database,`patients/${patientName}/visits`);onValue(visitsRef,snapshot=>{const visitDetails=snapshot.val();if(visitDetails){const visitKeys=Object.keys(visitDetails);visitKeys.sort((a,b)=>visitDetails[b].timestamp-visitDetails[a].timestamp);displayPatientVisitDetails(visitKeys,visitDetails);createVisitTrendChart(visitKeys,visitDetails)}else{displayPatientVisitDetails(null);createVisitTrendChart([],{})}})}getPatientVisitDetails(patientName);let isPopupOpen=false;function closePopup(){visitPopupOverlay.style.display="none"}const cancelVisitBtn=document.getElementById("cancelVisitBtn");cancelVisitBtn.addEventListener("click",closePopup);function formatDate(timestamp){const date=new Date(timestamp);const options={year:"numeric",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"};return date.toLocaleString("en-US",options)}let visitTrendChart;function destroyChart(){if(window.visitTrendChart&&window.visitTrendChart.destroy){window.visitTrendChart.destroy()}}function createVisitTrendChart(visitKeys,visitDetails){const visitTrendCanvas=document.getElementById("visitTrendChart");const ctx=visitTrendCanvas.getContext("2d");const vitalSignsData=visitKeys.map(visitKey=>{const visitData=visitDetails[visitKey];return{date:formatDate(visitData.timestamp),temperature:visitData.temperature,bp:visitData.bp,rr:visitData.rr,hr:visitData.hr,sp02:visitData.sp02,wt:visitData.wt,ht:visitData.ht,bmi:visitData.bmi,muac:visitData.muac}});const dates=vitalSignsData.map(data=>data.date);const temperatures=vitalSignsData.map(data=>data.temperature);const bloodPressures=vitalSignsData.map(data=>data.bp);const respiratoryRates=vitalSignsData.map(data=>data.rr);const heartRates=vitalSignsData.map(data=>data.hr);const spO2Values=vitalSignsData.map(data=>data.sp02);destroyChart();window.visitTrendChart=new Chart(ctx,{type:"line",data:{labels:dates,datasets:[{label:"Temperature (&deg;C)",data:temperatures,borderColor:"red",fill:false},{label:"Respiratory Rate",data:respiratoryRates,borderColor:"green",fill:false},{label:"Heart Rate",data:heartRates,borderColor:"purple",fill:false},{label:"SpO2 (%)",data:spO2Values,borderColor:"orange",fill:false}]},options:{responsive:true,scales:{x:{display:true,title:{display:true,text:"Date"}},y:{display:true,title:{display:true,text:"Value"}}}}})}function displayVisitsPopup(patientName){const visitsRef=ref(database,`patients/${patientName}/visits`);const tableBody=document.getElementById("tableBody");const visitTrendCanvas=document.getElementById("visitTrendChart");tableBody.innerHTML="";visitTrendCanvas.getContext("2d").clearRect(0,0,visitTrendCanvas.width,visitTrendCanvas.height);onValue(visitsRef,snapshot=>{const visitDetails=snapshot.val();if(visitDetails){const visitKeys=Object.keys(visitDetails);visitKeys.sort((a,b)=>visitDetails[b].timestamp-visitDetails[a].timestamp);visitKeys.forEach(visitKey=>{const visitData=visitDetails[visitKey];const row=document.createElement("tr");row.innerHTML=`
          <td>${formatDate(visitData.timestamp)}</td>
          <td>${visitData.clinicianName}</td>
          <td>${visitData.temperature} &deg;C</td>
          <td>${visitData.bp}</td>
          <td>${visitData.rr}</td>
          <td>${visitData.hr}</td>
          <td>${visitData.sp02}</td>
          <td>${visitData.wt}</td>
          <td>${visitData.ht}</td>
          <td>${visitData.bmi}</td>
          <td>${visitData.muac}</td>
          <td>${visitData.weightForAgeZScore}</td>
          <td>${visitData.disability}</td>
          <td>${visitData.chronicIllness}</td>
          <td>${visitData.drugAbuse}</td>
          <td>${visitData.allergies.join(", ")}</td>
        `;tableBody.appendChild(row)});createVisitTrendChart(visitKeys,visitDetails)}else{const noVisitsRow=document.createElement("tr");noVisitsRow.innerHTML='<td colspan="17">No visit details found.</td>';tableBody.appendChild(noVisitsRow)}});const popupOverlay=document.getElementById("popup-overlay4");popupOverlay.style.display="block"}function formatDate(timestamp){const date=new Date(timestamp);const options={year:"numeric",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"};return date.toLocaleString("en-US",options)}let currentPatientName=patient.name;const closePopupBtn4=document.getElementById("closePopupBtn4");closePopupBtn4.addEventListener("click",()=>{const popupOverlay=document.getElementById("popup-overlay4");popupOverlay.style.display="none"});const saveVisitBtn=document.getElementById("saveVisitBtn");saveVisitBtn.addEventListener("click",()=>{const clinicianName=clinicianNameSelect.value;const temperature=document.getElementById("temperature").value;const bp=document.getElementById("bp").value;const rr=document.getElementById("rr").value;const hr=document.getElementById("hr").value;const sp02=document.getElementById("sp02").value;const wt=document.getElementById("wt").value;const ht=document.getElementById("ht").value;const bmi=document.getElementById("bmi").value;const muac=document.getElementById("muac").value;const weightForAgeZScore=document.getElementById("weightForAgeZScore").value;const disability=document.getElementById("disability").value;const chronicIllness=document.getElementById("chronicIllness").value;const drugAbuse=document.getElementById("drugAbuse").value;const selectedAllergies=[...testsTakenSelect.selectedOptions].map(option=>option.value);const visit={clinicianName:clinicianName,temperature:temperature,bp:bp,rr:rr,hr:hr,sp02:sp02,wt:wt,ht:ht,bmi:bmi,muac:muac,weightForAgeZScore:weightForAgeZScore,disability:disability,chronicIllness:chronicIllness,drugAbuse:drugAbuse,allergies:selectedAllergies,timestamp:Date.now()};const visitsRef=ref(database,`patients/${currentPatientName}/visits`);push(visitsRef,visit).then(()=>{showMessage("Visit saved successfully!");clinicianNameSelect.value="";document.getElementById("temperature").value="";document.getElementById("bp").value="";document.getElementById("rr").value="";document.getElementById("hr").value="";document.getElementById("sp02").value="";document.getElementById("wt").value="";document.getElementById("ht").value="";document.getElementById("bmi").value="";document.getElementById("muac").value="";document.getElementById("weightForAgeZScore").value="";document.getElementById("disability").value="";document.getElementById("chronicIllness").value="";document.getElementById("drugAbuse").value="";$("#allergies").val(null).trigger("change")}).catch(error=>{console.error("Error saving visit:",error)});closePopup()});const triageButton=document.getElementById("triageButton");triageButton.addEventListener("click",()=>{displayVisitsPopup(patientName)});function createRecordElement(recordKey,record){const recordElement=document.createElement("div");recordElement.classList.add("record");const recordKeyElement=document.createElement("h4");recordKeyElement.textContent="Record Key: "+recordKey;recordElement.appendChild(recordKeyElement);const table=document.createElement("table");table.classList.add("record-table");const recordKeyRow=createTableRow("Record Key:",recordKey);const dateTakenRow=createTableRow("Date Taken:",new Date(parseInt(record.dateTaken)).toLocaleString());const testsTakenRow=createTableRow("Tests Taken:",record.testsTaken);const priceRow=createTableRow("Price:",record.price?`UGX ${record.price.toFixed(2)}`:"Please Contact Company");const paymentStatusRow=createTableRow("Test Payment:",record.paymentstatus||"Not Paid");if(record.paymentstatus==="payment received"){paymentStatusRow.classList.add("payment-received")}else{paymentStatusRow.classList.add("not-paid")}const medicineStatusRow=createTableRow("Medicine Payment:",record.medicinestatus||"Not Paid");if(record.medicinestatus==="payment received"){medicineStatusRow.classList.add("payment-received")}else{medicineStatusRow.classList.add("not-paid")}table.appendChild(recordKeyRow);table.appendChild(dateTakenRow);table.appendChild(testsTakenRow);table.appendChild(priceRow);table.appendChild(paymentStatusRow);table.appendChild(medicineStatusRow);recordElement.appendChild(table);const paymentStatusElement=document.createElement("p");paymentStatusElement.textContent="Test Payment: "+(record.paymentstatus||"Not Paid");paymentStatusElement.classList.add("payment-status");if(record.paymentstatus!=="payment received"){paymentStatusElement.style.color="red";const approveButton=document.createElement("button");approveButton.classList.add("approve-button");const checkIcon=document.createElement("i");checkIcon.classList.add("fas","fa-check-circle");approveButton.innerHTML="";approveButton.appendChild(checkIcon);approveButton.innerHTML+=" Approve Test payment";approveButton.addEventListener("click",()=>{const paymentStatusRef=ref(database,`patients/${patientName}/testsTaken/${recordKey}/paymentstatus`);set(paymentStatusRef,"payment received").then(()=>{showMessage("Payment status updated successfully!");console.log("Payment status updated successfully.")}).catch(error=>{console.error("Error updating payment status:",error);showMessage("Error updating payment status:",error)})});recordElement.appendChild(approveButton)}else{paymentStatusElement.style.color="blue"}const medicationTakenElement=document.createElement("div");medicationTakenElement.classList.add("medication-taken");const medicationTable=document.createElement("table");medicationTable.classList.add("medication-table");const tableHeaderRow=document.createElement("tr");const headers=["Medication","Prescription","Mgs","Total Cost"];headers.forEach(headerText=>{const tableHeaderCell=document.createElement("th");tableHeaderCell.textContent=headerText;tableHeaderRow.appendChild(tableHeaderCell)});let totalCost=0;if(record.results&&record.results.medication){const medicationNodes=record.results.medication;Object.keys(medicationNodes).forEach(medicationKey=>{const medicationData=medicationNodes[medicationKey];const tableRow=document.createElement("tr");const medicationCell=document.createElement("td");medicationCell.textContent=medicationData.medication;const prescriptionCell=document.createElement("td");prescriptionCell.textContent=medicationData.prescription;const gramsCell=document.createElement("td");gramsCell.textContent=medicationData.grams;const totalCostCell=document.createElement("td");totalCostCell.textContent=medicationData.totalCost;tableRow.appendChild(medicationCell);tableRow.appendChild(prescriptionCell);tableRow.appendChild(gramsCell);tableRow.appendChild(totalCostCell);medicationTable.appendChild(tableRow);totalCost+=parseFloat(medicationData.totalCost)})}recordElement.appendChild(medicationTakenElement);const totalElement=document.createElement("p");totalElement.textContent="Medicine Total Cost: UGX   "+totalCost.toFixed(2);totalElement.classList.add("total-element");medicationTakenElement.appendChild(totalElement);const medicineStatusElement=document.createElement("p");medicineStatusElement.textContent="Medicine Payment: "+(record.medicinestatus||"Not Paid");medicineStatusElement.classList.add("payment-status");if(record.medicinestatus!=="payment received"){medicineStatusElement.style.color="red";const approve2Button=document.createElement("button");approve2Button.classList.add("approve-button");const checkIcon=document.createElement("i");checkIcon.classList.add("fas","fa-check-circle");approve2Button.innerHTML="";approve2Button.appendChild(checkIcon);approve2Button.innerHTML+=" Approve medicine payment";approve2Button.addEventListener("click",()=>{const medicineStatusRef=ref(database,`patients/${patientName}/testsTaken/${recordKey}/medicinestatus`);set(medicineStatusRef,"payment received").then(()=>{showMessage("Payment status updated successfully!");console.log("Payment status updated successfully.")}).catch(error=>{console.error("Error updating payment status:",error);showMessage("Error updating payment status:",error)})});recordElement.appendChild(approve2Button)}else{medicineStatusElement.style.color="blue"}return recordElement}const testSearchInput=document.getElementById("testSearch");testSearchInput.addEventListener("input",()=>{const searchTerm=testSearchInput.value.toLowerCase();const testRecordElements=document.querySelectorAll(".record");testRecordElements.forEach(recordElement=>{const recordKeyElement=recordElement.querySelector("h4");if(recordKeyElement){const recordKey=recordKeyElement.textContent.toLowerCase();if(recordKey.includes(searchTerm)){recordElement.style.display="block"}else{recordElement.style.display="none"}}})});function createTableRow(label,value){const row=document.createElement("tr");const labelCell=document.createElement("td");labelCell.textContent=label;const valueCell=document.createElement("td");valueCell.textContent=value;row.appendChild(labelCell);row.appendChild(valueCell);return row}}const listPopupOverlay=document.getElementById("listPopupOverlay");let listMessage=null;function showNotification(message){if(Notification.permission==="granted"){const notification=new Notification("New waiting Request",{body:message});setTimeout(notification.close.bind(notification),9e3)}else if(Notification.permission!=="denied"){Notification.requestPermission().then(permission=>{if(permission==="granted"){showNotification(message)}})}}function retrieveAndDisplaylist(){const waitinglist=document.getElementById("waitinglist");waitinglist.innerHTML="";const chatRef=ref(database,"waiting-list");onValue(chatRef,snapshot=>{try{if(snapshot.exists()){let listCount=0;const notseen=document.getElementById("notseen");const seen=document.getElementById("seen");notseen.addEventListener("click",()=>{applyFilter("Not Yet Done")});seen.addEventListener("click",()=>{applyFilter("Completed")});function applyFilter(filter){const waitinglist=document.getElementById("waitinglist");const waitinglistItems=waitinglist.querySelectorAll("li");waitinglistItems.forEach(item=>{const status=item.getAttribute("data-status");if(status===filter||filter==="All"){item.style.display="block"}else{item.style.display="none"}});const filterButtons=document.querySelectorAll(".filter-button");filterButtons.forEach(button=>{if(button.textContent===filter){button.classList.add("active")}else{button.classList.remove("active")}})}const messages=[];snapshot.forEach(childSnapshot=>{const messageId=childSnapshot.key;const patient=childSnapshot.val().name;const status=childSnapshot.val().status||"Not Yet Done";const timestamp=childSnapshot.val().date||"";const listItem=document.createElement("li");listItem.id=messageId;listItem.setAttribute("data-status",status);const messageContent=document.createElement("span");messageContent.textContent=patient;listItem.appendChild(messageContent);const messageStatus=document.createElement("span");messageStatus.textContent=status+(timestamp?" - "+formatDate(timestamp):"");messageStatus.classList.add("time-status");listItem.appendChild(messageStatus);const markAsDoneBtn2=document.createElement("button");markAsDoneBtn2.textContent="Seen";markAsDoneBtn2.classList.add("button-done");markAsDoneBtn2.addEventListener("click",()=>{markpatientAsDone(messageId)});messages.unshift(listItem);if(status==="Not Yet Done"){listCount++;messageStatus.style.color="red";listMessage=name}else if(status==="Completed"){markAsDoneBtn2.style.display="none"}});messages.forEach(message=>{waitinglist.appendChild(message)});if(listMessage){showNotification(listMessage)}const listCountSpan=document.getElementById("listCount");listCountSpan.textContent=listCount}else{const listItem=document.createElement("li");listItem.textContent="No lab requests found.";waitinglist.appendChild(listItem)}}catch(error){console.error("Error retrieving lab requests:",error);showMessage("Error retrieving lab requests:",error)}})}const list=document.getElementById("list");let listListener;list.addEventListener("click",()=>{retrieveAndDisplaylist();openlistPopup()});document.addEventListener("DOMContentLoaded",()=>{retrieveAndDisplaylist()});function markpatientAsDone(messageId){const listRef=ref(database,`waiting-list/${messageId}`);update(listRef,{status:"Completed",timestamp:Date.now()}).then(()=>{console.log("Message marked as done successfully!");retrieveAndDisplaylist()}).catch(error=>{console.error("Error marking message as done:",error);showMessage("Error marking message as done:",error)})}function openlistPopup(){const listPopupOverlay=document.getElementById("listPopupOverlay");listPopupOverlay.style.display="block"}function closelistPopup(){const listPopupOverlay=document.getElementById("listPopupOverlay");listPopupOverlay.style.display="none"}const listPopupClose=document.getElementById("listPopupClose");listPopupClose.addEventListener("click",closelistPopup);window.addEventListener("click",event=>{const listPopupOverlay=document.getElementById("listPopupOverlay");if(event.target===listPopupOverlay){closelistPopup()}});const labRequestsPopupOverlay=document.getElementById("listPopupOverlay");let latestLabRequestMessage=null;function retrieveAndDisplayLabRequests(){const labRequestsList=document.getElementById("labRequestsList");labRequestsList.innerHTML="";const chatRef=ref(database,"chat");onValue(chatRef,snapshot=>{try{if(snapshot.exists()){let notDoneCount=0;const messages=[];const notDoneBtn=document.getElementById("notDoneBtn");const completedBtn=document.getElementById("completedBtn");notDoneBtn.addEventListener("click",()=>{applyFilter("Not Yet Done")});completedBtn.addEventListener("click",()=>{applyFilter("Completed")});function applyFilter(filter){const labRequestsList=document.getElementById("labRequestsList");const labRequestItems=labRequestsList.querySelectorAll("li");labRequestItems.forEach(item=>{const status=item.getAttribute("data-status");if(status===filter||filter==="All"){item.style.display="block"}else{item.style.display="none"}});const filterButtons=document.querySelectorAll(".filter-button");filterButtons.forEach(button=>{if(button.textContent===filter){button.classList.add("active")}else{button.classList.remove("active")}})}snapshot.forEach(childSnapshot=>{const messageId=childSnapshot.key;const labRequest=childSnapshot.val().message;const status=childSnapshot.val().status||"Not Yet Done";const timestamp=childSnapshot.val().timestamp||"";const listItem=document.createElement("li");listItem.id=messageId;listItem.setAttribute("data-status",status);const messageContent=document.createElement("span");messageContent.textContent=labRequest;listItem.appendChild(messageContent);const messageStatus=document.createElement("span");messageStatus.textContent=status+(timestamp?" - "+formatDate(timestamp):"");messageStatus.classList.add("time-status");listItem.appendChild(messageStatus);const markAsDoneBtn=document.createElement("button");markAsDoneBtn.textContent="Clear";markAsDoneBtn.classList.add("button-done");markAsDoneBtn.addEventListener("click",()=>{markMessageAsDone(messageId)});listItem.appendChild(markAsDoneBtn);messages.unshift(listItem);if(status==="Not Yet Done"){notDoneCount++;messageStatus.style.color="red";latestLabRequestMessage=labRequest}else if(status==="Completed"){markAsDoneBtn.style.display="none"}});messages.forEach(message=>{labRequestsList.appendChild(message)});if(latestLabRequestMessage){showNotification(latestLabRequestMessage)}const notDoneCountSpan=document.getElementById("notDoneCount");notDoneCountSpan.textContent=notDoneCount}else{const noLabRequestsItem=document.createElement("li");noLabRequestsItem.textContent="No lab requests found.";labRequestsList.appendChild(noLabRequestsItem)}}catch(error){console.error("Error retrieving lab requests:",error);showMessage("Error retrieving lab requests:",error)}})}const envelopeIcon=document.getElementById("envelope-icon");let labRequestsListener;envelopeIcon.addEventListener("click",()=>{retrieveAndDisplayLabRequests();openLabRequestsPopup()});document.addEventListener("DOMContentLoaded",()=>{retrieveAndDisplayLabRequests()});function markMessageAsDone(messageId){const messageRef=ref(database,`chat/${messageId}`);update(messageRef,{status:"Completed",timestamp:Date.now()}).then(()=>{console.log("Message marked as done successfully!");retrieveAndDisplayLabRequests()}).catch(error=>{console.error("Error marking message as done:",error);showMessage("Error marking message as done:",error)})}function openLabRequestsPopup(){const labRequestsPopupOverlay=document.getElementById("labRequestsPopupOverlay");labRequestsPopupOverlay.style.display="block"}function closeLabRequestsPopup(){const labRequestsPopupOverlay=document.getElementById("labRequestsPopupOverlay");labRequestsPopupOverlay.style.display="none"}const labRequestsPopupClose=document.getElementById("labRequestsPopupClose");labRequestsPopupClose.addEventListener("click",closeLabRequestsPopup);window.addEventListener("click",event=>{const labRequestsPopupOverlay=document.getElementById("labRequestsPopupOverlay");if(event.target===labRequestsPopupOverlay){closeLabRequestsPopup()}});const loaderElement=document.getElementById("loader");loaderElement.classList.remove("hidden");onValue(patientsRef,snapshot=>{const patientsData=snapshot.val();if(patientsData){patients=Object.values(patientsData);renderPatients(patients)}loaderElement.classList.add("hidden")});const calculateTotal=()=>{const medicationCost=parseFloat(medicationInput.selectedOptions[0].dataset.costPerGram);const gramsValue=parseFloat(gramsInput.value);const total=medicationCost*gramsValue;totalElement.textContent="Total: $"+total.toFixed(2)};const createMedicationInput=()=>{const medicationInputContainer=document.createElement("div");medicationInputContainer.classList.add("medication-input-container");const medicationLabel=document.createElement("label");medicationLabel.textContent="Medication:";medicationLabel.setAttribute("for","medicationInput");const medicationInput=document.createElement("select");medicationInput.required=true;medicationInput.classList.add("select2");const medicineRef=ref(database,"medicine");onValue(medicineRef,snapshot=>{const medicineData=snapshot.val();if(medicineData){Object.values(medicineData).forEach(medicine=>{const option=document.createElement("option");option.value=medicine.name;option.text=medicine.name;option.dataset.costPerGram=medicine.pricepergram;medicationInput.appendChild(option)})}});const prescriptionLabel=document.createElement("label");prescriptionLabel.textContent="Prescription:";prescriptionLabel.setAttribute("for","prescriptionInput");const prescriptionInput=document.createElement("select");prescriptionInput.required=true;const prescriptionsRef=ref(database,"prescriptions");onValue(prescriptionsRef,snapshot=>{const prescriptionsData=snapshot.val();prescriptionInput.innerHTML="";if(prescriptionsData){const prescriptions=Object.values(prescriptionsData);prescriptions.forEach(prescription=>{const option=document.createElement("option");option.value=prescription.prescription;option.text=prescription.prescription;prescriptionInput.appendChild(option)})}});const gramsLabel=document.createElement("label");gramsLabel.textContent="Milligrams:";gramsLabel.setAttribute("for","gramsInput");const gramsInput=document.createElement("input");gramsInput.type="number";gramsInput.step="any";gramsInput.placeholder="Milligrams";const costPerGramLabel=document.createElement("label");costPerGramLabel.textContent="Cost of Milligrams:";costPerGramLabel.setAttribute("for","costPerGramOutput");const costPerGramOutput=document.createElement("output");costPerGramOutput.classList.add("cost-per-gram-output");costPerGramOutput.value="";const deleteButton=document.createElement("button");deleteButton.classList.add("delete-medication-button");deleteButton.innerHTML='<i class="fa fa-trash"></i>';deleteButton.addEventListener("click",()=>{medicationInputContainer.remove()});gramsInput.addEventListener("input",()=>{const gramsValue=parseFloat(gramsInput.value);const selectedOption=medicationInput.options[medicationInput.selectedIndex];const costPerGram=parseFloat(selectedOption.dataset.costPerGram);const totalCost=gramsValue*costPerGram;costPerGramOutput.value=totalCost.toFixed(2)});medicationInputContainer.appendChild(medicationLabel);medicationInputContainer.appendChild(medicationInput);medicationInputContainer.appendChild(prescriptionLabel);medicationInputContainer.appendChild(prescriptionInput);medicationInputContainer.appendChild(gramsLabel);medicationInputContainer.appendChild(gramsInput);medicationInputContainer.appendChild(costPerGramLabel);medicationInputContainer.appendChild(costPerGramOutput);medicationInputContainer.appendChild(deleteButton);const submitMedicationButton=document.createElement("button");submitMedicationButton.type="button";submitMedicationButton.textContent="Submit Medication";submitMedicationButton.classList.add("submit-medication-button");submitMedicationButton.addEventListener("click",()=>{const medicationRecord={medication:medicationInput.value,prescription:prescriptionInput.value,grams:parseFloat(gramsInput.value),totalCost:parseFloat(costPerGramOutput.value.replace(/,/g,""))};const recordKeyInput=document.querySelector('input[name="recordKey"]');const recordKey=recordKeyInput.value;const patientRef=ref(database,`patients/${currentPatientName}/testsTaken/${recordKey}/results/medication`);const newRecordRef=push(patientRef);set(newRecordRef,medicationRecord).then(()=>{showMessage("Medication submitted successfully!")}).catch(error=>{console.error("Error submitting medication:",error);showMessage("Error submitting medication. Please try again.")})});medicationInputContainer.appendChild(submitMedicationButton);return medicationInputContainer};const addMedicationButton=document.getElementById("addMedicationButton");addMedicationButton.addEventListener("click",()=>{const medicationInput=createMedicationInput();const medicationContainer=document.getElementById("medication");medicationContainer.appendChild(medicationInput);$(medicationInput).find("select").select2({dropdownParent:medicationInput})});const medicationInputs=document.querySelectorAll(".medication-input-container");medicationInputs.forEach(medicationInput=>{const gramsInput=medicationInput.querySelector('input[type="number"]')});const addRecordForm=document.getElementById("addRecordForm");let currentPatientName="";function showMessage(message){const messageElement=document.getElementById("message");messageElement.textContent=message;messageElement.style.display="block";setTimeout(()=>{messageElement.style.display="none"},4e3)}showMessage("");addRecordForm.addEventListener("submit",function(e){e.preventDefault();const patientName=currentPatientName;const medicationInputs=document.querySelectorAll(".medication-input-container");const testsTakenSelect=document.getElementById("testsTaken");const selectedTestOption=testsTakenSelect.options[testsTakenSelect.selectedIndex];const testsTaken=selectedTestOption?selectedTestOption.value:"";const resultsObtained=document.getElementById("resultsObtained").value;const additionalNotes=document.getElementById("additionalNotes").value;const dateTaken=Date.now();const recordData={testsTaken:testsTaken,resultsObtained:resultsObtained,additionalNotes:additionalNotes,dateTaken:dateTaken};const patientRef=ref(database,`patients/${patientName}`);const testsTakenRef=child(patientRef,"testsTaken");get(testsTakenRef).then(snapshot=>{const testsData=snapshot.val();const testCount=testsData?Object.keys(testsData).length:0;const newTestNumber=testCount+1;const newRecordRef=child(testsTakenRef,"test"+newTestNumber);set(newRecordRef,recordData).then(()=>{medicationInputs.forEach(medicationInput=>{const medicationSelect=medicationInput.querySelector('select[name="medication"]');const prescriptionSelect=medicationInput.querySelector('select[name="prescription"]');const gramsInput=medicationInput.querySelector('input[name="grams"]');const costPerGramOutput=medicationInput.querySelector(".cost-per-gram-output");if(medicationSelect&&prescriptionSelect&&gramsInput&&costPerGramOutput){const medicationRecord={medication:medicationSelect.value,prescription:prescriptionSelect.value,grams:parseFloat(gramsInput.value),totalCost:parseFloat(costPerGramOutput.value.replace(/,/g,""))};const medicationRef=child(newRecordRef,"medication");push(medicationRef,medicationRecord)}}).catch(error=>{console.error("Error saving new record:",error)})}).catch(error=>{console.error("Error retrieving existing records:",error)});const medicationContainer=document.getElementById("medicationInputsContainer");medicationContainer.innerHTML="";addRecordForm.reset();showMessage("Record added successfully!")}).catch(error=>{console.error("Error adding record:",error);showMessage("Error adding record. Please try again.")})});const submitMedicationBtn=document.getElementById("submitMedicationButton");submitMedicationBtn.addEventListener("click",event=>{event.preventDefault();const medicationRecord={resultsObtained:document.getElementById("resultsObtained").value,additionalNotes:document.getElementById("additionalNotes").value};const recordKeyInput=document.querySelector('input[name="recordKey"]');const recordKey=recordKeyInput.value;const patientRef=ref(database,`patients/${currentPatientName}/testsTaken/${recordKey}/results`);set(patientRef,medicationRecord).then(()=>{showMessage("Medication submitted successfully!")}).catch(error=>{console.error("Error submitting medication:",error);showMessage("Error submitting medication. Please try again.")});const submitMedicationButtons=document.querySelectorAll(".submit-medication-button");submitMedicationButtons.forEach(button=>{button.click()})});const onlineStatusElement=document.getElementById("onlineStatus");const overlayElement=document.getElementById("overlay");function updateOnlineStatus(){if(navigator.onLine){onlineStatusElement.innerHTML='<i class="fa fa-wifi"></i>';onlineStatusElement.classList.remove("offline");onlineStatusElement.classList.add("online");overlayElement.style.display="none"}else{onlineStatusElement.innerHTML='<i class="fa fa-exclamation-triangle"></i>';onlineStatusElement.classList.remove("online");onlineStatusElement.classList.add("offline");overlayElement.style.display="block"}}updateOnlineStatus();window.addEventListener("online",updateOnlineStatus);window.addEventListener("offline",updateOnlineStatus);window.addEventListener("load",function(){const splashScreen=document.getElementById("splashScreen");splashScreen.style.opacity="0";setTimeout(function(){splashScreen.style.display="none"},500)});