import{initializeApp}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-app.js";import{getStorage,ref as storageRef,uploadBytes,getDownloadURL}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-storage.js";import{getDatabase,ref,remove,push,get,update,onValue,child,set}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-database.js";import{getAuth,onAuthStateChanged,sendPasswordResetEmail,signInWithEmailAndPassword,GoogleAuthProvider,signInWithPopup}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-auth.js";const firebaseConfig={apiKey:"AIzaSyCi_hufIZTzsYtdPGQtvtmKmAkkrydmn_A",authDomain:"abbah-83a7b.firebaseapp.com",databaseURL:"https://abbah-83a7b-default-rtdb.firebaseio.com",projectId:"abbah-83a7b",storageBucket:"abbah-83a7b.appspot.com",messagingSenderId:"379729759051",appId:"1:379729759051:web:e75528d61b02d1e4f536ce",measurementId:"G-H41J2WMR6S"};const app=initializeApp(firebaseConfig);const database=getDatabase(app);const auth=getAuth(app);const storage=getStorage(app);const fetchPatientCountBtn=document.getElementById("fetchPatientCountBtn");function showMessage(message){const messageElement=document.getElementById("message");messageElement.textContent=message;messageElement.style.display="block";setTimeout(()=>{messageElement.style.display="none"},4e3)}showMessage("");function fetchPatientCount(){const patientsRef=ref(database,"patients");get(patientsRef).then(snapshot=>{if(snapshot.exists()){const patientData=snapshot.val();const patientIds=Object.keys(patientData);const numericPatientIds=patientIds.map(patientId=>parseInt(patientId));patientCount=Math.max(...numericPatientIds,0)+1;showMessage(`Next Patient Count: ${patientCount}`)}else{patientCount=1;showMessage(`No patients found. Starting from Patient ID: ${patientCount}`)}}).catch(error=>{console.error("Error retrieving patient count:",error);showMessage("Error retrieving patient count. Please try again.")})}fetchPatientCountBtn.addEventListener("click",fetchPatientCount);var uploadBtn=document.getElementById("uploadBtn");var popupOverlay=document.getElementById("popupOverlay");var popupClose=document.getElementById("popupClose");uploadBtn.addEventListener("click",function(){popupOverlay.style.visibility="visible";popupOverlay.style.opacity="1";fetchPatientCount()});popupClose.addEventListener("click",function(){popupOverlay.style.visibility="hidden";popupOverlay.style.opacity="0"});let authToken;let tokenExpiryTime;function generateToken(){authToken=Math.random().toString(36).substring(2);const currentTime=new Date;const tokenExpiryTime=new Date(currentTime.getTime()+24*60*60*1e3);localStorage.setItem("authToken",authToken);localStorage.setItem("tokenExpiryTime",tokenExpiryTime.toString())}function retrieveTokenFromLocalStorage(){authToken=localStorage.getItem("authToken");const storedExpiryTime=localStorage.getItem("tokenExpiryTime");if(authToken&&storedExpiryTime){tokenExpiryTime=new Date(storedExpiryTime)}}function isTokenValid(){const currentTime=new Date;return tokenExpiryTime>currentTime}window.addEventListener("load",function(){retrieveTokenFromLocalStorage();if(!isTokenValid()){window.location.href="login.html"}});document.addEventListener("contextmenu",function(event){if(document.getElementById("loginpopup").style.display==="block"){event.preventDefault()}document.addEventListener("keydown",function(event){if(event.keyCode===123){event.preventDefault()}})});const allowedEmails=["biboofficial256@gmail.com"];document.getElementById("loginForm").addEventListener("submit",function(event){event.preventDefault();const submitBtn=document.getElementById("submitBtn");submitBtn.innerHTML='<i class="fas fa-spinner fa-spin"></i> Submitting';const email=document.getElementById("email").value;const password=document.getElementById("password").value;signInWithEmailAndPassword(auth,email,password).then(userCredential=>{if(allowedEmails.includes(email)){document.getElementById("loginoverlay").style.display="none";document.getElementById("loginpopup").style.display="none";generateToken()}else{const errorContainer=document.getElementById("errorContainer");errorContainer.textContent="Access denied. You are not authorized.";errorContainer.style.display="block";signOut(auth).then(()=>{setTimeout(function(){submitBtn.innerHTML="Submit"},2e3)}).catch(error=>{console.error("Error signing out:",error)})}}).catch(error=>{const errorMessage=error.message;const errorContainer=document.getElementById("errorContainer");errorContainer.textContent=errorMessage;errorContainer.style.display="block";setTimeout(function(){submitBtn.innerHTML="Submit"},2e3)})});document.getElementById("forgotPasswordLink").addEventListener("click",function(event){event.preventDefault();const email=document.getElementById("email").value;sendPasswordResetEmail(auth,email).then(()=>{showMessage(" A password reset email has been sent. Please check your inbox.")}).catch(error=>{const errorMessage=error.message;alert("Password reset email failed to send. "+errorMessage)})});function displayMessage(title,message,isSuccess=false){const existingMessages=document.querySelectorAll(".retry-message");existingMessages.forEach(function(message){message.remove()});const messageDiv=document.createElement("div");messageDiv.classList.add("retry-message");if(isSuccess){messageDiv.style.backgroundColor="#4caf50"}const closeButton=document.createElement("button");closeButton.classList.add("close-btn");closeButton.innerHTML='<i class="fa fa-times"></i>';closeButton.addEventListener("click",function(){messageDiv.remove()});const titleElement=document.createElement("h2");titleElement.textContent=title;const messageElement=document.createElement("p");messageElement.textContent=message;messageDiv.appendChild(titleElement);messageDiv.appendChild(messageElement);document.body.appendChild(messageDiv);setTimeout(function(){messageDiv.remove()},1500)}function displayUserInformation(user){const profileName=document.querySelector(".profile_info h2");profileName.textContent=user.displayName;const profileImage=document.querySelector(".profile_pic img");profileImage.src=user.photoURL;const dropdownProfileImage=document.querySelector(".user-profile img");dropdownProfileImage.src=user.photoURL;displayMessage("",`Welcome, ${user.displayName}.`,true)}function handleSignInSuccess(user){displayUserInformation(user)}function handleSignInError(error){console.error("Error signing in:",error);displayMessage("Access Denied. Please sign in with a valid email.")}function signInWithGoogle(){var provider=new GoogleAuthProvider;signInWithPopup(auth,provider).then(function(result){const user=result.user;handleSignInSuccess(user)}).catch(function(error){handleSignInError(error)})}window.addEventListener("load",function(){auth.onAuthStateChanged(function(user){if(user){displayUserInformation(user)}else{signInWithGoogle()}})});function retryCallback(){signInWithGoogle()}displayMessage("","Please wait...",false);document.addEventListener("click",function(event){const target=event.target;if(target.tagName==="A"&&target.href.startsWith(window.location.origin)){localStorage.setItem("clickedLink",target.href)}});const logoutButton=document.getElementById("logoutButton");const overlay=document.getElementById("overlay");logoutButton.addEventListener("click",function(event){event.preventDefault();localStorage.setItem("logoutPage",window.location.href);const clickedLink=localStorage.getItem("clickedLink");if(clickedLink){localStorage.setItem("logoutPage",clickedLink)}displayOverlay();setTimeout(()=>{logOut();hideOverlay()},2e3)});function displayOverlay(){const spinner=document.createElement("div");spinner.id="loadingSpinner";overlay.appendChild(spinner);const loggingOutText=document.createElement("div");loggingOutText.id="loggingOutText";loggingOutText.textContent="Logging Out...";overlay.appendChild(loggingOutText);overlay.style.display="flex"}function hideOverlay(){const spinner=document.getElementById("loadingSpinner");const loggingOutText=document.getElementById("loggingOutText");overlay.removeChild(spinner);overlay.removeChild(loggingOutText);overlay.style.display="none"}function logOut(){auth.signOut().then(function(){localStorage.removeItem("authToken");localStorage.removeItem("tokenExpiryTime");localStorage.removeItem("clickedLink");const logoutPage=localStorage.getItem("logoutPage")||"login.html";window.location.href=logoutPage}).catch(function(error){console.error("Error signing out:",error)})}const form=document.querySelector(".popup-form");const submitButton=document.querySelector(".popup-form button");const patientsContainer=document.getElementById("patients");const loader=document.getElementById("loader");let patients=[];let patientCount=1;const patientsRef=ref(database,"patients");const savePatientData=(name,dob,parents,residence,payment,sex)=>{const patientId=patientCount.toString();const patientData={name:name,dob:dob,parents:parents,residence:residence,payment:payment,sex:sex,patientId:patientId};const newPatientRef=ref(database,`patients/${patientId}`);loader.style.display="block";set(newPatientRef,patientData).then(()=>{form.reset();showMessage("Patient details uploaded successfully!");patientCount++;loader.style.display="none";closePopup()}).catch(error=>{console.error("Error uploading patient details:",error);showMessage("Error uploading patient details. Please try again.");loader.style.display="none"})};function closePopup(){const popupOverlay=document.getElementById("popupOverlay");popupOverlay.style.visibility="hidden";popupOverlay.style.opacity="0"}form.addEventListener("submit",e=>{e.preventDefault();const name=document.getElementById("name").value.trim();const dob=document.getElementById("dob").value;const parents=document.getElementById("parents").value;const residence=document.getElementById("residence").value;const payment=document.getElementById("payment").value;const sex=document.getElementById("sex").value;savePatientData(name,dob,parents,residence,payment,sex)});const uploadForm=document.getElementById("addPatientForm");uploadForm.addEventListener("DOMContentLoaded",()=>{populateNextPatientId()});uploadForm.addEventListener("submit",e=>{e.preventDefault();const nameInput=document.getElementById("name");const dobInput=document.getElementById("dob");const parentsInput=document.getElementById("parents");const residenceInput=document.getElementById("residence");const paymentInput=document.getElementById("payment");const sexInput=document.getElementById("sex");const name=nameInput.value;const dob=dobInput.value;const parents=parentsInput.value;const residence=residenceInput.value;const payment=paymentInput.value;const sex=sexInput.value;savePatientData(name,dob,parents,residence,payment,sex)});searchButton.addEventListener("click",()=>{const searchTerm=searchInput.value.trim();loaderElement.classList.remove("hidden");patientsContainer.innerHTML="";const patientsRef=ref(database,"patients");onValue(patientsRef,snapshot=>{const patientsData=snapshot.val();const searchResults=[];if(patientsData){const patients=Object.entries(patientsData);if(searchTerm!==""){patients.forEach(([patientId,patient])=>{if(patient.name.toLowerCase().includes(searchTerm.toLowerCase())||patient.patientId.includes(searchTerm)){searchResults.push(patient)}})}else{searchResults.push(...patients.map(([patientId,patient])=>patient))}}loaderElement.classList.add("hidden");if(searchResults.length>0){renderPatients(searchResults)}else{patientsContainer.innerHTML='<p class="no-results">No Patients found.</p>'}})});function filterPatients(patients,searchTerm){const filteredPatients=patients.filter(patient=>{const patientName=patient.name.toLowerCase();return patientName.includes(searchTerm.toLowerCase())});renderPatients(filteredPatients)}let patientsData=[];let searchResults=[];let currentPage=1;const patientsPerPage=20;searchInput.addEventListener("input",()=>{const searchTerm=searchInput.value.trim().toLowerCase();searchResults=[];if(searchTerm!==""){searchResults=patientsData.filter(patient=>{return patient.name.toLowerCase().includes(searchTerm)||patient.patientId.includes(searchTerm)})}currentPage=1;renderPatients()});onValue(patientsRef,snapshot=>{patientsData=snapshot.val()?Object.values(snapshot.val()):[];renderPatients()});function isToday(date){const today=new Date;return date.getDate()===today.getDate()&&date.getMonth()===today.getMonth()}function findPatientsWithBirthdaysToday(){const patientsRef=ref(database,"patients");onValue(patientsRef,snapshot=>{const patientsData=snapshot.val();const searchResults=[];if(patientsData){Object.entries(patientsData).forEach(([patientId,patient])=>{const dobDate=new Date(patient.dob);if(isToday(dobDate)){searchResults.push(patient)}})}if(searchResults.length>0){displayPatientsInActionCenter(searchResults)}else{displayNoBirthdaysMessage()}})}function displayNoBirthdaysMessage(){const actionCenter=document.getElementById("actionCenter");const messageContainer=document.createElement("div");const image=document.createElement("img");image.src="no results.jpg";image.alt="No Birthdays Today Image";image.style.width="200px";image.style.height="200px";messageContainer.appendChild(image);const message=document.createElement("p");message.textContent="No birthdays today.";messageContainer.appendChild(message);actionCenter.innerHTML="";actionCenter.appendChild(messageContainer)}function displayPatientsInActionCenter(patients){const actionCenter=document.getElementById("actionCenter");actionCenter.innerHTML="";const header=document.createElement("h5");header.textContent="🎉Wow! 🎂🎁 Some patients have birthdays today! 🎉";actionCenter.appendChild(header);const patientTable=document.createElement("table");const headerRow=document.createElement("tr");const headerNameCell=document.createElement("th");const headerButtonCell=document.createElement("th");headerNameCell.textContent="Patient Name";headerButtonCell.textContent="Actions";headerRow.appendChild(headerNameCell);headerRow.appendChild(headerButtonCell);patientTable.appendChild(headerRow);patients.forEach(patient=>{const tableRow=document.createElement("tr");const nameCell=document.createElement("td");nameCell.textContent=patient.name;const numberCell=document.createElement("td");numberCell.textContent=patient.parents;const overlay5=document.getElementById("overlay");const sendWishCell=document.createElement("td");const sendWishButton=document.createElement("button");sendWishButton.textContent=" 🎉Send Wishes";sendWishButton.classList.add("sendBirthdayMessage");sendWishButton.addEventListener("click",()=>{overlay5.style.display="block";openWishesPopup(patient)});sendWishCell.appendChild(sendWishButton);tableRow.appendChild(nameCell);tableRow.appendChild(sendWishCell);patientTable.appendChild(tableRow)});actionCenter.appendChild(patientTable)}window.onload=function(){findPatientsWithBirthdaysToday()};function openWishesPopup(patient){const WishesPopup=document.createElement("div");WishesPopup.classList.add("WishesPopup");const form=document.createElement("form");const patientDetails=document.createElement("div");patientDetails.classList.add("details");patientDetails.innerHTML=`
    <p><strong>Name:</strong> ${patient.name}</p>
    <p><strong>Date of Birth:</strong> ${patient.dob}</p>
    <p><strong>Contact:</strong> ${patient.parents}</p>
  `;const yourHospitalName="Sanyu Hospital";const hospitalInfo="Katooke Wakiso District, Uganda";const messageLabel=document.createElement("label");messageLabel.textContent="Compose Birthday Message for:";const messageInput=document.createElement("textarea");messageInput.rows=4;messageInput.placeholder="Type your birthday wishes here...";messageInput.value=`🎉 Happy Birthday, ${patient.name}! 🎂🎁\n\n`+`From all of us at ${yourHospitalName}, we wish you a day filled with joy and happiness. 🌞\n\n`+`As a birthday gift, we invite you to visit our hospital for a free comprehensive body checkup. 🩺🏥\n\n`+`Your health is important to us, and we are here to ensure you have a healthy and vibrant year ahead. 💪\n\n`+`Feel free to pass by and get the best care. 🚶‍♂️🚶‍♀️\n\n`+`Address: ${hospitalInfo}\n\n`+`Contact us at +256 708 657 717 for any inquiries. 📞`;const sendButton=document.createElement("button");sendButton.textContent="🎉Send Wishes";sendButton.classList.add("sendBirthdayMessage");sendButton.addEventListener("click",event=>{event.preventDefault();const message=messageInput.value;const recipientNumber=patient.parents;const recipientName=patient.name;sendWishes(recipientNumber,recipientName,message);closeWishesPopup(WishesPopup)});const closeButton=document.createElement("button");closeButton.textContent="Close";closeButton.classList.add("close-button");closeButton.addEventListener("click",()=>{closeWishesPopup(WishesPopup)});form.appendChild(messageLabel);form.appendChild(patientDetails);form.appendChild(messageInput);form.appendChild(sendButton);form.appendChild(closeButton);WishesPopup.appendChild(form);document.body.appendChild(WishesPopup);overlay5.style.display="block"}const overlay5=document.getElementById("overlay");function closeWishesPopup(WishesPopup){overlay5.style.display="none";document.body.removeChild(WishesPopup)}function sendWishes(recipientNumber,recipientName,message){showMessage(`Sending wishes to ${recipientName}`);window.open(`https://api.whatsapp.com/send?phone=${recipientNumber}&text=${encodeURIComponent(message)}`)}async function renderPatients(){patientsContainer.innerHTML="";const dataToDisplay=searchResults.length>0?searchResults:patientsData;const startIndex=(currentPage-1)*patientsPerPage;const endIndex=startIndex+patientsPerPage;const patientsForPage=dataToDisplay.slice(startIndex,endIndex);const table=document.createElement("table");table.classList.add("patient-table");const tableHeaderRow=document.createElement("tr");tableHeaderRow.classList.add("table-header");const headers=["Select","Name","Residence","Payment Terms","Sex","Patient ID","Contact","Date of Birth","Age","Actions"];headers.forEach(headerText=>{const tableHeaderCell=document.createElement("th");tableHeaderCell.textContent=headerText;tableHeaderRow.appendChild(tableHeaderCell)});function createHiddenDigitsTableCell(text,visibleDigitsCount){const cell=document.createElement("td");const hiddenDigits="*".repeat(text.length-visibleDigitsCount);const visibleDigits=text.slice(-visibleDigitsCount);cell.textContent=hiddenDigits+visibleDigits;return cell}function isToday(date){const today=new Date;return date.getDate()===today.getDate()&&date.getMonth()===today.getMonth()}let isBirthdayToday=false;table.appendChild(tableHeaderRow);patientsForPage.forEach(patient=>{const tableRow=document.createElement("tr");const selectCell=document.createElement("td");const selectCheckbox=document.createElement("input");selectCheckbox.type="checkbox";selectCell.appendChild(selectCheckbox);tableRow.appendChild(selectCell);tableRow.addEventListener("click",()=>{selectCheckbox.checked=!selectCheckbox.checked;if(selectCheckbox.checked){tableRow.classList.add("selected-row")}else{tableRow.classList.remove("selected-row")}});tableRow.classList.add("table-row");const nameCell=createTableCell(patient.name);const residenceCell=createTableCell(patient.residence);const paymentCell=createTableCell(patient.payment);const sexCell=createTableCell(patient.sex);const patientIdCell=createTableCell("PI - "+patient.patientId);const parentsCell=createHiddenDigitsTableCell(patient.parents,3);const dobCell=createTableCell(patient.dob);const dob=new Date(patient.dob);const today=new Date;const age=today.getFullYear()-dob.getFullYear();const ageCell=createTableCell(age.toString());const actionsCell=document.createElement("td");const viewButton=document.createElement("button");viewButton.textContent="View";viewButton.classList.add("view-button");viewButton.addEventListener("click",function(){currentPatientName=patient.name;openPatientHistoryPopup(patient)});actionsCell.appendChild(viewButton);if(isToday(dob)){dobCell.style.backgroundColor="yellow";dobCell.innerHTML+=" 🎂🎁";isBirthdayToday=true}tableRow.appendChild(nameCell);tableRow.appendChild(residenceCell);tableRow.appendChild(paymentCell);tableRow.appendChild(sexCell);tableRow.appendChild(patientIdCell);tableRow.appendChild(parentsCell);tableRow.appendChild(dobCell);tableRow.appendChild(ageCell);tableRow.appendChild(actionsCell);table.appendChild(tableRow)});patientsContainer.appendChild(table);if(isBirthdayToday){function openBirthdayMessagePopup(patients){const birthdayMessagePopup=document.getElementById("birthdayMessagePopup");const patientsList=document.getElementById("patientsList");const closePopupButton=document.getElementById("closeMessagePopup");if(!birthdayMessagePopup||!patientsList||!closePopupButton){console.error("One or more required elements are missing.");return}const patientsTable=document.getElementById("patientsTable");if(patientsTable){patientsTable.innerHTML=""}else{console.error("patientsTable is missing.")}const todayPatients=patients.filter(patient=>isToday(new Date(patient.dob)));todayPatients.forEach(patient=>{const row=patientsTable.insertRow();const nameCell=row.insertCell(0);const phoneCell=row.insertCell(1);nameCell.textContent=patient.name;phoneCell.textContent=patient.parents});birthdayMessagePopup.classList.add("active");const sendButton=document.getElementById("sendBirthdayMessage");if(sendButton){sendButton.addEventListener("click",function(){const birthdayMessageInput=document.getElementById("birthdayMessageInput").value;const yourHospitalName="Sanyu Hospital";const hospitalInfo="Katooke Wakiso District, Uganda";function sendMessageToPatient(patient){const message=`🎉 Happy Birthday, ${patient.name}! 🎂🎁\n\n`+`From all of us at ${yourHospitalName}, we wish you a day filled with joy and happiness. 🌞\n\n`+`As a birthday gift, we invite you to visit our hospital for a free comprehensive body checkup. 🩺🏥\n\n`+`Your health is important to us, and we are here to ensure you have a healthy and vibrant year ahead. 💪\n\n`+`Feel free to pass by and get the best care. 🚶‍♂️🚶‍♀️\n\n`+`Address: ${hospitalInfo}\n\n`+`Contact us at +256 708 657 717 for any inquiries. 📞`;window.open(`https://api.whatsapp.com/send?phone=${patient.parents}&text=${encodeURIComponent(message)}`)}todayPatients.forEach((patient,index)=>{setTimeout(()=>{sendMessageToPatient(patient)},index*3e3)});overlay.style.display="none";birthdayMessagePopup.style.display="none"})}else{console.error("sendBirthdayMessage button is missing.")}closePopupButton.addEventListener("click",function(){birthdayMessagePopup.style.display="none";overlay.style.display="none"})}}const totalPages=Math.ceil(dataToDisplay.length/patientsPerPage);const paginationDiv=document.getElementById("pagination");paginationDiv.innerHTML="";const prevButton=document.createElement("button");prevButton.textContent="Previous";prevButton.addEventListener("click",()=>{if(currentPage>1){currentPage--;renderPatients()}});const nextButton=document.createElement("button");nextButton.textContent="Next";nextButton.addEventListener("click",()=>{if(currentPage<totalPages){currentPage++;renderPatients()}});const pageInfo=document.createElement("span");pageInfo.textContent=`Page ${currentPage} of ${totalPages}`;paginationDiv.appendChild(prevButton);paginationDiv.appendChild(pageInfo);paginationDiv.appendChild(nextButton)}searchInput.addEventListener("input",()=>{const searchTerm=searchInput.value.trim().toLowerCase();searchResults=[];if(searchTerm!==""){searchResults=patientsData.filter(patient=>{return patient.name.toLowerCase().includes(searchTerm)||patient.patientId.includes(searchTerm)})}currentPage=1;renderPatients()});renderPatients();function createTableCell(text){const cell=document.createElement("td");cell.textContent=text;return cell}function formatDate(timestamp){const date=new Date(timestamp);const options={year:"numeric",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"};return date.toLocaleString("en-US",options)}function openPatientHistoryPopup(patient){const popupOverlay=document.getElementById("popupOverlay1");const popupClose=document.getElementById("popupClose1");const patientDetails=document.getElementById("patientDetails");const patientHistory=document.getElementById("patientHistory");patientDetails.innerHTML="";patientHistory.innerHTML="";popupOverlay.style.visibility="visible";popupOverlay.style.opacity="1";popupClose.addEventListener("click",function(){popupOverlay.style.visibility="hidden";popupOverlay.style.opacity="0"});const patientDetailsHTML=`
  <div class="patient-details">
 
<style>
  .button {
    background-color: #4CAF50;
    border: none;
    color: white;
    padding: 10px;
    text-align: center;
    text-decoration: none;
    font-size: 14px;
    margin: 4px 2px;
    cursor: disabled;
    border-radius: 50px;
  }

  .save-button {
    background-color: #4CAF50;
  }

  .delete-button {
    background-color: #f44336;
  }
</style>
 <div class="patient-image-frame">
  <label for="uploadImage" class="upload-label">
    <i class="fa fa-upload"></i>
    
  </label>
  <input type="file" id="uploadImage" accept="image/*">
</div>
<h3>Patient Demographics:</h3>
<table class="patient-demographics-table">
    <tr>
      <td><strong>Name:</strong></td>
      <td>${patient.name}</td>
    </tr>
    <tr>
      <td><strong>Date of Birth:</strong></td>
      <td>${patient.dob}</td>
    </tr>
    <tr>
      <td><strong>Gender:</strong></td>
      <td>${patient.sex}</td>
    </tr>
    <tr>
      <td><strong>Payment Type:</strong></td>
      <td>${patient.payment}</td>
    </tr>
    <tr>
      <td><strong>Residence:</strong></td>
      <td>${patient.residence}</td>
    </tr>
    <tr>
      <td><strong>Contact:</strong></td>
      <td>${patient.parents}</td>
    </tr>
    <tr>
      <td><strong>Patient ID:</strong></td>
      <td>${patient.patientId}</td>
    </tr>
    <tr>
    <td><strong>No. of Visits:</strong></td>
    <td id="visitCount"> </td>
  </tr>
    <tr>
      <td><strong>Current Patient's Status:</strong></td>
      <td><span id="currentStatus"></span></td>
    </tr>
  </table>
    <div id="barcode"></div> <!-- This is where the generated barcode will be displayed -->

    <!-- Add a "Visit Count" element in your HTML -->
    <!-- Add more patient details as needed -->

    <!-- The container for patient visit details -->
<div id="patientVisitDetails" ></div>
<!-- Add this inside your patient details HTML -->

<button style="display:none;" id="generateBarcodeButton" class="button save-button">
    <i style="margin-right: 5px;" class="fa fa-barcode"></i>Generate Barcode
  </button>



    <!-- Assuming you have the patient's name as patientName variable -->
<button style="background: darkblue;" id="visit" data-patient="${patient.patientId}" class="button save-button">
  <i id="visitIcon" style="margin-right: 5px;" class="fas fa-calendar-check"></i>Reg. Visit
</button>
          <button  style="background: darkblue; " id="triageButton"  class="button save-button"><i style="margin-right: 5px;" class="fas fa-chart-line"></i>Triage History</button>

<button id="saveButton"  class="button save-button" disabled><i style="margin-right: 5px;" class="fa fa-save"></i>Save Image</button>
<button id="delButton" class="button delete-button"><i class="fa fa-trash"></i>Delete Image</button>
<button id="addToWaitingListButton" class="button save-button">
  <i style="margin-right: 5px;" class="fas fa-list"></i>Add to Waiting List
</button>
<button id="editButton" class="button save-button">
  <i style="margin-right: 5px;" class="fa fa-edit"></i>Edit Details
</button>

<button style="background: darkblue; " id="printCardButton" class="button save-button">
  <i style="margin-right: 5px;" class="fa fa-print"></i>Patient Card
</button>

  </div>
  `;patientDetails.innerHTML=patientDetailsHTML;function printPatientCard(){const printWindow=window.open("","","width=600,height=600");const patientCardContent=`
    <div style="text-align: center;">
      <h1>${patient.name}</h1>
      <p><strong>Patient ID:</strong> ${patient.patientId}</p>
      <p><strong>Date of Birth:</strong> ${patient.dob}</p>
      <p><strong>Gender:</strong> ${patient.sex}</p>
      <p style="margin-top: 20px;"><strong>Hospital Name:</strong>Sanyu Hospital</p>
      <p><strong>Note:</strong> Please return to the hospital if found lost</p>
    </div>
  `;const cardStyles=`
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
    }
    h1 {
      color: #333;
      font-size: 24px;
      margin: 0;
    }
    p {
      color: #666;
      font-size: 16px;
      margin: 5px 0;
    }
    div {
      background-color: #f4f4f4;
      padding: 20px;
      border: 1px solid #ccc;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
      border-radius: 4px;
    }
  `;printWindow.document.open();printWindow.document.write(`<style>${cardStyles}</style>`);printWindow.document.write(patientCardContent);printWindow.document.close();printWindow.print();printWindow.close()}const printCardButton=document.getElementById("printCardButton");printCardButton.addEventListener("click",printPatientCard);let currentPatientId;const editButton=document.getElementById("editButton");editButton.addEventListener("click",()=>openEditPopup(patient.patientId));let saveEditedDetailsHandler;function openEditPopup(patientId){const editPopupOverlay=document.getElementById("editPopupOverlay");const editPopup=document.getElementById("editPopup");editPopup.style.display="block";editPopupOverlay.style.visibility="visible";editPopupOverlay.style.opacity="1";overlay.style.display="block";saveEditedDetailsHandler=saveEditedDetails;currentPatientId=patientId;document.getElementById("editedName").value=patient.name;document.getElementById("editedDOB").value=patient.dob;document.getElementById("editedTel").value=patient.parents;document.getElementById("patientIdDisplay").innerText=`Patient ID: ${patientId}`}const closeEditPopupButton=document.getElementById("closeEditPopup");closeEditPopupButton.addEventListener("click",closeEditPopup);function closeEditPopup(){const editPopup=document.getElementById("editPopup");const editPopupOverlay=document.getElementById("editPopupOverlay");editPopup.style.display="none";editPopupOverlay.style.visibility="hidden";editPopupOverlay.style.opacity="0";overlay.style.display="none";saveEditedDetailsButton.removeEventListener("click",saveEditedDetailsHandler);document.getElementById("patientIdDisplay").innerText=""}function saveEditedDetails(){const editedName=document.getElementById("editedName").value;const editedDOB=document.getElementById("editedDOB").value;const editedTel=document.getElementById("editedTel").value;if(editedName.trim()===""||editedDOB.trim()===""||editedTel.trim()===""){showMessage("Please fill in all fields.");return}if(currentPatientId){const editedPatient={name:editedName,dob:editedDOB,parents:editedTel};const patientRef=ref(database,`patients/${currentPatientId}`);update(patientRef,editedPatient).then(()=>{showMessage("Patient details updated successfully!");closeEditPopup()}).catch(error=>{showMessage("Error updating patient details:",error)});saveEditedDetailsButton.removeEventListener("click",saveEditedDetails)}else{showMessage("Invalid patient data.")}}const saveEditedDetailsButton=document.getElementById("saveEditedDetails");saveEditedDetailsButton.addEventListener("click",saveEditedDetails);function handleSaveVisit(){if(currentPatientName){const clinicianName=clinicianNameSelect.value;const temperature=document.getElementById("temperature").value;const bp=document.getElementById("bp").value;const rr=document.getElementById("rr").value;const hr=document.getElementById("hr").value;const sp02=document.getElementById("sp02").value;const wt=document.getElementById("wt").value;const ht=document.getElementById("ht").value;const bmi=document.getElementById("bmi").value;const muac=document.getElementById("muac").value;const weightForAgeZScore=document.getElementById("weightForAgeZScore").value;const disability=document.getElementById("disability").value;const chronicIllness=document.getElementById("chronicIllness").value;const drugAbuse=document.getElementById("drugAbuse").value;const selectedAllergies=[...testsTakenSelect.selectedOptions].map(option=>option.value);const visit={clinicianName:clinicianName,temperature:temperature,bp:bp,rr:rr,hr:hr,sp02:sp02,wt:wt,ht:ht,bmi:bmi,muac:muac,weightForAgeZScore:weightForAgeZScore,disability:disability,chronicIllness:chronicIllness,drugAbuse:drugAbuse,allergies:selectedAllergies,timestamp:Date.now()};const visitsRef=ref(database,`patients/${currentPatientName}/visits`);push(visitsRef,visit).then(()=>{showMessage("Visit saved successfully!");currentPatientName="";visitPopupTitle.textContent="";visitPopupOverlay.style.display="none";isPopupOpen=false;clinicianNameSelect.value="";document.getElementById("temperature").value="";document.getElementById("bp").value="";document.getElementById("rr").value="";document.getElementById("hr").value="";document.getElementById("sp02").value="";document.getElementById("wt").value="";document.getElementById("ht").value="";document.getElementById("bmi").value="";document.getElementById("muac").value="";document.getElementById("weightForAgeZScore").value="";document.getElementById("disability").value="";document.getElementById("chronicIllness").value="";document.getElementById("drugAbuse").value="";$("#allergies").val(null).trigger("change");saveVisitButton.removeEventListener("click",handleSaveVisit)}).catch(error=>{console.error("Error saving visit:",error);showMessage("Error saving visit. Please try again.")})}else{showMessage("Invalid patient data.");currentPatientName="";visitPopupTitle.textContent="";visitPopupOverlay.style.display="none";isPopupOpen=false;clinicianNameSelect.value="";document.getElementById("temperature").value="";document.getElementById("bp").value="";document.getElementById("rr").value="";document.getElementById("hr").value="";document.getElementById("sp02").value="";document.getElementById("wt").value="";document.getElementById("ht").value="";document.getElementById("bmi").value="";document.getElementById("muac").value="";document.getElementById("weightForAgeZScore").value="";document.getElementById("disability").value="";document.getElementById("chronicIllness").value="";document.getElementById("drugAbuse").value="";$("#allergies").val(null).trigger("change");saveVisitButton.removeEventListener("click",handleSaveVisit)}}const saveVisitButton=document.getElementById("saveVisitBtn");const visitButton=document.getElementById("visit");const visitPopupOverlay=document.getElementById("popup-overlay3");const visitPopupTitle=document.getElementById("visitPopupTitle");let currentPatientName="";visitButton.addEventListener("click",event=>{if(!isPopupOpen){currentPatientName=event.target.getAttribute("data-patient");visitPopupTitle.textContent=`Save Visit for Patient: PI - ${currentPatientName}`;visitPopupOverlay.style.display="block";isPopupOpen=true;saveVisitButton.removeEventListener("click",handleSaveVisit);saveVisitButton.addEventListener("click",handleSaveVisit)}});const closePopupBtn4=document.getElementById("closePopupBtn4");closePopupBtn4.addEventListener("click",()=>{const popupOverlay=document.getElementById("popup-overlay4");popupOverlay.style.display="none"});const cancelVisitBtn=document.getElementById("cancelVisitBtn");let isPopupOpen=false;function closePopup(){visitPopupOverlay.style.display="none"}function closeVisitPopup(){visitPopupOverlay.style.display="none";isPopupOpen=false}cancelVisitBtn.addEventListener("click",closeVisitPopup);$("#allergies").select2({dropdownParent:$("body")});$("#clinicianName").select2({dropdownParent:$("body")});const testsTakenSelect=document.getElementById("allergies");const clinicianNameSelect=document.getElementById("clinicianName");const allergiesRef=ref(database,"medicine");onValue(allergiesRef,snapshot=>{const allergiesData=snapshot.val();$("#allergies").empty();if(allergiesData){const allergies=Object.values(allergiesData);allergies.forEach(allergy=>{const option=new Option(allergy.name,allergy.name);$("#allergies").append(option)})}$("#allergies").trigger("change")});const cliniciansRef=ref(database,"staff");onValue(cliniciansRef,snapshot=>{const cliniciansData=snapshot.val();clinicianNameSelect.innerHTML='<option value="" disabled selected>Select a clinician</option>';if(cliniciansData){const clinicians=Object.values(cliniciansData);clinicians.forEach(clinician=>{const option=new Option(clinician.name,clinician.name);$("#clinicianName").append(option)})}$("#clinicianName").trigger("change")});const addToWaitingListButton=document.getElementById("addToWaitingListButton");addToWaitingListButton.addEventListener("click",()=>{const patientName=patient.name;const patientId=patient.patientId;const currentDate=new Date;const formattedDate=formatDate(currentDate);addToWaitingList(patientName,patientId,formattedDate)});function addToWaitingList(patientName,patientId,date){const waitingListRef=ref(database,"waiting-list");push(waitingListRef,{name:patientName,id:patientId,date:date}).then(()=>{showMessage("Patient added to the waiting list successfully!")}).catch(error=>{console.error("Error adding patient to the waiting list:",error);showMessage("Error adding patient to the waiting list:",error)})}function formatDate(date){const year=date.getFullYear();const month=String(date.getMonth()+1).padStart(2,"0");const day=String(date.getDate()).padStart(2,"0");const hours=String(date.getHours()).padStart(2,"0");const minutes=String(date.getMinutes()).padStart(2,"0");const seconds=String(date.getSeconds()).padStart(2,"0");return`${year}-${month}-${day} ${hours}:${minutes}:${seconds}`}const patientHistoryElement=document.getElementById("patientHistory");const uploadImage=document.getElementById("uploadImage");const saveButton=document.getElementById("saveButton");const imageFrame=document.querySelector(".patient-image-frame");if(patient.image){const imageElement=document.createElement("img");imageElement.src=patient.image;imageElement.alt="Patient Image";imageFrame.innerHTML="";imageFrame.appendChild(imageElement)}else{const uploadLabel=document.createElement("label");uploadLabel.htmlFor="uploadImage";uploadLabel.className="upload-label";uploadLabel.innerHTML=`
    <i class="fas fa-cloud-upload-alt"></i>
    Patient's Image 
  `;const uploadInput=document.createElement("input");uploadInput.type="file";uploadInput.id="uploadImage";uploadInput.accept="image/*";imageFrame.innerHTML="";imageFrame.appendChild(uploadLabel);imageFrame.appendChild(uploadInput);uploadInput.addEventListener("change",function(event){const file=event.target.files[0];const reader=new FileReader;reader.onload=function(e){const imageUrl=e.target.result;const imageElement=document.createElement("img");imageElement.src=imageUrl;imageElement.alt="Patient Image";imageFrame.innerHTML="";imageFrame.appendChild(imageElement);saveButton.disabled=false};reader.readAsDataURL(file)})}saveButton.addEventListener("click",function(){saveButton.innerHTML='<i class="fas fa-spinner fa-spin"></i> Saving...';const imageElement=imageFrame.querySelector("img");const imageData=imageElement.src;const canvas=document.createElement("canvas");const context=canvas.getContext("2d");const img=new Image;img.onload=function(){canvas.width=img.width;canvas.height=img.height;context.drawImage(img,0,0,img.width,img.height);const webpDataURL=canvas.toDataURL("image/webp",.8);const imageBlob=dataURItoBlob(webpDataURL);const patientName=patient.patientId;const filename=`${patientName}_${Date.now()}.webp`;const imageRef=storageRef(storage,`images/${filename}`);const uploadTask=uploadBytes(imageRef,imageBlob);uploadTask.then(function(){getDownloadURL(imageRef).then(function(downloadURL){const patientRef=ref(database,`patients/${patient.patientId}`);update(patientRef,{image:downloadURL});showMessage("Image saved successfully!")}).finally(()=>{saveButton.textContent="Save Image"})}).catch(function(error){console.error("Error uploading image:",error);showMessage("Error uploading image. Please try again.");saveButton.textContent="Save"})};img.src=imageData});const deleteButton=document.getElementById("delButton");deleteButton.addEventListener("click",function(){if(!patient.image){return}const patientRef=ref(database,`patients/${patient.patientId}`);update(patientRef,{image:null}).then(()=>{imageFrame.innerHTML="";deleteButton.disabled=true;showMessage("Image deleted successfully!")}).catch(error=>{console.error("Error deleting image:",error);showMessage("Error deleting image. Please try again.")})});if(patient.image){const imageElement=document.createElement("img");imageElement.src=patient.image;imageElement.alt="Patient Image";imageFrame.innerHTML="";imageFrame.appendChild(imageElement);deleteButton.disabled=false}function dataURItoBlob(dataURI){const byteString=atob(dataURI.split(",")[1]);const mimeString=dataURI.split(",")[0].split(":")[1].split(";")[0];const ab=new ArrayBuffer(byteString.length);const ia=new Uint8Array(ab);for(let i=0;i<byteString.length;i++){ia[i]=byteString.charCodeAt(i)}return new Blob([ab],{type:mimeString})}const patientName=patient.patientId;const patientHistoryRef=ref(database,`patients/${patientName}/testsTaken`);function getLatestTestStatus(records){if(records.length===0)return"Unknown";records.sort((a,b)=>b.data.dateTaken-a.data.dateTaken);const latestTestStatus=records[0].data.results?.finalStatus||"Pending...";return latestTestStatus}onValue(patientHistoryRef,snapshot=>{patientHistoryElement.innerHTML="";if(snapshot.exists()){const records=[];snapshot.forEach(childSnapshot=>{const recordKey=childSnapshot.key;const record=childSnapshot.val();records.push({key:recordKey,data:record})});const currentStatusElement=document.getElementById("currentStatus");const currentStatus=getLatestTestStatus(records);currentStatusElement.textContent=currentStatus;records.forEach(recordObj=>{const recordKey=recordObj.key;const record=recordObj.data;const recordElement=createRecordElement(recordKey,record);patientHistoryElement.appendChild(recordElement);const testResultRef=ref(database,`patients/${patientName}/testsTaken/${recordKey}/resultsObtained`);onValue(testResultRef,resultSnapshot=>{const resultsObtainedElement=recordElement.querySelector(".results-obtained-data");if(resultsObtainedElement){if(resultSnapshot.exists()){const resultsObtained=resultSnapshot.val();resultsObtainedElement.textContent="Test Results status: "+(resultsObtained==="Completed Successfully"?"Completed Successfully":"Pending...");resultsObtainedElement.style.color=resultsObtained==="Completed Successfully"?"darkblue":"orange"}else{resultsObtainedElement.textContent="Test Results status: Pending...";resultsObtainedElement.style.color="orange"}}else{console.error("results-obtained-data element not found in recordElement")}})})}else{const noRecordsElement=document.createElement("p");noRecordsElement.textContent="No Records Found";noRecordsElement.style.fontStyle="italic";patientHistoryElement.appendChild(noRecordsElement)}});function formatDate(timestamp){const date=new Date(timestamp);const options={year:"numeric",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"};return date.toLocaleString("en-US",options)}let visitTrendChart;function destroyChart(){if(window.visitTrendChart&&window.visitTrendChart.destroy){window.visitTrendChart.destroy()}}function analyzeAndProvideRecommendations(temperatures,respiratoryRates,heartRates,spO2Values,vitalSignsData){const newTemperature=temperatures[0];const previousTemperature=temperatures[1];const temperatureDifference=newTemperature-previousTemperature;const newRespiratoryRate=respiratoryRates[0];const previousRespiratoryRate=respiratoryRates[1];const respiratoryRateDifference=newRespiratoryRate-previousRespiratoryRate;const newHeartRate=heartRates[0];const previousHeartRate=heartRates[1];const heartRateDifference=newHeartRate-previousHeartRate;const newSpO2=spO2Values[0];const previousSpO2=spO2Values[1];const spO2Difference=newSpO2-previousSpO2;const weightValues=vitalSignsData.map(data=>data.wt);const lastWeight=weightValues[0];const previousWeight=weightValues[1];const weightDifference=lastWeight-previousWeight;const normalRanges={temperature:{min:36.1,max:37.2},respiratoryRate:{min:12,max:20},heartRate:{min:60,max:100},spO2:{min:95,max:100},weight:{min:50,max:80}};function getNoteAndIconClass(vital,value){const normalRange=normalRanges[vital];let potentialSicknesses="";if(isNaN(value)||value===0){return{note:"No data registered yet",iconClass:"no-data"}}else if(value<normalRange.min){potentialSicknesses="<ul>PS:";switch(vital){case"temperature":potentialSicknesses+="<li>Hypothermia</li><li>Exposure to cold conditions</li><li>Metabolic disorders</li>";break;case"respiratoryRate":potentialSicknesses+="<li>Bradypnea</li><li>Overdose of certain medications</li><li>Neurological disorders</li>";break;case"heartRate":potentialSicknesses+="<li>Bradycardia</li><li>Heart block</li><li>Hypothyroidism</li>";break;case"spO2":potentialSicknesses+="<li>Hypoxemia</li><li>Respiratory distress</li><li>Lung disease</li>";break;case"weight":potentialSicknesses+="<li>Malnutrition</li><li>Eating disorders</li><li>Chronic illness</li>";break;default:potentialSicknesses+="<li>Unknown potential sicknesses</li>"}potentialSicknesses+="</ul>";return{note:`Below normal range: ${potentialSicknesses}`,iconClass:"below-normal"}}else if(value>normalRange.max){potentialSicknesses="<ul>PS:";switch(vital){case"temperature":potentialSicknesses+="<li>Fever</li><li>Infection</li><li>Inflammatory disorders</li>";break;case"respiratoryRate":potentialSicknesses+="<li>Tachypnea</li><li>Respiratory distress</li><li>Anxiety</li><li>Lung diseases</li>";break;case"heartRate":potentialSicknesses+="<li>Tachycardia</li><li>Hypertension</li><li>Anxiety</li><li>Heart disease</li>";break;case"spO2":potentialSicknesses+="<li>Unknown potential sicknesses</li>";break;case"weight":potentialSicknesses+="<li>Overweight</li><li>Obesity</li><li>Metabolic disorders</li>";break;default:potentialSicknesses+="<li>Unknown potential sicknesses</li>"}potentialSicknesses+="</ul>";return{note:`Above normal range: ${potentialSicknesses}`,iconClass:"above-normal"}}else{return{note:`Within normal range.`,iconClass:"normal"}}}const trendAnalysis=`
  <div class="trend-container">
    <div class="trend-box">
      <span class="icon ${getNoteAndIconClass("temperature",previousTemperature).iconClass}"><i class="fas fa-thermometer-half"></i></span>
      <span class="info">
        <strong>Temperature:</strong> ${getNoteAndIconClass("temperature",previousTemperature).note}
      </span>
    </div>
    <div class="trend-box">
      <span class="icon ${getNoteAndIconClass("respiratoryRate",previousRespiratoryRate).iconClass}"><i class="fas fa-lungs"></i></span>
      <span class="info">
        <strong>Respiratory Rate:</strong> ${getNoteAndIconClass("respiratoryRate",previousRespiratoryRate).note}
      </span>
    </div>
    <div class="trend-box">
      <span class="icon ${getNoteAndIconClass("heartRate",previousHeartRate).iconClass}"><i class="fas fa-heartbeat"></i></span>
      <span class="info">
        <strong>Heart Rate:</strong> ${getNoteAndIconClass("heartRate",previousHeartRate).note}
      </span>
    </div>
    <div class="trend-box">
      <span class="icon ${getNoteAndIconClass("spO2",previousSpO2).iconClass}"><i class="fas fa-chart-line"></i></span>
      <span class="info">
        <strong>SpO2 Levels:</strong> ${getNoteAndIconClass("spO2",previousSpO2).note}
      </span>
    </div>
    <div class="trend-box">
      <span class="icon ${getNoteAndIconClass("weight",previousWeight).iconClass}"><i class="fas fa-weight"></i></span>
      <span class="info">
        <strong>Weight:</strong> ${getNoteAndIconClass("weight",previousWeight).note}
      </span>
    </div>
  </div>
`;return{trendAnalysis:trendAnalysis}}function createVisitTrendChart(visitKeys,visitDetails){const visitTrendCanvas=document.getElementById("visitTrendChart");const ctx=visitTrendCanvas.getContext("2d");const vitalSignsData=visitKeys.map(visitKey=>{const visitData=visitDetails[visitKey];return{date:formatDate(visitData.timestamp),temperature:visitData.temperature,bp:visitData.bp,rr:visitData.rr,hr:visitData.hr,sp02:visitData.sp02,wt:visitData.wt,ht:visitData.ht,bmi:visitData.bmi,muac:visitData.muac}});const dates=vitalSignsData.map(data=>data.date);const temperatures=vitalSignsData.map(data=>data.temperature);const respiratoryRates=vitalSignsData.map(data=>data.rr);const heartRates=vitalSignsData.map(data=>data.hr);const spO2Values=vitalSignsData.map(data=>data.sp02);const weightValues=vitalSignsData.map(data=>data.wt);destroyChart();temperatures.reverse();respiratoryRates.reverse();heartRates.reverse();spO2Values.reverse();weightValues.reverse();const{trendAnalysis}=analyzeAndProvideRecommendations(temperatures,respiratoryRates,heartRates,spO2Values,vitalSignsData);window.visitTrendChart=new Chart(ctx,{type:"line",data:{labels:dates.reverse(),datasets:[{label:"Temperature (&deg;C)",data:temperatures,borderColor:"red",fill:false},{label:"Respiratory Rate",data:respiratoryRates,borderColor:"green",fill:false},{label:"Heart Rate",data:heartRates,borderColor:"purple",fill:false},{label:"SpO2 (%)",data:spO2Values,borderColor:"orange",fill:false},{label:"Weight (kg)",data:weightValues,borderColor:"blue",fill:false}]},options:{responsive:true,scales:{x:{display:true,title:{display:true,text:"Date"}},y:{display:true,title:{display:true,text:"Value"}}}}});const trendAnalysisDiv=document.getElementById("trendAnalysisDiv");trendAnalysisDiv.innerHTML=`
    <h3>Trend Analysis:</h3>
    <p>${trendAnalysis}</p>

  `}function displayVisitsPopup(patientName){const visitsRef=ref(database,`patients/${patientName}/visits`);const tableBody=document.getElementById("tableBody");const visitTrendCanvas=document.getElementById("visitTrendChart");tableBody.innerHTML="";visitTrendCanvas.getContext("2d").clearRect(0,0,visitTrendCanvas.width,visitTrendCanvas.height);onValue(visitsRef,snapshot=>{const visitDetails=snapshot.val();if(visitDetails){const visitKeys=Object.keys(visitDetails);visitKeys.sort((a,b)=>visitDetails[b].timestamp-visitDetails[a].timestamp);visitKeys.forEach(visitKey=>{const visitData=visitDetails[visitKey];const row=document.createElement("tr");row.innerHTML=`
          <td>${formatDate(visitData.timestamp)}</td>
          <td>${visitData.clinicianName}</td>
          <td>${visitData.temperature} &deg;C</td>
          <td>${visitData.bp}</td>
          <td>${visitData.rr}</td>
          <td>${visitData.hr}</td>
          <td>${visitData.sp02}</td>
          <td>${visitData.wt}</td>
          <td>${visitData.ht}</td>
          <td>${visitData.bmi}</td>
          <td>${visitData.muac}</td>
          <td>${visitData.weightForAgeZScore}</td>
          <td>${visitData.disability}</td>
          <td>${visitData.chronicIllness}</td>
          <td>${visitData.drugAbuse}</td>
          <td>${visitData.allergies.join(", ")}</td>
        `;tableBody.appendChild(row)});createVisitTrendChart(visitKeys,visitDetails)}else{const noVisitsRow=document.createElement("tr");noVisitsRow.innerHTML='<td colspan="17">No visit details found.</td>';tableBody.appendChild(noVisitsRow)}});const popupOverlay=document.getElementById("popup-overlay4");popupOverlay.style.display="block"}function formatDate(timestamp){const date=new Date(timestamp);const options={year:"numeric",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"};return date.toLocaleString("en-US",options)}const triageButton=document.getElementById("triageButton");triageButton.addEventListener("click",()=>{displayVisitsPopup(patientName)});function createRecordElement(recordKey,record){const recordElement=document.createElement("div");recordElement.classList.add("record");const recordKeyElement=document.createElement("h4");recordKeyElement.textContent="Record Key: "+recordKey;recordElement.appendChild(recordKeyElement);const dateTakenElement=document.createElement("p");const dateTaken=new Date(parseInt(record.dateTaken));if(!isNaN(dateTaken.getTime())){dateTakenElement.textContent="Date Taken: "+dateTaken.toLocaleString()}else{dateTakenElement.textContent="Invalid Date"}recordElement.appendChild(dateTakenElement);const testsTakenElement=document.createElement("p");testsTakenElement.textContent="Tests Taken: "+record.testsTaken;recordElement.appendChild(testsTakenElement);const pricesData={};const uploadPricesButton=document.createElement("button");uploadPricesButton.textContent=" + Prices";uploadPricesButton.classList.add("upload-prices-button");uploadPricesButton.addEventListener("click",()=>{const recordKey=recordKeyElement.textContent.replace("Record Key: ","");const overlay=document.createElement("div");overlay.classList.add("overlay3");const popup=document.createElement("div");popup.classList.add("popup3");const closeButton=document.createElement("button");closeButton.textContent="X";closeButton.classList.add("close-button");const heading=document.createElement("h2");heading.textContent="Upload Medical Consumables & Sundries Prices";popup.appendChild(closeButton);popup.appendChild(heading);const pricesForm=document.createElement("form");pricesForm.id="pricesForm";const consumablesLabel=document.createElement("label");consumablesLabel.textContent="Consumables Price (UGX):";const consumablesInput=document.createElement("input");consumablesInput.type="number";consumablesInput.name="consumablesPrice";consumablesInput.required=true;consumablesLabel.appendChild(consumablesInput);const sundriesLabel=document.createElement("label");sundriesLabel.textContent="Sundries Price (UGX):";const sundriesInput=document.createElement("input");sundriesInput.type="number";sundriesInput.name="sundriesPrice";sundriesInput.required=true;sundriesLabel.appendChild(sundriesInput);const submitButton=document.createElement("button");submitButton.type="submit";submitButton.textContent="Upload";submitButton.classList.add("upload-button");pricesForm.appendChild(consumablesLabel);pricesForm.appendChild(sundriesLabel);pricesForm.appendChild(submitButton);popup.appendChild(pricesForm);document.body.appendChild(overlay);document.body.appendChild(popup);overlay.style.display="block";popup.style.display="block";closeButton.addEventListener("click",()=>{overlay.style.display="none";popup.style.display="none"});pricesForm.addEventListener("submit",event=>{event.preventDefault();const formData=new FormData(pricesForm);const consumablesPrice=formData.get("consumablesPrice");const sundriesPrice=formData.get("sundriesPrice");saveConsumablesAndSundriesData(recordKey,consumablesPrice,sundriesPrice);overlay.style.display="none";popup.style.display="none"})});function saveConsumablesAndSundriesData(recordKey,consumablesPrice,sundriesPrice){const data={consumablesPrice:parseFloat(consumablesPrice),sundriesPrice:parseFloat(sundriesPrice),dateUploaded:(new Date).toLocaleString()};const testRecordRef=ref(database,`patients/${patient.patientId}/testsTaken/${recordKey}`);update(testRecordRef,{consumablesAndSundries:data}).then(()=>{showMessage("Consumables and Sundries data saved successfully!")}).catch(error=>{console.error("Error saving consumables and sundries data:",error);showMessage("Error saving consumables and sundries data. Please try again.")})}const paymentStatusElement=document.createElement("p");paymentStatusElement.textContent="Test Payment: "+(record.paymentstatus||"Not Paid");paymentStatusElement.classList.add("payment-status");recordElement.appendChild(paymentStatusElement);if(record.paymentstatus!=="payment received"){paymentStatusElement.style.color="red";const approveButton=document.createElement("button");approveButton.classList.add("approve-button");const checkIcon=document.createElement("i");checkIcon.classList.add("fas","fa-check-circle");approveButton.innerHTML="";approveButton.appendChild(checkIcon);approveButton.innerHTML+=" Approve test payment";approveButton.addEventListener("click",()=>{const paymentStatusRef=ref(database,`patients/${patientName}/testsTaken/${recordKey}/paymentstatus`);set(paymentStatusRef,"payment received").then(()=>{showMessage("Payment status updated successfully!");console.log("Payment status updated successfully.")}).catch(error=>{console.error("Error updating payment status:",error);showMessage("Error updating payment status:",error)})});recordElement.appendChild(approveButton)}else{paymentStatusElement.style.color="blue"}const resultsObtainedElement=document.createElement("p");resultsObtainedElement.textContent="Test Results status: "+(record.results?.resultsObtained||"Pending...");resultsObtainedElement.classList.add("results-obtained-data");if(record.results&&record.results.resultsObtained==="Completed Successfully"){resultsObtainedElement.style.color="darkblue"}else{resultsObtainedElement.style.color="orange"}recordElement.appendChild(resultsObtainedElement);const followUp=document.createElement("th");followUp.textContent="Follow Up date & time";recordElement.appendChild(followUp);const followUpData=document.createElement("td");followUpData.textContent=record.results?.followUpDateTime||"none";recordElement.appendChild(followUpData);const finalStatusHeader=document.createElement("th");finalStatusHeader.textContent="Final Status of Patient";recordElement.appendChild(finalStatusHeader);const finalStatusData=document.createElement("td");finalStatusData.textContent=record.results?.finalStatus||"Pending...";recordElement.appendChild(finalStatusData);const consumablesRow=document.createElement("tr");recordElement.appendChild(consumablesRow);const consumablesPriceHeader=document.createElement("th");consumablesPriceHeader.textContent="Consumables Price (UGX)";consumablesPriceHeader.style.color="blue";consumablesPriceHeader.style.fontWeight="bold";consumablesRow.appendChild(consumablesPriceHeader);if(record.hasOwnProperty("consumablesAndSundries")){const consumablesPriceData=record.consumablesAndSundries.consumablesPrice.toLocaleString("en-US",{style:"currency",currency:"UGX"});const consumablesPriceDataCell=document.createElement("td");consumablesPriceDataCell.textContent=consumablesPriceData;consumablesPriceDataCell.style.color="green";consumablesPriceDataCell.style.fontWeight="bold";consumablesRow.appendChild(consumablesPriceDataCell)}else{const noConsumablesDataCell=document.createElement("td");noConsumablesDataCell.textContent="Not Found";noConsumablesDataCell.style.color="red";noConsumablesDataCell.style.fontWeight="bold";consumablesRow.appendChild(noConsumablesDataCell)}const sundriesRow=document.createElement("tr");recordElement.appendChild(sundriesRow);const sundriesPriceHeader=document.createElement("th");sundriesPriceHeader.textContent="Sundries Price (UGX)";sundriesPriceHeader.style.color="blue";sundriesRow.appendChild(sundriesPriceHeader);if(record.hasOwnProperty("consumablesAndSundries")){const sundriesPriceData=record.consumablesAndSundries.sundriesPrice.toLocaleString("en-US",{style:"currency",currency:"UGX"});const sundriesPriceDataCell=document.createElement("td");sundriesPriceDataCell.style.color="green";sundriesPriceDataCell.style.fontWeight="bold";sundriesPriceDataCell.textContent=sundriesPriceData;sundriesRow.appendChild(sundriesPriceDataCell)}else{const noSundriesDataCell=document.createElement("td");noSundriesDataCell.textContent="Not Found";noSundriesDataCell.textContent="Not Found";noSundriesDataCell.style.color="red";noSundriesDataCell.style.fontWeight="bold";sundriesRow.appendChild(noSundriesDataCell)}const treatmentTotalRow=document.createElement("tr");recordElement.appendChild(treatmentTotalRow);const totalHeader=document.createElement("th");totalHeader.textContent="Treatment Total (UGX)";treatmentTotalRow.appendChild(totalHeader);if(record.hasOwnProperty("consumablesAndSundries")){const consumablesPrice=record.consumablesAndSundries.consumablesPrice;const sundriesPrice=record.consumablesAndSundries.sundriesPrice;const treatmentTotal=consumablesPrice+sundriesPrice;const totalDataCell=document.createElement("td");totalDataCell.textContent=treatmentTotal.toLocaleString("en-US",{style:"currency",currency:"UGX"});treatmentTotalRow.appendChild(totalDataCell)}else{const noTotalDataCell=document.createElement("td");noTotalDataCell.textContent="Not Found";treatmentTotalRow.appendChild(noTotalDataCell)}const medicationTakenElement=document.createElement("div");medicationTakenElement.classList.add("medication-taken");const medicationTable=document.createElement("table");medicationTable.classList.add("medication-table");const medicationTableData=[];const tableHeaderRow=document.createElement("tr");const headers=["Medication","Prescription","Milligrams","Total Cost"];headers.forEach(headerText=>{const tableHeaderCell=document.createElement("th");tableHeaderCell.textContent=headerText;tableHeaderRow.appendChild(tableHeaderCell)});medicationTable.appendChild(tableHeaderRow);let totalCost=0;if(record.results&&record.results.medication){const medicationNodes=record.results.medication;Object.keys(medicationNodes).forEach(medicationKey=>{const medicationData=medicationNodes[medicationKey];const rowData={medication:medicationData.medication,prescription:medicationData.prescription,grams:medicationData.grams,totalCost:medicationData.totalCost};medicationTableData.push(rowData);const tableRow=document.createElement("tr");const medicationCell=document.createElement("td");medicationCell.textContent=medicationData.medication;const prescriptionCell=document.createElement("td");prescriptionCell.textContent=medicationData.prescription;const gramsCell=document.createElement("td");gramsCell.textContent=medicationData.grams;const totalCostCell=document.createElement("td");totalCostCell.textContent=medicationData.totalCost;tableRow.appendChild(medicationCell);tableRow.appendChild(prescriptionCell);tableRow.appendChild(gramsCell);tableRow.appendChild(totalCostCell);medicationTable.appendChild(tableRow);totalCost+=parseFloat(medicationData.totalCost)})}medicationTakenElement.appendChild(medicationTable);recordElement.appendChild(medicationTakenElement);const totalRow=document.createElement("tr");medicationTable.appendChild(totalRow);const emptyCell=document.createElement("td");emptyCell.setAttribute("colspan","3");totalRow.appendChild(emptyCell);const totalCostCell=document.createElement("td");totalCostCell.textContent="Medicine Total: "+totalCost.toLocaleString("en-US",{style:"currency",currency:"UGX"});totalCostCell.classList.add("total-cell");totalRow.appendChild(totalCostCell);const medicineStatusElement=document.createElement("p");medicineStatusElement.textContent="Medicine Payment: "+(record.medicinestatus||"Not Paid");medicineStatusElement.classList.add("payment-status");recordElement.appendChild(medicineStatusElement);if(record.medicinestatus!=="payment received"){medicineStatusElement.style.color="red";const approve2Button=document.createElement("button");approve2Button.classList.add("approve-button");const checkIcon=document.createElement("i");checkIcon.classList.add("fas","fa-check-circle");approve2Button.innerHTML="";approve2Button.appendChild(checkIcon);approve2Button.innerHTML+=" Approve medicine payment";approve2Button.addEventListener("click",()=>{const medicineStatusRef=ref(database,`patients/${patientName}/testsTaken/${recordKey}/medicinestatus`);set(medicineStatusRef,"payment received").then(()=>{showMessage("Payment status updated successfully!");console.log("Payment status updated successfully.")}).catch(error=>{console.error("Error updating payment status:",error);showMessage("Error updating payment status:",error)})});recordElement.appendChild(approve2Button)}else{medicineStatusElement.style.color="blue"}const additionalNotesElement=document.createElement("p");additionalNotesElement.textContent="Diagnosis: "+(record.results?.additionalNotes||"Pending...");if(record.results&&!record.results.additionalNotes){additionalNotesElement.classList.add("pending")}recordElement.appendChild(additionalNotesElement);recordElement.appendChild(uploadPricesButton);const shareButton=document.createElement("button");shareButton.id="shareButton";shareButton.innerHTML='<i class="fa fa-paper-plane"></i> Lab Request';shareButton.addEventListener("click",()=>{shareRecord(patient,record)});recordElement.appendChild(shareButton);const whatsappShareButton=document.createElement("button");whatsappShareButton.id="whatsappShareButton";whatsappShareButton.innerHTML='<i class="fa fa-whatsapp"></i> Results';whatsappShareButton.addEventListener("click",()=>{const patientName=patient.patientId;const recordKey=recordKeyElement.textContent.replace("Record Key: ","");const testRef=ref(database,`patients/${patientName}/testsTaken/${recordKey}`);get(testRef).then(snapshot=>{const testData=snapshot.val();if(testData&&testData.resultFileURL){const patientPhoneNumber=patient.parents;const fileURL=testData.resultFileURL;const message=generateWhatsAppMessage(fileURL);const whatsappURL=`https://api.whatsapp.com/send?phone=${patientPhoneNumber}&text=${encodeURIComponent(message)}`;window.open(whatsappURL,"_blank")}else{showMessage("No results file available.")}}).catch(error=>{console.error("Error retrieving file URL:",error);showMessage("Error retrieving file URL. Please try again.")})});function generateWhatsAppMessage(fileURL){const patientName=patient.name;const hospitalName="Sanyu Hospital";const contactNumber="+256 708 657 717";const message=`Hello ${patientName},\n\nThis is ${hospitalName}. We are pleased to share your latest medical results with you. Please click on the link below to access your results:\n\n${fileURL}\n\nFor any questions or assistance, feel free to contact us at ${contactNumber}.\n\nThank you for choosing ${hospitalName} for your healthcare needs. We value your trust and are here to assist you with any medical concerns.\n\nBest regards,\n${hospitalName}`;return message}function shareRecord(patient,record){const patientId=patient.patientId;const patientName=patient.name;const testKey=recordKey;const message=`New Test ${testKey} for patient ${patientName} PI - ${patientId} to be done.`;const notification={timestamp:Date.now(),message:message};const chatRef=ref(database,"laboratory-requests");push(chatRef,notification).then(()=>{console.log("Notification sent successfully!");showMessage("Notification sent successfully!")}).catch(error=>{console.error("Error sending notification:",error);showMessage("Error sending notification:",error)})}let visitKeys=[];let visitDetails={};function displayPatientVisitDetails(visitKeys,visitDetails,latestVisitData){const patientVisitDetailsDiv=document.getElementById("patientVisitDetails");patientVisitDetailsDiv.innerHTML="";if(latestVisitData){const visitCount=visitKeys.length;const visitCountElement=document.getElementById("visitCount");visitCountElement.textContent=visitCount;const visitElement=document.createElement("div");visitElement.innerHTML=`
    <h3>LATEST VISIT TRIAGE:</h3>
    <div class="visit-details-container">
      <p><b>Date:</b> ${formatDate(latestVisitData.timestamp)}</p>
      <p><b>Clinician's Name:</b> ${latestVisitData.clinicianName||"N/D"}</p>
      <p><b>Temperature:</b> ${latestVisitData.temperature||"N/D"} &deg;C</p>
      <p><b>BP:</b> ${latestVisitData.bp||"N/D"} (mmHg)</p>
      <p><b>RR:</b> ${latestVisitData.rr||"N/D"}</p>
      <p><b>HR:</b> ${latestVisitData.hr||"N/D"}</p>
      <p><b>SpO2:</b> ${latestVisitData.sp02||"N/D"} (%)</p>
      <p><b>WT:</b> ${latestVisitData.wt||"N/D"} (Kg)</p>
      <p><b>HT:</b> ${latestVisitData.ht||"N/D"} (Cm)</p>
      <p><b>BMI:</b> ${latestVisitData.bmi||"N/D"}</p>
      <p><b>MUAC:</b> ${latestVisitData.muac||"N/D"}</p>
      <p><b>Weight for Age Z score:</b> ${latestVisitData.weightForAgeZScore||"N/D"} (Kg)</p>
      <p><b>Disability:</b> ${latestVisitData.disability||"N/D"}</p>
      <p><b>Known Chronic Illness:</b> ${latestVisitData.chronicIllness||"N/D"}</p>
      <p><b>Any Drug Abuse:</b> ${latestVisitData.drugAbuse||"N/D"}</p>
      <p><b>Allergies:</b> ${latestVisitData.allergies&&latestVisitData.allergies.length>0?latestVisitData.allergies.join(", "):"N/D"}
      </p>
    </div>
    <hr>
    `;patientVisitDetailsDiv.appendChild(visitElement)}else{patientVisitDetailsDiv.textContent="No visit details found.";patientVisitDetailsDiv.style.fontStyle="italic"}}function getPatientDetails(patientName){const patientRef=ref(database,`patients/${patientName}`);return get(patientRef).then(snapshot=>{if(snapshot.exists()){return snapshot.val()}else{return null}}).catch(error=>{console.error("Error fetching patient details:",error);return null})}function getLatestVisitData(patientName){const visitsRef=ref(database,`patients/${patientName}/visits`);return get(visitsRef).then(snapshot=>{const visitDetails=snapshot.val();if(visitDetails){const visitKeys=Object.keys(visitDetails).sort((a,b)=>visitDetails[b].timestamp-visitDetails[a].timestamp);const latestVisitKey=visitKeys[0];const latestVisitData=visitDetails[latestVisitKey];return latestVisitData}else{return null}}).catch(error=>{console.error("Error fetching latest visit data:",error);return null})}function getPatientVisitDetails(patientName){const visitsRef=ref(database,`patients/${patientName}/visits`);onValue(visitsRef,snapshot=>{const visitDetails=snapshot.val();if(visitDetails){visitKeys=Object.keys(visitDetails).sort((a,b)=>visitDetails[b].timestamp-visitDetails[a].timestamp);const latestVisitKey=visitKeys[0];const latestVisitData=visitDetails[latestVisitKey];displayPatientVisitDetails(visitKeys,visitDetails,latestVisitData);createVisitTrendChart(visitKeys,visitDetails)}else{displayPatientVisitDetails([],{});createVisitTrendChart([],{})}})}getPatientVisitDetails(patientName);const signaturePopup=document.getElementById("signaturePopup");let signatureData;const printButton=document.createElement("button");printButton.innerHTML='<i class="fa fa-print"></i> Print Record';printButton.classList.add("print-button");const overlay2=document.getElementById("overlay2");const signatureCanvas=document.getElementById("signatureCanvas");const signaturePad=new SignaturePad(signatureCanvas,{});const saveSignatureButton=document.getElementById("saveSignature");const closeSignatureButton=document.getElementById("closeSignaturePopup");saveSignatureButton.addEventListener("click",()=>{signatureData=signaturePad.toDataURL();if(signatureData){signaturePopup.style.display="none";overlay2.style.display="none"}else{alert("Please provide a signature before saving.")}});const clearSignatureButton=document.getElementById("clearSignature");clearSignatureButton.addEventListener("click",()=>{signaturePad.clear()});closeSignatureButton.addEventListener("click",()=>{signaturePad.clear();signaturePopup.style.display="none";overlay2.style.display="none"});printButton.addEventListener("click",async()=>{const patient=await getPatientDetails(patientName);const latestVisitData=await getLatestVisitData(patientName);overlay2.style.display="block";signaturePopup.style.display="block";if(signatureData){console.log("Latest Visit Data for Printing:",latestVisitData);printRecord(patient,record,visitKeys,visitDetails,latestVisitData)}else{alert("Please provide a signature before printing.")}});recordElement.appendChild(printButton);async function openSignaturePopup(){overlay2.style.display="block";signaturePopup.style.display="block"}recordElement.appendChild(printButton);const whatsappMedicalFormButton=document.createElement("button");whatsappMedicalFormButton.id="whatsappMedicalFormButton";whatsappMedicalFormButton.innerHTML='<i class="fa fa-whatsapp"></i>Medical Form';whatsappMedicalFormButton.addEventListener("click",()=>{const patientPhoneNumber=patient.parents;const latestVisitData=generateLatestVisitDetailsFromDisplay();const message=generateMedicalFormWhatsAppMessage(patient,latestVisitData,medicationTableData,testsTakenElement,paymentStatusElement,resultsObtainedElement,followUpData,consumablesRow,sundriesRow,treatmentTotalRow);const whatsappURL=`https://wa.me/${patientPhoneNumber}?text=${encodeURIComponent(message)}`;window.open(whatsappURL,"_blank")});recordElement.appendChild(whatsappMedicalFormButton);function generateMedicalFormWhatsAppMessage(patient,latestVisitData,medicationTableData,testsTakenElement,paymentStatusElement,resultsObtainedElement,followUpData,consumablesRow,sundriesRow,treatmentTotalRow){const patientName=patient.name;const latestVisitDetails=generateLatestVisitDetailsFromDisplay(latestVisitData);const medicationDetails=generateMedicationDetails(medicationTableData);const testsTaken=`Tests Taken: ${testsTakenElement.textContent}`;const paymentStatus=`Test Payment: ${paymentStatusElement.textContent}`;const resultsObtained=`Test Results Status: ${resultsObtainedElement.textContent}`;const followUp=`Follow Up Date & Time: ${followUpData.textContent}`;const consumablesPrice=`Consumables Price (UGX): ${consumablesRow.lastChild.textContent}`;const sundriesPrice=`Sundries Price (UGX): ${sundriesRow.lastChild.textContent}`;const treatmentTotal=`Treatment Total (UGX): ${treatmentTotalRow.lastChild.textContent}`;const message=`Hello ${patientName},\n\nMedical Form Details:\n${latestVisitDetails}\n\nMedication Details:\n${medicationDetails}\n\nAdditional Details:\n${testsTaken}\n${paymentStatus}\n${resultsObtained}\n${followUp}\n${consumablesPrice}\n${sundriesPrice}\n${treatmentTotal}\n\nThank you for choosing our healthcare services. If you have any questions or need further assistance, please feel free to contact us.`;return message}function generateLatestVisitDetails(latestVisitData){if(latestVisitData){const date=formatDate(latestVisitData.timestamp);const clinicianName=latestVisitData.clinicianName||"N/D";const temperature=latestVisitData.temperature||"N/D";const bp=latestVisitData.bp||"N/D";return`Date: ${date}\nClinician's Name: ${clinicianName}\nTemperature: ${temperature}\nBP: ${bp}\n`}else{return"Latest visit data not available."}}function generateMedicationDetails(medicationTableData){if(medicationTableData.length>0){const details=medicationTableData.map(medication=>{const medicationName=medication.medication;const prescription=medication.prescription;const grams=medication.grams;return`${medicationName}: Prescription - ${prescription}, Milligrams - ${grams}`});return details.join("\n")}else{return"No medication details available."}}function generateLatestVisitDetailsFromDisplay(){const visitDetailsContainer=document.querySelector(".visit-details-container");const date=visitDetailsContainer.querySelector("p:nth-child(1)").textContent;const clinicianName=visitDetailsContainer.querySelector("p:nth-child(2)").textContent;const temperature=visitDetailsContainer.querySelector("p:nth-child(3)").textContent;const bp=visitDetailsContainer.querySelector("p:nth-child(4)").textContent;const rr=visitDetailsContainer.querySelector("p:nth-child(5)").textContent;const hr=visitDetailsContainer.querySelector("p:nth-child(6)").textContent;const sp02=visitDetailsContainer.querySelector("p:nth-child(7)").textContent;const wt=visitDetailsContainer.querySelector("p:nth-child(8)").textContent;const ht=visitDetailsContainer.querySelector("p:nth-child(9)").textContent;const bmi=visitDetailsContainer.querySelector("p:nth-child(10)").textContent;const muac=visitDetailsContainer.querySelector("p:nth-child(11)").textContent;const weightForAgeZScore=visitDetailsContainer.querySelector("p:nth-child(12)").textContent;const disability=visitDetailsContainer.querySelector("p:nth-child(13)").textContent;const chronicIllness=visitDetailsContainer.querySelector("p:nth-child(14)").textContent;const drugAbuse=visitDetailsContainer.querySelector("p:nth-child(15)").textContent;const allergies=visitDetailsContainer.querySelector("p:nth-child(16)").textContent;return`${date}\n${clinicianName}\n${temperature}\n${bp}\n${rr}\n${hr}\n${sp02}\n${wt}\n${ht}\n${bmi}\n${muac}\n${weightForAgeZScore}\n${disability}\n${chronicIllness}\n${drugAbuse}\n${allergies}`}function printRecord(patient,record,visitKeys,visitDetails,latestVisitData){window.jsPDF=window.jspdf.jsPDF;const doc=new jsPDF;doc.setFontSize(20);const hospitalLogo="sanyu.png";const headerBoxX=20;const headerBoxY=10;const headerBoxWidth=170;const headerBoxHeight=40;doc.setFillColor(255,255,255);doc.rect(headerBoxX,headerBoxY,headerBoxWidth,headerBoxHeight,"F");const headerBoxCenterX=headerBoxX+headerBoxWidth/2;const headerBoxCenterY=headerBoxY+headerBoxHeight/2;doc.addImage(hospitalLogo,"PNG",headerBoxX-10,headerBoxY-5,55,55);const hospitalName="SANYU HOSPITAL";const hospitalNameWidth=doc.getTextWidth(hospitalName);const hospitalNameY=headerBoxCenterY-5;doc.setFont("helvetica","bold");doc.setFontSize(28);doc.setTextColor(0,0,0);doc.text(hospitalName,headerBoxCenterX,hospitalNameY,{align:"center"});const hospitalAddress="Located at Katooke-Wakiso District";const hospitalAddressY=headerBoxCenterY+6;doc.setFont("helvetica","normal");doc.setFontSize(12);doc.text(hospitalAddress,headerBoxCenterX,hospitalAddressY,{align:"center"});const telephoneContacts="Tel: +256 708 657 717, Email: sanyuhospital@gmail.com";const telephoneContactsY=headerBoxCenterY+15;doc.setFont("helvetica","normal");doc.setFontSize(10);doc.text(telephoneContacts,headerBoxCenterX,telephoneContactsY,{align:"center"});doc.setFont("helvetica","normal");doc.setFont("helvetica","bold");doc.setFontSize(13);const reportHeading="LABORATORY REPORT";const reportHeadingWidth=doc.getTextWidth(reportHeading);const reportHeadingX=(doc.internal.pageSize.getWidth()-reportHeadingWidth)/2;const reportHeadingY=headerBoxY+headerBoxHeight+10;doc.text(reportHeading,reportHeadingX,reportHeadingY);doc.setFont("helvetica","normal");doc.setFontSize(12);const patientDetails=[["Patient Name",patient.name,""+recordKey],["Date of Birth",patient.dob,""+dateTakenElement.textContent],["Payment Type",patient.payment,""+testsTakenElement.textContent],["Residence",patient.residence,""+paymentStatusElement.textContent],["Contact",patient.parents,""+resultsObtainedElement.textContent],["Patient ID",patient.patientId,""+additionalNotesElement.textContent]];const patientTableX=20;const patientTableY=reportHeadingY+5;const patientTableOptions={startX:patientTableX,startY:patientTableY,margin:{top:8},styles:{font:"helvetica",fontStyle:"normal",fontSize:8},headStyles:{fillColor:[0,128,0],fontStyle:"bold"},bodyStyles:{fillColor:255},columnStyles:{0:{cellWidth:55},1:{cellWidth:55},2:{cellWidth:70}}};doc.autoTable({head:[["Field","Value","Test Details"]],body:patientDetails,...patientTableOptions});doc.setFont("helvetica","bold");doc.setFontSize(16);const latestVisitHeading="LATEST VISIT TRIAGE";const latestVisitHeadingWidth=doc.getTextWidth(latestVisitHeading);const latestVisitHeadingX=(doc.internal.pageSize.getWidth()-latestVisitHeadingWidth)/2;const latestVisitHeadingY=patientTableY+65;doc.text(latestVisitHeading,latestVisitHeadingX,latestVisitHeadingY);doc.setFont("helvetica","normal");doc.setFontSize(8);const latestVisitTableX=20;const latestVisitTableY=latestVisitHeadingY+5;const latestVisitTableOptions={startX:latestVisitTableX,startY:latestVisitTableY,margin:{top:8},styles:{font:"helvetica",fontStyle:"normal",fontSize:7},headStyles:{fillColor:[0,128,0],fontStyle:"bold"},bodyStyles:{fillColor:255},columnStyles:{0:{cellWidth:45},1:{cellWidth:45},2:{cellWidth:45},3:{cellWidth:45}}};const latestVisitDetails=[];if(latestVisitData){latestVisitDetails.push(["Date",formatDate(latestVisitData.timestamp),"Clinician's Name",latestVisitData.clinicianName||"N/D"],["Temperature",latestVisitData.temperature||"N/D","BP",latestVisitData.bp||"N/D"],["RR",latestVisitData.rr||"N/D","HR",latestVisitData.hr||"N/D"],["SpO2",latestVisitData.sp02||"N/D","WT",latestVisitData.wt||"N/D"],["HT",latestVisitData.ht||"N/D","BMI",latestVisitData.bmi||"N/D"],["MUAC",latestVisitData.muac||"N/D","Weight for Age Z score",latestVisitData.weightForAgeZScore||"N/D"],["Disability",latestVisitData.disability||"N/D","Known Chronic Illness",latestVisitData.chronicIllness||"N/D"],["Any Drug Abuse",latestVisitData.drugAbuse||"N/D","Allergies",latestVisitData.allergies&&latestVisitData.allergies.length>0?latestVisitData.allergies.join(", "):"N/D"])}else{latestVisitDetails.push(["Date","N/A","Clinician's Name","N/A"],["Temperature","N/A","BP","N/A"],["RR","N/A","HR","N/A"],["SpO2","N/A","WT","N/A"],["HT","N/A","BMI","N/A"],["MUAC","N/A","Weight for Age Z score","N/A"],["Disability","N/A","Known Chronic Illness","N/A"],["Any Drug Abuse","N/A","Allergies","N/A"])}doc.autoTable({head:[["Field","Value","Field","Value"]],body:latestVisitDetails,...latestVisitTableOptions});const medicationTableData=[];const medicationRows=medicationTable.querySelectorAll("tr");for(let i=1;i<medicationRows.length;i++){const cells=medicationRows[i].querySelectorAll("td");if(cells.length===4){const medication=cells[0].textContent;const prescription=cells[1].textContent;const grams=cells[2].textContent;medicationTableData.push([medication,prescription,grams])}}doc.autoTable({startY:200,head:[["Medication","Prescription","Milligrams"]],body:medicationTableData,theme:"grid",styles:{fontSize:8,cellPadding:1.3,lineColor:[0,0,0],lineWidth:.1},columnStyles:{0:{cellWidth:50},1:{cellWidth:50},2:{cellWidth:40}}});const signatureLabelX=20;const signatureLabelY=doc.internal.pageSize.getHeight()-20;doc.setFont("helvetica","normal");doc.setFontSize(12);doc.text("Doctor's Signature:",signatureLabelX,signatureLabelY,{align:"left"});if(signatureData){const signatureImage=new Image;signatureImage.src=signatureData;const signatureImageX=50;const signatureImageY=doc.internal.pageSize.getHeight()-30;doc.addImage(signatureImage,"PNG",signatureImageX,signatureImageY,45,20)}doc.autoPrint();doc.output("dataurlnewwindow")}const printInvoiceButton=document.createElement("button");printInvoiceButton.textContent="Print TI";printInvoiceButton.classList.add("button","print-invoice-button");const invoiceIcon=document.createElement("i");invoiceIcon.classList.add("fas","fa-file-invoice");printInvoiceButton.appendChild(invoiceIcon);printInvoiceButton.addEventListener("click",()=>{printTestInvoice(patient.name,patient.patientId,recordKey,record.testsTaken,recordKey)});recordElement.appendChild(printInvoiceButton);function printTestInvoice(patientName,patientId,recordKey,testName){const invoiceNumber=generateInvoiceNumber(recordKey);const invoiceContent=`
  <div class="invoice">
    <div class="invoice-header">
      <h2>Sanyu Hospital</h2>
      <p>Katooke</p>
      <p>Wakiso District (Uganda)</p>
      <p>Phone: +256 708 657 717</p>
      <p>Email: sanyuhospital@gmail.com</p>
    </div>
    <div class="invoice-details">
      <h1>Test Invoice</h1>
      <p><strong>Invoice Ref:</strong> ${invoiceNumber}<p>
      <p><strong>Invoice Date:</strong> ${getCurrentDate()}</p>
      <p><strong>Patient Name:</strong> ${patientName}</p>
      <p><strong>Patient ID:</strong> ${patientId}</p>
      <p><strong>Test Name:</strong> ${testName}</p>
      <p><strong>Record Key:</strong> ${recordKey}</p>
    </div>
    <div class="watermark">
      <img src="sanyu.png" alt="Watermark" class="watermark-image">
    </div>
  </div>
`;const printWindow=window.open("","","width=600,height=600");printWindow.document.open();printWindow.document.write(`<style>${invoiceStyles}</style>`);printWindow.document.write(invoiceContent);printWindow.document.close();printWindow.print()}function generateInvoiceNumber(recordKey){return`${recordKey}`}function getCurrentDate(){const currentDate=new Date;const options={year:"numeric",month:"long",day:"numeric"};return currentDate.toLocaleDateString(undefined,options)}const invoiceStyles=`
  .invoice {
    font-family: Arial, sans-serif;
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    margin: 0 auto;
    padding: 20px;
    width: 80%;
  }

  .invoice-header {
    text-align: left;
  }

  .invoice-header h2 {
    font-size: 24px;
    margin: 0;
  }

  .invoice-header p {
    font-size: 16px;
    margin: 5px 0;
  }

  .invoice-details {
    text-align: right;
  }

  .invoice-details h1 {
    font-size: 28px;
  }

  .invoice-details p {
    font-size: 18px;
    margin: 5px 0;
  }
  /* Add styles for the watermark */
.watermark {
  position: absolute;
  top: 50%; /* Position at the vertical center of the receipt */
  left: 50%; /* Position at the horizontal center of the receipt */
  transform: translate(-50%, -50%); /* Center the watermark */
  z-index: -1; /* Place it behind the receipt content */
  opacity: 0.2; /* Adjust opacity to your preference */
}

.watermark-image {
  width: 100%; /* Make the watermark cover the entire receipt */
  height: auto;
}

`;const testSearchInput=document.getElementById("testSearch");testSearchInput.addEventListener("input",()=>{const searchTerm=testSearchInput.value.toLowerCase();const testRecordElements=document.querySelectorAll(".record");testRecordElements.forEach(recordElement=>{const recordKeyElement=recordElement.querySelector("h4");if(recordKeyElement){const recordKey=recordKeyElement.textContent.toLowerCase();if(recordKey.includes(searchTerm)){recordElement.style.display="block"}else{recordElement.style.display="none"}}})});recordElement.appendChild(whatsappShareButton);return recordElement}}const listPopupOverlay=document.getElementById("listPopupOverlay");let listMessage=null;function showNotification(message){if(Notification.permission==="granted"){const notification=new Notification("New waiting Request",{body:message});setTimeout(notification.close.bind(notification),9e3)}else if(Notification.permission!=="denied"){Notification.requestPermission().then(permission=>{if(permission==="granted"){showNotification(message)}})}}function retrieveAndDisplaylist(){const waitinglist=document.getElementById("waitinglist");waitinglist.innerHTML="";const chatRef=ref(database,"waiting-list");onValue(chatRef,snapshot=>{try{if(snapshot.exists()){let listCount=0;const notseen=document.getElementById("notseen");const seen=document.getElementById("seen");notseen.addEventListener("click",()=>{applyFilter("Not Yet Done")});seen.addEventListener("click",()=>{applyFilter("Completed")});function applyFilter(filter){const waitinglist=document.getElementById("waitinglist");const waitinglistItems=waitinglist.querySelectorAll("li");waitinglistItems.forEach(item=>{const status=item.getAttribute("data-status");if(status===filter||filter==="All"){item.style.display="block"}else{item.style.display="none"}});const filterButtons=document.querySelectorAll(".filter-button");filterButtons.forEach(button=>{if(button.textContent===filter){button.classList.add("active")}else{button.classList.remove("active")}})}const messages=[];snapshot.forEach(childSnapshot=>{const messageId=childSnapshot.key;const patient=childSnapshot.val().name;const status=childSnapshot.val().status||"Not Yet Done";const timestamp=childSnapshot.val().date||"";const listItem=document.createElement("li");listItem.id=messageId;listItem.setAttribute("data-status",status);const messageContent=document.createElement("span");messageContent.textContent=patient;listItem.appendChild(messageContent);const messageStatus=document.createElement("span");messageStatus.textContent=status+(timestamp?" - "+formatDate(timestamp):"");messageStatus.classList.add("time-status");listItem.appendChild(messageStatus);const markAsDoneBtn2=document.createElement("button");markAsDoneBtn2.textContent="Seen";markAsDoneBtn2.classList.add("button-done");markAsDoneBtn2.addEventListener("click",()=>{markpatientAsDone(messageId)});messages.unshift(listItem);if(status==="Not Yet Done"){listCount++;messageStatus.style.color="red";listMessage=name}else if(status==="Completed"){markAsDoneBtn2.style.display="none"}});messages.forEach(message=>{waitinglist.appendChild(message)});if(listMessage){showNotification(listMessage)}const listCountSpan=document.getElementById("listCount");listCountSpan.textContent=listCount}else{const listItem=document.createElement("li");listItem.textContent="No lab requests found.";waitinglist.appendChild(listItem)}}catch(error){console.error("Error retrieving lab requests:",error);showMessage("Error retrieving lab requests:",error)}})}const list=document.getElementById("list");let listListener;list.addEventListener("click",()=>{retrieveAndDisplaylist();openlistPopup()});document.addEventListener("DOMContentLoaded",()=>{retrieveAndDisplaylist()});function markpatientAsDone(messageId){const listRef=ref(database,`waiting-list/${messageId}`);update(listRef,{status:"Completed",timestamp:Date.now()}).then(()=>{console.log("Message marked as done successfully!");retrieveAndDisplaylist()}).catch(error=>{console.error("Error marking message as done:",error);showMessage("Error marking message as done:",error)})}function openlistPopup(){const listPopupOverlay=document.getElementById("listPopupOverlay");listPopupOverlay.style.display="block"}function closelistPopup(){const listPopupOverlay=document.getElementById("listPopupOverlay");listPopupOverlay.style.display="none"}const listPopupClose=document.getElementById("listPopupClose");listPopupClose.addEventListener("click",closelistPopup);window.addEventListener("click",event=>{const listPopupOverlay=document.getElementById("listPopupOverlay");if(event.target===listPopupOverlay){closelistPopup()}});const labRequestsPopupOverlay=document.getElementById("listPopupOverlay");let latestLabRequestMessage=null;const labResultShownMessages=new Set;function playLabResultNotificationSound(){const audio=new Audio("simple-notification-152054.mp3");audio.play()}function showLabResultNotification(message,messageId){if(!labResultShownMessages.has(messageId)){playLabResultNotificationSound();labResultShownMessages.add(messageId)}}const labResultMessagesCache=[];function retrieveAndDisplayLabRequests(){const labRequestsList=document.getElementById("labRequestsList");labRequestsList.innerHTML="";const chatRef=ref(database,"lab-results");onValue(chatRef,snapshot=>{try{if(snapshot.exists()){let notDoneCount=0;const messages=[];const notDoneBtn=document.getElementById("notDoneBtn");const completedBtn=document.getElementById("completedBtn");notDoneBtn.addEventListener("click",()=>{applyFilter("Not Yet Done")});completedBtn.addEventListener("click",()=>{applyFilter("Completed")});function applyFilter(filter){const labRequestsList=document.getElementById("labRequestsList");const labRequestItems=labRequestsList.querySelectorAll("li");labRequestItems.forEach(item=>{const status=item.getAttribute("data-status");if(status===filter||filter==="All"){item.style.display="block"}else{item.style.display="none"}});const filterButtons=document.querySelectorAll(".filter-button");filterButtons.forEach(button=>{if(button.textContent===filter){button.classList.add("active")}else{button.classList.remove("active")}})}snapshot.forEach(childSnapshot=>{const messageId=childSnapshot.key;if(!labResultMessagesCache.includes(messageId)){labResultMessagesCache.push(messageId);showLabResultNotification(childSnapshot.val().message,messageId)}const labRequest=childSnapshot.val().message;const status=childSnapshot.val().status||"Not Yet Done";const timestamp=childSnapshot.val().timestamp||"";const listItem=document.createElement("li");listItem.id=messageId;listItem.setAttribute("data-status",status);const messageContent=document.createElement("span");messageContent.textContent=labRequest;listItem.appendChild(messageContent);const messageStatus=document.createElement("span");messageStatus.textContent=status+(timestamp?" - "+formatDate(timestamp):"");messageStatus.classList.add("time-status");listItem.appendChild(messageStatus);const markAsDoneBtn=document.createElement("button");markAsDoneBtn.textContent="Clear";markAsDoneBtn.classList.add("button-done");markAsDoneBtn.addEventListener("click",()=>{markMessageAsDone(messageId)});listItem.appendChild(markAsDoneBtn);messages.unshift(listItem);if(status==="Not Yet Done"){notDoneCount++;messageStatus.style.color="red";latestLabRequestMessage=labRequest}else if(status==="Completed"){markAsDoneBtn.style.display="none"}});messages.forEach(message=>{labRequestsList.appendChild(message)});if(latestLabRequestMessage){showLabResultNotification(latestLabRequestMessage)}const notDoneCountSpan=document.getElementById("notDoneCount");notDoneCountSpan.textContent=notDoneCount}else{const noLabRequestsItem=document.createElement("li");noLabRequestsItem.textContent="No lab results found.";labRequestsList.appendChild(noLabRequestsItem)}}catch(error){console.error("Error retrieving lab results:",error);showMessage("Error retrieving lab results:",error)}})}const envelopeIcon=document.getElementById("envelope-icon");let labRequestsListener;envelopeIcon.addEventListener("click",()=>{retrieveAndDisplayLabRequests();openLabRequestsPopup()});document.addEventListener("DOMContentLoaded",()=>{retrieveAndDisplayLabRequests()});function markMessageAsDone(messageId){const messageRef=ref(database,`lab-results/${messageId}`);update(messageRef,{status:"Completed",timestamp:Date.now()}).then(()=>{console.log("Message marked as done successfully!");retrieveAndDisplayLabRequests()}).catch(error=>{console.error("Error marking message as done:",error);showMessage("Error marking message as done:",error)})}function openLabRequestsPopup(){const labRequestsPopupOverlay=document.getElementById("labRequestsPopupOverlay");labRequestsPopupOverlay.style.display="block"}function closeLabRequestsPopup(){const labRequestsPopupOverlay=document.getElementById("labRequestsPopupOverlay");labRequestsPopupOverlay.style.display="none"}const labRequestsPopupClose=document.getElementById("labRequestsPopupClose");labRequestsPopupClose.addEventListener("click",closeLabRequestsPopup);window.addEventListener("click",event=>{const labRequestsPopupOverlay=document.getElementById("labRequestsPopupOverlay");if(event.target===labRequestsPopupOverlay){closeLabRequestsPopup()}});const loaderElement=document.getElementById("loader");loaderElement.classList.remove("hidden");onValue(patientsRef,snapshot=>{const patientsData=snapshot.val();if(patientsData){patients=Object.values(patientsData);renderPatients(patients)}loaderElement.classList.add("hidden")});const calculateTotal=()=>{const medicationCost=parseFloat(medicationInput.selectedOptions[0].dataset.costPerGram);const gramsValue=parseFloat(gramsInput.value);const total=medicationCost*gramsValue;totalElement.textContent="Total: $"+total.toFixed(2)};const createMedicationInput=()=>{const medicationInputContainer=document.createElement("div");medicationInputContainer.classList.add("medication-input-container");const medicationLabel=document.createElement("label");medicationLabel.textContent="Medication:";medicationLabel.setAttribute("for","medicationInput");const medicationInput=document.createElement("select");medicationInput.required=true;medicationInput.classList.add("select2");const medicineRef=ref(database,"medicine");onValue(medicineRef,snapshot=>{const medicineData=snapshot.val();if(medicineData){Object.values(medicineData).forEach(medicine=>{const option=document.createElement("option");option.value=medicine.name;option.text=medicine.name;option.dataset.costPerGram=medicine.pricepergram;medicationInput.appendChild(option)})}});const prescriptionLabel=document.createElement("label");prescriptionLabel.textContent="Prescription:";prescriptionLabel.setAttribute("for","prescriptionInput");const prescriptionInput=document.createElement("select");prescriptionInput.required=true;const prescriptionsRef=ref(database,"prescriptions");onValue(prescriptionsRef,snapshot=>{const prescriptionsData=snapshot.val();prescriptionInput.innerHTML="";if(prescriptionsData){const prescriptions=Object.values(prescriptionsData);prescriptions.forEach(prescription=>{const option=document.createElement("option");option.value=prescription.prescription;option.text=prescription.prescription;prescriptionInput.appendChild(option)})}});const gramsLabel=document.createElement("label");gramsLabel.textContent="Milligrams:";gramsLabel.setAttribute("for","gramsInput");const gramsInput=document.createElement("input");gramsInput.type="number";gramsInput.step="any";gramsInput.placeholder="Milligrams";const costPerGramLabel=document.createElement("label");costPerGramLabel.textContent="Cost of Milligrams:";costPerGramLabel.setAttribute("for","costPerGramOutput");const costPerGramOutput=document.createElement("output");costPerGramOutput.classList.add("cost-per-gram-output");costPerGramOutput.value="";const deleteButton=document.createElement("button");deleteButton.classList.add("delete-medication-button");deleteButton.innerHTML='<i class="fa fa-trash"></i>';deleteButton.addEventListener("click",()=>{medicationInputContainer.remove()});gramsInput.addEventListener("input",()=>{const gramsValue=parseFloat(gramsInput.value);const selectedOption=medicationInput.options[medicationInput.selectedIndex];const costPerGram=parseFloat(selectedOption.dataset.costPerGram);const totalCost=gramsValue*costPerGram;costPerGramOutput.value=totalCost.toFixed(2)});medicationInputContainer.appendChild(medicationLabel);medicationInputContainer.appendChild(medicationInput);medicationInputContainer.appendChild(prescriptionLabel);medicationInputContainer.appendChild(prescriptionInput);medicationInputContainer.appendChild(gramsLabel);medicationInputContainer.appendChild(gramsInput);medicationInputContainer.appendChild(costPerGramLabel);medicationInputContainer.appendChild(costPerGramOutput);medicationInputContainer.appendChild(deleteButton);const submitMedicationButton=document.createElement("button");submitMedicationButton.type="button";submitMedicationButton.textContent="Submit Medication";submitMedicationButton.classList.add("submit-medication-button");submitMedicationButton.addEventListener("click",()=>{const medicationRecord={medication:medicationInput.value,prescription:prescriptionInput.value,grams:parseFloat(gramsInput.value),totalCost:parseFloat(costPerGramOutput.value.replace(/,/g,""))};const recordKeyInput=document.querySelector('input[name="recordKey"]');const recordKey=recordKeyInput.value;const patientRef=ref(database,`patients/${currentPatientName}/testsTaken/${recordKey}/results/medication`);const newRecordRef=push(patientRef);set(newRecordRef,medicationRecord).then(()=>{showMessage("Medication submitted successfully!")}).catch(error=>{console.error("Error submitting medication:",error);showMessage("Error submitting medication. Please try again.")})});medicationInputContainer.appendChild(submitMedicationButton);return medicationInputContainer};const addMedicationButton=document.getElementById("addMedicationButton");addMedicationButton.addEventListener("click",()=>{const medicationInput=createMedicationInput();const medicationContainer=document.getElementById("medication");medicationContainer.appendChild(medicationInput);$(medicationInput).find("select").select2({dropdownParent:medicationInput})});const medicationInputs=document.querySelectorAll(".medication-input-container");medicationInputs.forEach(medicationInput=>{const gramsInput=medicationInput.querySelector('input[type="number"]')});const addRecordForm=document.getElementById("addRecordForm");let currentPatientName="";addRecordForm.addEventListener("submit",function(e){e.preventDefault();const patientName=currentPatientName;const medicationInputs=document.querySelectorAll(".medication-input-container");const testsTakenSelect=document.getElementById("testsTaken");const selectedTestOption=testsTakenSelect.options[testsTakenSelect.selectedIndex];const testsTaken=selectedTestOption?selectedTestOption.value:"";const resultsObtained=document.getElementById("resultsObtained").value;const additionalNotes=document.getElementById("additionalNotes").value;const dateTaken=Date.now();const recordData={testsTaken:testsTaken,resultsObtained:resultsObtained,additionalNotes:additionalNotes,dateTaken:dateTaken};const patientRef=ref(database,`patients/${patientName}`);const testsTakenRef=child(patientRef,"testsTaken");get(testsTakenRef).then(snapshot=>{const testsData=snapshot.val();const testCount=testsData?Object.keys(testsData).length:0;const newTestNumber=testCount+1;const newRecordRef=child(testsTakenRef,"test"+newTestNumber);set(newRecordRef,recordData).then(()=>{medicationInputs.forEach(medicationInput=>{const medicationSelect=medicationInput.querySelector('select[name="medication"]');const prescriptionSelect=medicationInput.querySelector('select[name="prescription"]');const gramsInput=medicationInput.querySelector('input[name="grams"]');const costPerGramOutput=medicationInput.querySelector(".cost-per-gram-output");if(medicationSelect&&prescriptionSelect&&gramsInput&&costPerGramOutput){const medicationRecord={medication:medicationSelect.value,prescription:prescriptionSelect.value,grams:parseFloat(gramsInput.value),totalCost:parseFloat(costPerGramOutput.value.replace(/,/g,""))};const medicationRef=child(newRecordRef,"medication");push(medicationRef,medicationRecord)}}).catch(error=>{console.error("Error saving new record:",error)})}).catch(error=>{console.error("Error retrieving existing records:",error)});const medicationContainer=document.getElementById("medicationInputsContainer");medicationContainer.innerHTML="";addRecordForm.reset();showMessage("Record added successfully!")}).catch(error=>{console.error("Error adding record:",error);showMessage("Error adding record. Please try again.")})});const submitMedicationBtn=document.getElementById("submitMedicationButton");submitMedicationBtn.addEventListener("click",event=>{event.preventDefault();const medicationRecord={resultsObtained:document.getElementById("resultsObtained").value,additionalNotes:document.getElementById("additionalNotes").value};const recordKeyInput=document.querySelector('input[name="recordKey"]');const recordKey=recordKeyInput.value;const patientRef=ref(database,`patients/${currentPatientName}/testsTaken/${recordKey}/results`);set(patientRef,medicationRecord).then(()=>{showMessage("Medication submitted successfully!")}).catch(error=>{console.error("Error submitting medication:",error);showMessage("Error submitting medication. Please try again.")});const submitMedicationButtons=document.querySelectorAll(".submit-medication-button");submitMedicationButtons.forEach(button=>{button.click()})});const onlineStatusElement=document.getElementById("onlineStatus");const overlayElement=document.getElementById("overlay");function updateOnlineStatus(){if(navigator.onLine){onlineStatusElement.innerHTML='<i class="fa fa-wifi"></i>';onlineStatusElement.classList.remove("offline");onlineStatusElement.classList.add("online");overlayElement.style.display="none"}else{onlineStatusElement.innerHTML='<i class="fa fa-exclamation-triangle"></i>';onlineStatusElement.classList.remove("online");onlineStatusElement.classList.add("offline");overlayElement.style.display="block"}}const currentDateElement=document.getElementById("currentDate");if(currentDateElement){const currentDate=new Date;const options={year:"numeric",month:"long",day:"numeric"};currentDateElement.textContent=currentDate.toLocaleDateString(undefined,options)}updateOnlineStatus();window.addEventListener("online",updateOnlineStatus);window.addEventListener("offline",updateOnlineStatus);window.addEventListener("load",function(){const splashScreen=document.getElementById("splashScreen");splashScreen.style.opacity="0";setTimeout(function(){splashScreen.style.display="none"},500)});const messagesRef=ref(database,"chat-messages");const chatBox=document.getElementById("chatBox");const messageInput=document.getElementById("messageInput");const sendMessageBtn=document.getElementById("sendMessageBtn");const messageSentAudio=new Audio("COMCell_Message sent (ID 1313)_BSB.mp3");const newMessageAudio=new Audio("livechat-129007.mp3");let displayedMessageIds=[];onValue(messagesRef,snapshot=>{if(snapshot.exists()){snapshot.forEach(childSnapshot=>{const messageId=childSnapshot.key;const message=childSnapshot.val();if(!displayedMessageIds.includes(messageId)){displayChatMessage(message);playMessageSound(message.sender);displayedMessageIds.push(messageId)}})}});function displayChatMessage(message){if(message){const messageDiv=document.createElement("div");const headerDiv=document.createElement("div");headerDiv.classList.add("message-header");const profileIcon=document.createElement("img");profileIcon.src="profile.webp";profileIcon.classList.add("profile-icon2");headerDiv.appendChild(profileIcon);const nameSpan=document.createElement("span");nameSpan.textContent=message.sender;nameSpan.style.fontWeight="bold";headerDiv.appendChild(nameSpan);messageDiv.appendChild(headerDiv);const messageTextSpan=document.createElement("span");messageTextSpan.textContent=message.text;messageDiv.appendChild(messageTextSpan);const timestampSpan=document.createElement("span");const timestamp=new Date(message.timestamp);const formattedDate=`${timestamp.toLocaleDateString()} `;const formattedTime=`${timestamp.toLocaleTimeString([],{hour:"numeric",minute:"2-digit"})}`;timestampSpan.textContent=`${formattedDate}${formattedTime}`;timestampSpan.style.fontSize="9px";timestampSpan.style.color="#888";messageDiv.appendChild(timestampSpan);if(message.sender==="Patients Reception"){messageDiv.classList.add("patients-reception")}else{messageDiv.classList.add("other-sender")}chatBox.appendChild(messageDiv);chatBox.scrollTop=chatBox.scrollHeight}}function playMessageSound(sender){if(sender==="Patients Reception"){messageSentAudio.play()}else{newMessageAudio.play()}}sendMessageBtn.addEventListener("click",()=>{const messageText=messageInput.value.trim();if(messageText!==""){const sender="Patients Reception";const timestamp=(new Date).toISOString();const message={text:messageText,sender:sender,timestamp:timestamp};push(messagesRef,message).catch(error=>{console.error("Error sending message:",error)});messageInput.value=""}});