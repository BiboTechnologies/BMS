import{initializeApp}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-app.js";import{getDatabase,update,ref,remove,push,get,onValue,child,set}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-database.js";import{getAuth,onAuthStateChanged,sendPasswordResetEmail,signInWithEmailAndPassword,GoogleAuthProvider,signInWithPopup}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-auth.js";const firebaseConfig={apiKey:"AIzaSyCi_hufIZTzsYtdPGQtvtmKmAkkrydmn_A",authDomain:"abbah-83a7b.firebaseapp.com",databaseURL:"https://abbah-83a7b-default-rtdb.firebaseio.com",projectId:"abbah-83a7b",storageBucket:"abbah-83a7b.appspot.com",messagingSenderId:"379729759051",appId:"1:379729759051:web:e75528d61b02d1e4f536ce",measurementId:"G-H41J2WMR6S"};const app=initializeApp(firebaseConfig);const database=getDatabase(app);const auth=getAuth(app);function showMessage(message){const messageElement=document.getElementById("message");messageElement.textContent=message;messageElement.style.display="block";setTimeout(()=>{messageElement.style.display="none"},3e3)}window.addEventListener("load",function(){document.getElementById("loginoverlay").style.display="block";document.getElementById("loginpopup").style.display="block"});document.addEventListener("contextmenu",function(event){if(document.getElementById("loginpopup").style.display==="block"){event.preventDefault()}document.addEventListener("keydown",function(event){if(event.keyCode===123){event.preventDefault()}})});const allowedEmails=["biboofficial256@gmail.com"];document.getElementById("loginForm").addEventListener("submit",function(event){event.preventDefault();const submitBtn=document.getElementById("submitBtn");submitBtn.innerHTML='<i class="fas fa-spinner fa-spin"></i> Submit';const email=document.getElementById("email").value;const password=document.getElementById("password").value;signInWithEmailAndPassword(auth,email,password).then(userCredential=>{if(allowedEmails.includes(email)){document.getElementById("loginoverlay").style.display="none";document.getElementById("loginpopup").style.display="none"}else{const errorContainer=document.getElementById("errorContainer");errorContainer.textContent="Access denied. You are not authorized to log in.";errorContainer.style.display="block";signOut(auth).then(()=>{setTimeout(function(){submitBtn.innerHTML="Submit"},2e3)})["catch"](error=>{console.error("Error signing out:",error)})}})["catch"](error=>{const errorMessage=error.message;const errorContainer=document.getElementById("errorContainer");errorContainer.textContent=errorMessage;errorContainer.style.display="block";setTimeout(function(){submitBtn.innerHTML="Submit"},2e3)})});document.getElementById("forgotPasswordLink").addEventListener("click",function(event){event.preventDefault();const email=document.getElementById("email").value;sendPasswordResetEmail(auth,email).then(()=>{showMessage(" A password reset email has been sent. Please check your inbox.")})["catch"](error=>{const errorMessage=error.message;alert("Password reset email failed to send. "+errorMessage)})});const staffRef=ref(database,"staff");get(staffRef).then(snapshot=>{const staffData=snapshot.val();const staffCount=Object.keys(staffData).length;const staffCountElement=document.getElementById("staffCount");if(staffCountElement){staffCountElement.innerText=staffCount.toString()}})["catch"](error=>{console.error("Error fetching staff count:",error)});const patientsRef2=ref(database,"patients");get(patientsRef2).then(snapshot=>{const patientsData=snapshot.val();const patientsCount=Object.keys(patientsData).length;const patientsCountElement=document.getElementById("patientsCount");if(patientsCountElement){patientsCountElement.innerText=patientsCount.toString()}})["catch"](error=>{console.error("Error fetching staff count:",error)});function filterExpensesByDate(){const startDateValue=document.getElementById("dailystartDate").value;const endDateValue=document.getElementById("dailyendDate").value;if(!startDateValue||!endDateValue){alert("Please select both start and end dates.");return}const startDate=new Date(startDateValue);const endDate=new Date(endDateValue);fetchAndDisplayDailyExpenses(startDate,endDate)}function renderFilteredDailyExpenses(filteredExpenses){const dailyExpensesTableBody=document.getElementById("dailyExpensesBody");dailyExpensesTableBody.innerHTML="";filteredExpenses.forEach(expense=>{const row=document.createElement("tr");row.innerHTML=`
      <td>${expense.expense}</td>
      <td>${expense.amount.toLocaleString("en-US",{style:"currency",currency:"UGX"})}</td>
      <td>${expense.date}</td>
      <td>
        <button class="delete-button2" onclick="deleteDailyExpense('${expense.key}')">Delete</button>
      </td>
    `;dailyExpensesTableBody.appendChild(row)})}document.getElementById("filterByDateButton").addEventListener("click",filterExpensesByDate);function fetchAndDisplayDailyExpenses(startDate,endDate){const dailyExpensesRef=ref(database,"daily_expenses");onValue(dailyExpensesRef,snapshot=>{const dailyExpensesData=snapshot.val();if(dailyExpensesData){const dailyExpensesTableBody=document.getElementById("dailyExpensesBody");dailyExpensesTableBody.innerHTML="";for(const key in dailyExpensesData){const expenseData=dailyExpensesData[key];const expenseDate=new Date(expenseData.date);if(!startDate||!endDate||expenseDate>=startDate&&expenseDate<=endDate){const formattedDate=expenseDate.toLocaleDateString("en-US");const row=document.createElement("tr");row.innerHTML=`
            <td>${expenseData.expense}</td>
            <td>${expenseData.amount.toLocaleString("en-US",{style:"currency",currency:"UGX"})}</td>
            <td>${formattedDate}</td>
            <td>
              <button class="delete-button2" data-key="${key}">Delete</button>
            </td>
          `;dailyExpensesTableBody.appendChild(row)}}const deleteButtons2=document.querySelectorAll(".delete-button2");deleteButtons2.forEach(button=>{button.addEventListener("click",function(){const key=this.dataset.key;deleteDailyExpense(key)})})}})}function deleteDailyExpense(expenseKey){const enteredPassword=window.prompt("Enter the password to delete the expense:");const correctPassword="mm";if(enteredPassword===correctPassword){const dailyExpensesRef=ref(database,"daily_expenses");const expenseToDeleteRef=child(dailyExpensesRef,expenseKey);remove(expenseToDeleteRef).then(()=>{showMessage("Daily expense deleted successfully!")})["catch"](error=>{showMessage("Error deleting daily expense:",error)})}else{showMessage("Password incorrect. Deletion canceled.")}}document.addEventListener("DOMContentLoaded",()=>{fetchAndDisplayDailyExpenses()});function calculateAndDisplayTotalSums(expensesData){let totalSumMonthly=0;let totalSumYearly=0;let totalSumAfter2Years=0;let totalSumAfter3Years=0;let totalSumAfter5Years=0;for(const key in expensesData){const expenseData=expensesData[key];switch(expenseData.scheme){case"monthly":totalSumMonthly+=expenseData.amount;break;case"yearly":totalSumYearly+=expenseData.amount;break;case"after_2_years":totalSumAfter2Years+=expenseData.amount;break;case"after_3_years":totalSumAfter3Years+=expenseData.amount;break;case"after_5_years":totalSumAfter5Years+=expenseData.amount;break;default:break}}const totalSumMonthlyDiv=document.getElementById("totalSumMonthly");totalSumMonthlyDiv.textContent=`Billed (Monthly): ${totalSumMonthly.toLocaleString("en-US",{style:"currency",currency:"UGX"})}`;const totalSumYearlyDiv=document.getElementById("totalSumYearly");totalSumYearlyDiv.textContent=`Billed  (Yearly): ${totalSumYearly.toLocaleString("en-US",{style:"currency",currency:"UGX"})}`;const totalSumAfter2YearsDiv=document.getElementById("totalSumAfter2Years");totalSumAfter2YearsDiv.textContent=`Billed  (After 2 Years): ${totalSumAfter2Years.toLocaleString("en-US",{style:"currency",currency:"UGX"})}`;const totalSumAfter3YearsDiv=document.getElementById("totalSumAfter3Years");totalSumAfter3YearsDiv.textContent=`Billed  (After 3 Years): ${totalSumAfter3Years.toLocaleString("en-US",{style:"currency",currency:"UGX"})}`;const totalSumAfter5YearsDiv=document.getElementById("totalSumAfter5Years");totalSumAfter5YearsDiv.textContent=`Billed  (After 5 Years): ${totalSumAfter5Years.toLocaleString("en-US",{style:"currency",currency:"UGX"})}`}function fetchAndDisplaySchemedExpenses(){const schemedExpensesRef=ref(database,"schemed_expenses");onValue(schemedExpensesRef,snapshot=>{const schemedExpensesData=snapshot.val();if(schemedExpensesData){const schemedExpensesTableBody=document.getElementById("schemedExpensesBody");schemedExpensesTableBody.innerHTML="";for(const key in schemedExpensesData){const expenseData=schemedExpensesData[key];const formattedDate=new Date(expenseData.date).toLocaleDateString("en-US");const paymentScheme=expenseData.scheme;const startDate=new Date(expenseData.date);let dueDate;if(paymentScheme==="monthly"){dueDate=new Date(startDate);dueDate.setMonth(startDate.getMonth()+1)}else if(paymentScheme==="yearly"){dueDate=new Date(startDate);dueDate.setFullYear(startDate.getFullYear()+1)}else if(paymentScheme==="after_2_years"){dueDate=new Date(startDate);dueDate.setFullYear(startDate.getFullYear()+2)}else if(paymentScheme==="after_3_years"){dueDate=new Date(startDate);dueDate.setFullYear(startDate.getFullYear()+3)}else if(paymentScheme==="after_5_years"){dueDate=new Date(startDate);dueDate.setFullYear(startDate.getFullYear()+5)}const formattedDueDate=dueDate.toLocaleDateString("en-US");const currentDate=new Date;const daysLeft=Math.ceil((dueDate-currentDate)/(1e3*60*60*24));let daysLeftColorClass;if(daysLeft<=0){daysLeftColorClass="red-text"}else if(daysLeft<=10){daysLeftColorClass="orange-text"}else{daysLeftColorClass="green-text"}const row=document.createElement("tr");row.innerHTML=`
          <td>${expenseData.expense}</td>
          <td>${expenseData.amount.toLocaleString("en-US",{style:"currency",currency:"UGX"})}</td>
          <td>${expenseData.scheme}</td>
          <td>${formattedDate}</td>
          <td>${formattedDueDate}</td>
          <td class="${daysLeftColorClass}">${daysLeft} days</td>
          <td>
            <button class="delete-button" data-key="${key}">Delete</button>
            <button class="renew-button" data-key="${key}">Renew</button>
          </td>
        `;schemedExpensesTableBody.appendChild(row)}const deleteButtons=document.querySelectorAll(".delete-button");deleteButtons.forEach(button=>{button.addEventListener("click",function(){const key=this.dataset.key;deleteExpense(key)})});const renewButtons=document.querySelectorAll(".renew-button");renewButtons.forEach(button=>{button.addEventListener("click",function(){const key=this.dataset.key;renewExpense(key)})});calculateAndDisplayTotalSums(schemedExpensesData)}})}function deleteExpense(key){const enteredPassword=window.prompt("Enter the password to delete the expense:");const correctPassword="mm";if(enteredPassword===correctPassword){const expenseRef=ref(database,`schemed_expenses/${key}`);remove(expenseRef).then(()=>{showMessage("Expense deleted successfully!")})["catch"](error=>{showMessage("Error deleting expense:",error)})}else{showMessage("Password incorrect. Deletion canceled.")}}function renewExpense(key){const enteredPassword=window.prompt("Enter the password to renew the expense:");const correctPassword="mm";if(enteredPassword===correctPassword){const expenseRef=ref(database,`schemed_expenses/${key}`);const currentDate=(new Date).toISOString();update(expenseRef,{date:currentDate}).then(()=>{showMessage("Expense renewed successfully!")})["catch"](error=>{showMessage("Error renewing expense:",error)})}else{showMessage("Password incorrect. Renewal canceled.")}}fetchAndDisplayDailyExpenses();fetchAndDisplaySchemedExpenses();function saveSchemeExpense(expense,amount,scheme){const schemeExpensesRef=ref(database,"schemed_expenses");const newSchemeExpenseRef=push(schemeExpensesRef);const currentDate=new Date;const currentDateTimeString=currentDate.toISOString();const schemeExpenseData={expense:expense,amount:amount,scheme:scheme,date:currentDateTimeString};set(newSchemeExpenseRef,schemeExpenseData).then(()=>{showMessage("Schemed expense details saved successfully!")})["catch"](error=>{showMessage("Error saving schemed expense details:",error)})}const saveSchemeExpenseButton=document.getElementById("saveSchemeExpenseButton");saveSchemeExpenseButton.addEventListener("click",function(){const schemeExpenseInput=document.getElementById("schemeExpense");const schemeAmountInput=document.getElementById("schemeAmount");const schemePaymentSelect=document.getElementById("schemePayment");const schemeExpense=schemeExpenseInput.value.trim();const schemeAmount=parseFloat(schemeAmountInput.value);const schemePayment=schemePaymentSelect.value;if(schemeExpense&&!isNaN(schemeAmount)&&schemeAmount>0){saveSchemeExpense(schemeExpense,schemeAmount,schemePayment);schemeExpenseInput.value="";schemeAmountInput.value="";closeSchemePopup()}else{alert("Please enter valid expense and amount.")}});function openSchemePopup(){const schemePopupContainer=document.getElementById("schemePopupContainer");const schemeOverlay=document.getElementById("schemeOverlay");schemePopupContainer.classList.add("active");schemeOverlay.classList.add("active")}function closeSchemePopup(){const schemePopupContainer=document.getElementById("schemePopupContainer");const schemeOverlay=document.getElementById("schemeOverlay");schemePopupContainer.classList.remove("active");schemeOverlay.classList.remove("active")}const openSchemePopupButton=document.getElementById("openSchemePopupButton");openSchemePopupButton.addEventListener("click",openSchemePopup);const schemeCloseButton=document.getElementById("schemeCloseButton");schemeCloseButton.addEventListener("click",closeSchemePopup);function saveExpenseDetails(expense,amount){const expensesRef=ref(database,"daily_expenses");const newExpenseRef=push(expensesRef);const currentDate=new Date;const expenseData={expense:expense,amount:amount,date:currentDate.toISOString()};set(newExpenseRef,expenseData).then(()=>{showMessage("Expense details saved successfully!")})["catch"](error=>{showMessage("Error saving expense details:",error)})}const saveExpenseButton=document.getElementById("saveExpenseButton");saveExpenseButton.addEventListener("click",function(){const expenseInput=document.getElementById("expense");const amountInput=document.getElementById("amount");const expense=expenseInput.value.trim();const amount=parseFloat(amountInput.value);if(expense&&!isNaN(amount)&&amount>0){saveExpenseDetails(expense,amount);expenseInput.value="";amountInput.value="";closePopup()}else{alert("Please enter valid expense and amount.")}});function openPopup(){const popupContainer=document.getElementById("popupContainer");const overlay=document.getElementById("overlay");popupContainer.classList.add("active");overlay.classList.add("active")}function closePopup(){const popupContainer=document.getElementById("popupContainer");const overlay=document.getElementById("overlay");popupContainer.classList.remove("active");overlay.classList.remove("active")}const openPopupButton=document.getElementById("openPopupButton");const popupContainer=document.getElementById("popupContainer");const overlay=document.getElementById("overlay");const closeButton=document.getElementById("closeButton");openPopupButton.addEventListener("click",()=>{popupContainer.style.display="block";overlay.style.display="block"});closeButton.addEventListener("click",()=>{popupContainer.style.display="none";overlay.style.display="none"});const clearFilterButton2=document.getElementById("clear-filter-button2");clearFilterButton2.addEventListener("click",function(){document.getElementById("start-date2").value="";document.getElementById("end-date2").value="";fetchAndDisplayTests()});const filterButton2=document.getElementById("filter-button2");filterButton2.addEventListener("click",function(){const startDateValue=document.getElementById("start-date2").value;const endDateValue=document.getElementById("end-date2").value;const startDate2=new Date(startDateValue);const endDate2=new Date(endDateValue);filterTestsByDate(startDate2,endDate2).then(filteredTests=>{renderFilteredTests(filteredTests)})});function filterTestsByDate(startDate2,endDate2){const patientsRef=ref(database,"patients");return get(patientsRef).then(snapshot=>{const patientsData=snapshot.val();const filteredTests=[];if(patientsData){for(const patientId in patientsData){const patient=patientsData[patientId];if(patient.hasOwnProperty("testsTaken")){const testsTaken=patient.testsTaken;for(const testId in testsTaken){const testData=testsTaken[testId];const dateTakenValue=testData.dateTaken;if(dateTakenValue>=startDate2&&dateTakenValue<=endDate2){filteredTests.push({patientId:patientId,testId:testId,testsTakenValue:testData.testsTaken,dateTakenValue:new Date(testData.dateTaken),priceValue:testData.price})}}}}}return filteredTests})["catch"](error=>{console.error("Error fetching patients data:",error);return[]})}function renderFilteredTests(filteredTests){const table=document.createElement("table");table.classList.add("test-table");let totalPrice=0;filteredTests.forEach(test=>{totalPrice+=test.priceValue});const totalPriceDiv=document.getElementById("total-price");totalPriceDiv.innerHTML=`Total Tests Revenue: UGX  ${totalPrice}.00`;const headerRow=document.createElement("tr");headerRow.innerHTML=`
      <th>Patient</th>
      <th>Test ID</th>
      <th>Tests Taken</th>
    
      <th>Date Taken</th>
      <th>Price (UGX)</th>
    `;table.appendChild(headerRow);filteredTests.forEach(test=>{const row=document.createElement("tr");row.innerHTML=`
        <td>${test.patientId}</td>
        <td>${test.testId}</td>
        <td>${test.testsTakenValue}</td>
        
        <td>${test.dateTakenValue}</td>
        <td>${test.priceValue.toLocaleString("en-US",{style:"currency",currency:"UGX"})}</td>
      `;table.appendChild(row)});const testTableContainer=document.getElementById("test-table-container");testTableContainer.innerHTML="";testTableContainer.appendChild(table)}function fetchAndDisplayTests(){const patientsRef=ref(database,"patients");get(patientsRef).then(snapshot=>{const patientsData=snapshot.val();if(patientsData){const table=document.createElement("table");table.classList.add("test-table");const headerRow=document.createElement("tr");headerRow.innerHTML=`
        <th>Patient</th>
        <th>Test ID</th>
        <th>Tests Taken</th>
        <th>Date Taken</th>
        <th>Price (UGX)</th>
      `;table.appendChild(headerRow);let totalPrice=0;for(const patientId in patientsData){const patient=patientsData[patientId];if(patient.hasOwnProperty("testsTaken")){const testsTaken=patient.testsTaken;for(const testId in testsTaken){const testData=testsTaken[testId];const testsTakenValue=testData.testsTaken;const dateTakenValue=new Date(testData.dateTaken);const priceValue=testData.price;const formattedDate=dateTakenValue.toLocaleDateString("en-US");const row=document.createElement("tr");row.innerHTML=`
              <td>${patientId}</td>
              <td>${testId}</td>
              <td>${testsTakenValue}</td>
              <td>${formattedDate}</td>
              <td>${priceValue}</td>
            `;table.appendChild(row);totalPrice+=priceValue}}}const testTableContainer=document.getElementById("test-table-container");testTableContainer.innerHTML="";testTableContainer.appendChild(table);const totalPriceDiv=document.getElementById("total-price");totalPriceDiv.innerHTML=`Total Tests Revenue: ${totalPrice.toLocaleString("en-US",{style:"currency",currency:"UGX"})}`}else{showMessage("No patients data found.")}})["catch"](error=>{console.error("Error fetching patients data:",error)})}fetchAndDisplayTests();function displayMessage(title,message,isSuccess=false){const existingMessages=document.querySelectorAll(".retry-message");existingMessages.forEach(function(message){message.remove()});const messageDiv=document.createElement("div");messageDiv.classList.add("retry-message");if(isSuccess){messageDiv.style.backgroundColor="#4caf50"}const closeButton=document.createElement("button");closeButton.classList.add("close-btn");closeButton.innerHTML='<i class="fa fa-times"></i>';closeButton.addEventListener("click",function(){messageDiv.remove()});const titleElement=document.createElement("h2");titleElement.textContent=title;const messageElement=document.createElement("p");messageElement.textContent=message;messageDiv.appendChild(titleElement);messageDiv.appendChild(messageElement);messageDiv.appendChild(closeButton);document.body.appendChild(messageDiv)}window.addEventListener("load",function(){auth.onAuthStateChanged(function(user){if(user){const profileName=document.querySelector(".profile_info h2");profileName.textContent=user.displayName;const profileImage=document.querySelector(".profile_pic img");profileImage.src=user.photoURL;const dropdownProfileImage=document.querySelector(".user-profile img");dropdownProfileImage.src=user.photoURL;displayMessage("Success",`Welcome, ${user.displayName}! You are authenticated.`,true)}else{var provider=new GoogleAuthProvider;signInWithPopup(auth,provider).then(function(result){var user=result.user;const profileName=document.querySelector(".profile_info h2");profileName.textContent=user.displayName;const profileImage=document.querySelector(".profile_pic img");profileImage.src=user.photoURL;const dropdownProfileImage=document.querySelector(".user-profile img");dropdownProfileImage.src=user.photoURL;displayMessage("Success",`Welcome, ${user.displayName}! You are authenticated.`,true)})["catch"](function(error){console.error("Error signing in:",error);displayMessage("Access Denied","You are not authenticated. Please sign in with a valid email.")})}})});function retryCallback(){var provider=new GoogleAuthProvider;signInWithPopup(auth,provider).then(function(result){var user=result.user;const profileName=document.querySelector(".profile_info h2");profileName.textContent=user.displayName;const profileImage=document.querySelector(".profile_pic img");profileImage.src=user.photoURL;const dropdownProfileImage=document.querySelector(".user-profile img");dropdownProfileImage.src=user.photoURL;displayMessage("Success",`Welcome, ${user.displayName}! You are authenticated.`,true)})["catch"](function(error){console.error("Error signing in:",error)})}displayMessage("Signing in...","Please wait...",false);const logoutButton=document.getElementById("logoutButton");logoutButton.addEventListener("click",function(event){event.preventDefault();logOut();var provider=new firebase.auth.GoogleAuthProvider;firebase.auth().signInWithPopup(provider).then(function(result){var user=result.user;console.log("User signed in:",user.email)})["catch"](function(error){console.error("Error signing in:",error)})});function logOut(){auth.signOut().then(function(){console.log("User signed out");location.reload()})["catch"](function(error){console.error("Error signing out:",error)})}const form=document.querySelector(".popup-form");const submitButton=document.querySelector(".popup-form button");const successMessage=document.createElement("p");successMessage.textContent="Medicine details uploaded successfully!";successMessage.style.color="green";const errorMessage=document.createElement("p");errorMessage.textContent="Error uploading patient details. Please try again.";errorMessage.style.color="red";const patientsContainer=document.getElementById("patients");let patients=[];function renderPatients(patients){}patientsContainer.innerHTML="";const salesContainer=document.getElementById("salesContainer");const startDateInput=document.getElementById("start-date");const endDateInput=document.getElementById("end-date");const filterButton=document.getElementById("filter-button");let salesChart;let salesTrendChart;function renderSalesTable(sales){sales.sort((a,b)=>{const dateA=new Date(`${a.saleData.date} ${a.saleData.time}`);const dateB=new Date(`${b.saleData.date} ${b.saleData.time}`);return dateB-dateA});filterButton.addEventListener("click",applyDateFilter);function applyDateFilter(){const startDate=new Date(startDateInput.value);let endDate=new Date(endDateInput.value);endDate.setHours(23,59,59,999);const originalSales=[...sales];const filteredSales=originalSales.filter(sale=>{const[month,day,year]=sale.saleData.date.split("/").map(Number);const saleDate=new Date(year,month-1,day,0,0,0,0);return saleDate>=startDate&&saleDate<=endDate});console.log("Filter Complete");renderSalesTable(filteredSales)}const clearFilterButton=document.getElementById("clear-filter-button");function clearDateFilter(){startDateInput.value="";endDateInput.value="";renderSalesTable(originalSales)}clearFilterButton.addEventListener("click",searchByMedicine);const table=document.createElement("table");table.classList.add("sales-table");const headerRow=document.createElement("tr");headerRow.innerHTML=`
    <th>Medicine</th>
    <th>Quantity</th>
    <th>Price (Ug.sh)</th>
    <th>Date</th>
    <th>Time</th>
    <th>Action</th>
  `;table.appendChild(headerRow);const medicineIncomes={};const salesByDay={};if(salesChart){salesChart.destroy()}if(salesTrendChart){salesTrendChart.destroy()}sales.forEach(sale=>{const patientName=sale.patientName;const saleData=sale.saleData;const row=document.createElement("tr");const patientNameCell=document.createElement("td");patientNameCell.textContent=patientName;row.appendChild(patientNameCell);const quantityCell=document.createElement("td");quantityCell.textContent=saleData.quantity+" pcs";row.appendChild(quantityCell);const medicineId=saleData.medicineId;const priceCell=document.createElement("td");const medicineRef=ref(database,`medicine/${patientName}`);get(medicineRef).then(snapshot=>{if(snapshot.exists()){const medicineData=snapshot.val();const price=medicineData.price;priceCell.textContent=price?price:"N/A";const totalIncome=price*saleData.quantity;if(medicineIncomes[patientName]){medicineIncomes[patientName]+=totalIncome}else{medicineIncomes[patientName]=totalIncome}const day=saleData.date;if(salesByDay[day]){salesByDay[day]++}else{salesByDay[day]=1}updateChart();updateTotalAmount()}else{priceCell.textContent="N/A"}})["catch"](error=>{console.log("Error fetching medicine data:",error);priceCell.textContent="N/A"});row.appendChild(priceCell);const dateCell=document.createElement("td");dateCell.textContent=saleData.date;row.appendChild(dateCell);const timeCell=document.createElement("td");timeCell.textContent=saleData.time;row.appendChild(timeCell);const deleteCell=document.createElement("td");const deleteButton=document.createElement("button");deleteButton.classList.add("delete-button");deleteButton.innerHTML='<i class="fa fa-trash"></i>';const saleId=sale.saleId;deleteButton.dataset.saleId=saleId;deleteButton.addEventListener("click",function(){const patientName=sale.patientName;const saleId=this.dataset.saleId;deleteSale(patientName,saleId).then(()=>{row.remove();updateChart();updateTotalAmount()})["catch"](error=>{console.log("Error deleting sale:",error)})});deleteCell.appendChild(deleteButton);row.appendChild(deleteCell);let totalSalesCount=0;let previousDaySalesCount=0;const salesCountElement=document.getElementById("salesCount");Object.values(salesByDay).forEach(count=>{totalSalesCount+=count;if(previousDaySalesCount>count){const arrowUp='<span class="arrow-up">&#8593;</span>';salesCountElement.innerHTML=totalSalesCount+" "+arrowUp}else if(previousDaySalesCount<count){const arrowDown='<span class="arrow-down">&#8595;</span>';salesCountElement.innerHTML=totalSalesCount+" "+arrowDown}else{salesCountElement.innerText=totalSalesCount.toString()}previousDaySalesCount=count});function deleteSale(patientName,saleId){console.log("Deleting sale for patient:",patientName);console.log("Sale ID:",saleId);const confirmation=confirm("Are you sure you want to delete this sale?");if(confirmation){const password=prompt("Please enter your password to confirm the deletion:");if(password==="mm"){const saleRef=ref(database,`medicine/${patientName}/sales/${saleId}`);return remove(saleRef).then(()=>{alert("Sale deleted successfully!")})["catch"](error=>{console.error("Error deleting sale:",error);alert("Error deleting sale. Please try again.")})}else{alert("Wrong password. Deletion cancelled.")}}}const day=saleData.date;if(salesByDay[day]){salesByDay[day]++}else{salesByDay[day]=1}table.appendChild(row)});salesContainer.innerHTML="";const chartCanvas=document.getElementById("salesChart");if(chartCanvas){updateChart()}const trendChartCanvas=document.getElementById("salesTrendChart");if(trendChartCanvas){updateSalesTrendChart()}function updateChart(){if(salesChart){salesChart.destroy()}const medicineNames=Object.keys(medicineIncomes);const totalIncomes=Object.values(medicineIncomes);const sortedMedicines=medicineNames.map((name,index)=>({name:name,income:totalIncomes[index]})).sort((a,b)=>b.income-a.income);const topSellingMedicines=sortedMedicines.slice(0,5);const chartData={labels:medicineNames,datasets:[{label:"Estimated Income (UGX)",data:totalIncomes,backgroundColor:"rgba(75, 192, 192, 0.5)",borderColor:"rgba(75, 192, 192, 1)",borderWidth:1}]};const chartOptions={scales:{y:{beginAtZero:true}}};const ctx=chartCanvas.getContext("2d");salesChart=new Chart(ctx,{type:"bar",data:chartData,options:chartOptions});const topSellingTable=document.getElementById("topsells");topSellingTable.innerHTML="";const table=document.createElement("table");table.classList.add("topsell-table");const headerRow=document.createElement("tr");headerRow.innerHTML=`
  <th>Medicine Name</th>
  <th>Income (UGX)</th>
`;table.appendChild(headerRow);topSellingMedicines.forEach(medicine=>{const row=document.createElement("tr");const medicineNameCell=document.createElement("td");medicineNameCell.textContent=medicine.name;row.appendChild(medicineNameCell);const medicineIncomeCell=document.createElement("td");medicineIncomeCell.textContent=` ${medicine.income.toLocaleString("en-US",{style:"currency",currency:"UGX"})}`;row.appendChild(medicineIncomeCell);table.appendChild(row)});topSellingTable.appendChild(table)}function updateSalesTrendChart(){if(salesTrendChart){salesTrendChart.destroy()}const days=Object.keys(salesByDay).reverse();const salesCount=Object.values(salesByDay).reverse();const chartData={labels:days,datasets:[{label:"Sales Count by Date",data:salesCount,backgroundColor:"rgba(255, 99, 132, 0.5)",borderColor:"rgba(255, 99, 132, 1)",borderWidth:1}]};const chartOptions={scales:{y:{beginAtZero:true}}};const ctx=trendChartCanvas.getContext("2d");salesTrendChart=new Chart(ctx,{type:"line",data:chartData,options:chartOptions})}function updateTotalAmount(){const totalAmountElement=document.getElementById("totalAmount");const totalAmount=Object.values(medicineIncomes).reduce((acc,curr)=>acc+curr,0);const formattedAmount=totalAmount.toLocaleString("en");totalAmountElement.innerHTML=`<i class="fa fa-money earnings-icon"></i> <span class="earnings-text"><br> UGX ${formattedAmount}.00</span>`}updateTotalAmount()}function fetchAllSalesData(){loaderElement.classList.remove("hidden");salesContainer.innerHTML="";const patientsRef=ref(database,"medicine");onValue(patientsRef,snapshot=>{const patientsData=snapshot.val();const allSales=[];if(patientsData){const patients=Object.values(patientsData);patients.forEach(patient=>{if(patient.hasOwnProperty("sales")){const salesNode=patient.sales;for(const saleKey in salesNode){const saleData=salesNode[saleKey];const saleId=saleKey;allSales.push({patientName:patient.name,saleData:saleData,saleId:saleId})}}})}renderSalesTable(allSales);loaderElement.classList.add("hidden")})}function searchByMedicine(){const medicineInput=document.getElementById("medicineInput");const medicineKeyword=medicineInput.value.toLowerCase();function filterPatients(patients,searchTerm){const filteredPatients=patients.filter(patient=>{const patientName=patient.name.toLowerCase();return patientName.includes(searchTerm.toLowerCase())});renderPatients(filteredPatients)}medicineInput.addEventListener("input",()=>{const searchTerm=medicineInput.value.trim();const patientsRef=ref(database,"medicine");onValue(patientsRef,snapshot=>{const patientsData=snapshot.val();const patients=patientsData?Object.values(patientsData):[];filterPatients(patients,searchTerm)})});loaderElement.classList.remove("hidden");salesContainer.innerHTML="";const patientsRef=ref(database,"medicine");onValue(patientsRef,snapshot=>{const patientsData=snapshot.val();const searchResults=[];if(patientsData){const patients=Object.values(patientsData);patients.forEach(patient=>{const medicineMatch=patient.name.toLowerCase().includes(medicineKeyword);if(patient.hasOwnProperty("sales")){const salesNode=patient.sales;for(const saleKey in salesNode){const saleData=salesNode[saleKey];if(medicineKeyword===""||medicineMatch){searchResults.push({patientName:patient.name,saleData:saleData})}}}})}loaderElement.classList.add("hidden");if(searchResults.length>0){renderSalesTable(searchResults)}else{salesContainer.innerHTML='<p class="no-results">Oops... No sales found.</p>'}})}const medicineInput=document.getElementById("medicineInput");medicineInput.addEventListener("input",searchByMedicine);const searchMedicineButton=document.getElementById("searchMedicineButton");searchMedicineButton.addEventListener("click",searchByMedicine);window.addEventListener("load",fetchAllSalesData);const loaderElement=document.getElementById("loader");const patientsRef=ref(database,"medicine");loaderElement.classList.remove("hidden");onValue(patientsRef,snapshot=>{const patientsData=snapshot.val();if(patientsData){patients=Object.values(patientsData);renderPatients(patients)}loaderElement.classList.add("hidden")});const onlineStatusElement=document.getElementById("onlineStatus");const overlayElement=document.getElementById("overlay");function updateOnlineStatus(){if(navigator.onLine){onlineStatusElement.innerHTML='<i class="fa fa-wifi"></i>Online';onlineStatusElement.classList.remove("offline");onlineStatusElement.classList.add("online");overlayElement.style.display="none"}else{onlineStatusElement.innerHTML='<i class="fa fa-exclamation-triangle"></i>Offline';onlineStatusElement.classList.remove("online");onlineStatusElement.classList.add("offline");overlayElement.style.display="block"}}updateOnlineStatus();window.addEventListener("online",updateOnlineStatus);window.addEventListener("offline",updateOnlineStatus);function getGreeting(){var currentDate=new Date;var currentHour=currentDate.getHours();var greeting;if(currentHour<12){greeting="Good morning"}else if(currentHour<18){greeting="Good afternoon"}else{greeting="Good evening"}return greeting}var greetingDiv=document.getElementById("greeting");var greeting=getGreeting();greetingDiv.textContent=greeting;window.addEventListener("load",function(){const splashScreen=document.getElementById("splashScreen");splashScreen.style.opacity="0";setTimeout(function(){splashScreen.style.display="none"},5e3)});