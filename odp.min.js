import{initializeApp}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-app.js";import{getStorage,ref as storageRef,uploadBytes,getDownloadURL}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-storage.js";import{getDatabase,ref,remove,push,get,update,onValue,child,set}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-database.js";import{getAuth,onAuthStateChanged,sendPasswordResetEmail,signInWithEmailAndPassword,GoogleAuthProvider,signInWithPopup}from"https://www.gstatic.com/firebasejs/9.0.2/firebase-auth.js";const firebaseConfig={apiKey:"AIzaSyCi_hufIZTzsYtdPGQtvtmKmAkkrydmn_A",authDomain:"abbah-83a7b.firebaseapp.com",databaseURL:"https://abbah-83a7b-default-rtdb.firebaseio.com",projectId:"abbah-83a7b",storageBucket:"abbah-83a7b.appspot.com",messagingSenderId:"379729759051",appId:"1:379729759051:web:e75528d61b02d1e4f536ce",measurementId:"G-H41J2WMR6S"};const app=initializeApp(firebaseConfig);const database=getDatabase(app);const auth=getAuth(app);const storage=getStorage(app);let authToken;let tokenExpiryTime;function generateToken(){authToken=Math.random().toString(36).substring(2);const currentTime=new Date;const tokenExpiryTime=new Date(currentTime.getTime()+24*60*60*1e3);localStorage.setItem("authToken",authToken);localStorage.setItem("tokenExpiryTime",tokenExpiryTime.toString())}function retrieveTokenFromLocalStorage(){authToken=localStorage.getItem("authToken");const storedExpiryTime=localStorage.getItem("tokenExpiryTime");if(authToken&&storedExpiryTime){tokenExpiryTime=new Date(storedExpiryTime)}}function isTokenValid(){const currentTime=new Date;return tokenExpiryTime>currentTime}window.addEventListener("load",function(){retrieveTokenFromLocalStorage();if(!isTokenValid()){window.location.href="login.html"}});document.addEventListener("contextmenu",function(event){if(document.getElementById("loginpopup").style.display==="block"){event.preventDefault()}document.addEventListener("keydown",function(event){if(event.keyCode===123){event.preventDefault()}})});const allowedEmails=["biboofficial256@gmail.com"];document.getElementById("loginForm").addEventListener("submit",function(event){event.preventDefault();const submitBtn=document.getElementById("submitBtn");submitBtn.innerHTML='<i class="fas fa-spinner fa-spin"></i> Submitting';const email=document.getElementById("email").value;const password=document.getElementById("password").value;signInWithEmailAndPassword(auth,email,password).then(userCredential=>{if(allowedEmails.includes(email)){document.getElementById("loginoverlay").style.display="none";document.getElementById("loginpopup").style.display="none";generateToken()}else{const errorContainer=document.getElementById("errorContainer");errorContainer.textContent="Access denied. You are not authorized.";errorContainer.style.display="block";signOut(auth).then(()=>{setTimeout(function(){submitBtn.innerHTML="Submit"},2e3)}).catch(error=>{console.error("Error signing out:",error)})}}).catch(error=>{const errorMessage=error.message;const errorContainer=document.getElementById("errorContainer");errorContainer.textContent=errorMessage;errorContainer.style.display="block";setTimeout(function(){submitBtn.innerHTML="Submit"},2e3)})});document.getElementById("forgotPasswordLink").addEventListener("click",function(event){event.preventDefault();const email=document.getElementById("email").value;sendPasswordResetEmail(auth,email).then(()=>{showMessage(" A password reset email has been sent. Please check your inbox.")}).catch(error=>{const errorMessage=error.message;alert("Password reset email failed to send. "+errorMessage)})});function displayMessage(title,message,isSuccess=false){const existingMessages=document.querySelectorAll(".retry-message");existingMessages.forEach(function(message){message.remove()});const messageDiv=document.createElement("div");messageDiv.classList.add("retry-message");if(isSuccess){messageDiv.style.backgroundColor="#4caf50"}const closeButton=document.createElement("button");closeButton.classList.add("close-btn");closeButton.innerHTML='<i class="fa fa-times"></i>';closeButton.addEventListener("click",function(){messageDiv.remove()});const titleElement=document.createElement("h2");titleElement.textContent=title;const messageElement=document.createElement("p");messageElement.textContent=message;messageDiv.appendChild(titleElement);messageDiv.appendChild(messageElement);document.body.appendChild(messageDiv);setTimeout(function(){messageDiv.remove()},1500)}function displayUserInformation(user){const profileName=document.querySelector(".profile_info h2");profileName.textContent=user.displayName;const profileImage=document.querySelector(".profile_pic img");profileImage.src=user.photoURL;const dropdownProfileImage=document.querySelector(".user-profile img");dropdownProfileImage.src=user.photoURL;displayMessage("",`Welcome, ${user.displayName}.`,true)}function handleSignInSuccess(user){displayUserInformation(user)}function handleSignInError(error){console.error("Error signing in:",error);displayMessage("Access Denied. Please sign in with a valid email.")}function signInWithGoogle(){var provider=new GoogleAuthProvider;signInWithPopup(auth,provider).then(function(result){const user=result.user;handleSignInSuccess(user)}).catch(function(error){handleSignInError(error)})}window.addEventListener("load",function(){auth.onAuthStateChanged(function(user){if(user){displayUserInformation(user)}else{signInWithGoogle()}})});function retryCallback(){signInWithGoogle()}displayMessage("Signing in...","Please wait...",false);document.addEventListener("click",function(event){const target=event.target;if(target.tagName==="A"&&target.href.startsWith(window.location.origin)){localStorage.setItem("clickedLink",target.href)}});const logoutButton=document.getElementById("logoutButton");const overlay=document.getElementById("overlay");logoutButton.addEventListener("click",function(event){event.preventDefault();localStorage.setItem("logoutPage",window.location.href);const clickedLink=localStorage.getItem("clickedLink");if(clickedLink){localStorage.setItem("logoutPage",clickedLink)}displayOverlay();setTimeout(()=>{logOut();hideOverlay()},2e3)});function displayOverlay(){const spinner=document.createElement("div");spinner.id="loadingSpinner";overlay.appendChild(spinner);const loggingOutText=document.createElement("div");loggingOutText.id="loggingOutText";loggingOutText.textContent="Logging Out...";overlay.appendChild(loggingOutText);overlay.style.display="flex"}function hideOverlay(){const spinner=document.getElementById("loadingSpinner");const loggingOutText=document.getElementById("loggingOutText");overlay.removeChild(spinner);overlay.removeChild(loggingOutText);overlay.style.display="none"}function logOut(){auth.signOut().then(function(){localStorage.removeItem("authToken");localStorage.removeItem("tokenExpiryTime");localStorage.removeItem("clickedLink");const logoutPage=localStorage.getItem("logoutPage")||"login.html";window.location.href=logoutPage}).catch(function(error){console.error("Error signing out:",error)})}const form=document.querySelector(".popup-form");const submitButton=document.querySelector(".popup-form button");const patientsContainer=document.getElementById("patients");const loader=document.getElementById("loader");let patients=[];let patientCount=1;document.addEventListener("DOMContentLoaded",function(){const addPatientForm=document.getElementById("addPatientForm");addPatientForm.addEventListener("submit",function(event){event.preventDefault();const startDate=new Date;const patientName=document.getElementById("patientNameSelect").value;const selectedTests=Array.from(document.getElementById("selectedTests").selectedOptions).map(option=>option.value);const totalCost=parseInt(document.getElementById("totalcost").value);const duration=parseInt(document.getElementById("duration").value);const patientStatus=document.getElementById("patientStatus").value;const paymentScheme=document.getElementById("PaymentScheme").value;const formData={patientName:patientName,selectedTests:selectedTests,totalCost:totalCost,duration:duration,patientStatus:patientStatus,paymentScheme:paymentScheme,startDate:startDate.toLocaleDateString()};const patientsRef=ref(database,`treatment-patients/${patientName}`);set(patientsRef,formData).then(()=>{showMessage("Data submitted successfully!");addPatientForm.reset()}).catch(error=>{console.error("Error submitting data:",error)})})});function filterPatients(patients,searchTerm){const filteredPatients=Object.values(patients).filter(patient=>{const patientName=patient.patientName.toLowerCase();return patientName.includes(searchTerm.toLowerCase())});renderPatients(filteredPatients)}searchInput.addEventListener("input",()=>{const searchTerm=searchInput.value.trim();const patientsRef=ref(database,"treatment-patients");onValue(patientsRef,snapshot=>{const patientsData=snapshot.val();const patients=patientsData?patientsData:{};filterPatients(patients,searchTerm)})});function fetchAndRenderPatientsData(){const patientsRef=ref(database,"treatment-patients");onValue(patientsRef,snapshot=>{if(snapshot.exists()){const patientsData=snapshot.val();const patients=patientsData?Object.values(patientsData):[];renderPatients(patients)}else{console.log("No patients data found.")}})}document.addEventListener("DOMContentLoaded",fetchAndRenderPatientsData);function renderPatients(patients,patientsData){const tableContainer=document.getElementById("tableContainer");tableContainer.innerHTML="";const table=document.createElement("table");table.classList.add("patients-table");const tableHeader=document.createElement("thead");tableHeader.innerHTML=`
    <tr>
      <th>Patient ID</th>
      <th>Treatment Plan</th>
      <th>Duration (Days)</th>
      <th>Payment Scheme</th>
      <th>Start Date</th>
      <th>Total Cost</th>
      <th>Treatment Ref.</th>
      <th>Balance</th>
      <th>Actions</th>
    </tr>
  `;table.appendChild(tableHeader);const tableBody=document.createElement("tbody");function calculateTotalPayments(patientName){const paymentsRef=ref(database,`treatment-patients/${patientName}/payments`);return get(paymentsRef).then(snapshot=>{if(snapshot.exists()){const payments=snapshot.val();return Object.values(payments).reduce((total,payment)=>total+payment.amount,0)}else{return 0}}).catch(error=>{console.error("Error fetching payments data:",error);return 0})}for(const patient of patients){const row=document.createElement("tr");calculateTotalPayments(patient.patientName).then(totalPayments=>{const balance=patient.totalCost-totalPayments;const cellClass=balance===0?"zero-balance":"positive-balance";row.innerHTML=`
        <td>${patient.patientName}</td>
        <td>${patient.patientStatus}</td>
        <td>${patient.duration}</td>
        <td>${patient.paymentScheme}</td>
        <td>${patient.startDate}</td>
        <td>${patient.totalCost.toLocaleString("en-US",{style:"currency",currency:"UGX"})}</td>
        <td>${patient.selectedTests.join(", ")}</td>
        <td class="${cellClass}">${balance.toLocaleString("en-US",{style:"currency",currency:"UGX"})}</td>
        <td>
          <button class="view-button">View</button>
        </td>
      `;const viewButton=row.querySelector(".view-button");viewButton.addEventListener("click",function(){openPatientHistoryPopup(patient)});const endTreatmentButton=document.createElement("button");endTreatmentButton.textContent="End";endTreatmentButton.classList.add("button","save-button");endTreatmentButton.style.background="darkblue";endTreatmentButton.addEventListener("click",()=>{updatePatientStatus(patient.patientName,"Completed")});const actionsCell=row.querySelector("td:last-child");tableBody.appendChild(row)})}table.appendChild(tableBody);tableContainer.appendChild(table)}function updatePatientStatus(patientName,newStatus){const patientRef=ref(database,`treatment-patients/${patientName}`);update(patientRef,{currentStatus:newStatus}).then(()=>{showMessage("Patient status updated successfully.")}).catch(error=>{showMessage("Error updating patient status:",error)})}function formatMoney(amount){return amount.toLocaleString("en-US",{style:"currency",currency:"UGX"})}function openPatientHistoryPopup(patientData){const popupOverlay=document.getElementById("popupOverlay1");const popupClose=document.getElementById("popupClose1");const patientDetailsSection=document.getElementById("patientDetails");const patientHistory=document.getElementById("patientHistory");patientDetails.innerHTML="";patientHistory.innerHTML="";popupOverlay.style.visibility="visible";popupOverlay.style.opacity="1";popupClose.addEventListener("click",function(){popupOverlay.style.visibility="hidden";popupOverlay.style.opacity="0"});patientDetailsSection.innerHTML=`
  <div class="patient-details">
    <div class="patient-image-frame">
  <label for="uploadImage" class="upload-label">
    <i class="fa fa-upload"></i>
    Click to Upload Patient's Image or drag and drop here
  </label>
  <input type="file" id="uploadImage" accept="image/*">
</div>
<style>
  .button {
    background-color: #4CAF50;
    border: none;
    color: white;
    padding: 10px;
    text-align: center;
    text-decoration: none;
    font-size: 16px;
    margin: 4px 2px;
    cursor: disabled;
    border-radius: 50px;
  }

  .save-button {
    background-color: #4CAF50;
  }

  .delete-button {
    background-color: #f44336;
  }
</style>
<h3>Patient Demographics:</h3>
<table class="patient-demographics-table">
  <tr>
    <td><strong>Patient ID:</strong></td>
    <td>${patientData.patientName}</td>
  </tr>
  <tr>
    <td><strong>Treatment Reference:</strong></td>
    <td>${patientData.selectedTests.join(", ")}</td>
  </tr>
  <tr>
    <td><strong>Duration (days):</strong></td>
    <td>${patientData.duration}</td>
  </tr>
  <tr>
    <td><strong>Start Date:</strong></td>
    <td>${patientData.startDate}</td>
  </tr>
  <tr>
    <td><strong>Exp. End Date:</strong></td>
    <td>${calculateEndDate(patientData.startDate,patientData.duration)}</td>
  </tr>
  <tr>
    <td><strong>Total treatment cost: UGX</strong></td>
    <td>${formatMoney(patientData.totalCost)}</td>
  </tr>
  <tr>
    <td><strong>Treatment Plan:</strong></td>
    <td><span id="patientStatus">${patientData.patientStatus}</span></td>
  </tr>
  <tr>
    <td><strong>Final Patient's Status:</strong></td>
    <td><span id="patientStatus">${patientData.currentStatus||"pending..."}</span></td>
  </tr>
</table>
    <!-- Add more patient details as needed -->

    <!-- Add more patient details as needed -->

    <!-- The container for patient visit details -->
<div id="patientVisitDetails" ></div>



<button id="paymentButton" class="button save-button">
  <i style="margin-right: 5px;" class="fa fa-credit-card"></i>Make Payment
</button>
<button id="histButton" class="button save-button"><i class="fas fa-history" style="margin-right: 5px;"></i>Payment History</button>
<button class="button save-button" style="background: darkblue;" id="endTreatmentButton">
  <i class="fas fa-check-circle"></i> End treatment
</button>

  </div>
  `;const endTreatmentButton=document.getElementById("endTreatmentButton");endTreatmentButton.addEventListener("click",()=>{updatePatientStatus(patientData.patientName,"Completed")});const patientHistoryElement=document.getElementById("patientHistory");function showPaymentHistory(patientName){const paymentHistoryPopupOverlay=document.getElementById("paymentHistoryPopupOverlay");const paymentHistoryPopupClose=document.getElementById("paymentHistoryPopupClose");const paymentHistoryContent=document.getElementById("paymentHistoryContent");paymentHistoryContent.innerHTML="";paymentHistoryPopupOverlay.style.display="block";paymentHistoryPopupClose.addEventListener("click",function(){paymentHistoryPopupOverlay.style.display="none"});const patientRef=ref(database,`treatment-patients/${patientName}/payments`);onValue(patientRef,snapshot=>{const paymentsData=snapshot.val();if(paymentsData){const table=document.createElement("table");table.innerHTML=`
          <tr>
            <th>Date</th>
            <th>Amount</th>
          </tr>
        `;Object.values(paymentsData).forEach(payment=>{const paymentDate=new Date(payment.date).toLocaleDateString();const paymentAmount=payment.amount;const row=`
            <tr>
              <td>${paymentDate}</td>
              <td>${formatMoney(paymentAmount)}</td>
            </tr>
          `;table.innerHTML+=row});paymentHistoryContent.appendChild(table)}else{const noPaymentItem=document.createElement("div");noPaymentItem.textContent="No payment history available.";paymentHistoryContent.appendChild(noPaymentItem)}})}const paymentHistoryButton=document.getElementById("histButton");paymentHistoryButton.addEventListener("click",function(){const patientName=patientData.patientName;showPaymentHistory(patientName)});function makePayment(){const paymentAmount=prompt("Enter the payment amount:");const parsedPaymentAmount=parseFloat(paymentAmount);if(!isNaN(parsedPaymentAmount)){const patientName=patientData.patientName;const paymentDate=(new Date).toISOString();const paymentObject={date:paymentDate,amount:parsedPaymentAmount};const paymentsRef=ref(database,`treatment-patients/${patientName}/payments`);get(paymentsRef).then(snapshot=>{if(snapshot.exists()){const payments=snapshot.val();const totalPayments=Object.values(payments).reduce((total,payment)=>total+payment.amount,0);const currentBalance=patientData.totalCost-totalPayments;if(parsedPaymentAmount<=currentBalance){const patientPaymentsRef=ref(database,`treatment-patients/${patientName}/payments`);push(patientPaymentsRef,paymentObject).then(()=>{showMessage("Payment recorded successfully!")}).catch(error=>{showMessage("Error recording payment:",error)})}else{showMessage("Payment amount exceeds the current balance.")}}else{showMessage("Error fetching payments data.")}}).catch(error=>{showMessage("Error fetching payments data:",error)})}else{showMessage("Invalid payment amount:",paymentAmount)}}const makePaymentButton=document.getElementById("paymentButton");makePaymentButton.addEventListener("click",makePayment);const uploadImage=document.getElementById("uploadImage");const saveButton=document.getElementById("saveButton");const imageFrame=document.querySelector(".patient-image-frame");if(patientData.image){const imageElement=document.createElement("img");imageElement.src=patient.image;imageElement.alt="Patient Image";imageFrame.innerHTML="";imageFrame.appendChild(imageElement)}else{const uploadLabel=document.createElement("p");uploadLabel.htmlFor="uploadImage";uploadLabel.className="no-image-label";uploadLabel.innerHTML=`
  <i class="fas fa-image"></i>
  No Image found
`;const uploadInput=document.createElement("input");uploadInput.type="file";uploadInput.id="uploadImage";uploadInput.accept="image/*";imageFrame.innerHTML="";imageFrame.appendChild(uploadLabel);imageFrame.appendChild(uploadInput);uploadInput.addEventListener("change",function(event){const file=event.target.files[0];const reader=new FileReader;reader.onload=function(e){const imageUrl=e.target.result;const imageElement=document.createElement("img");imageElement.src=imageUrl;imageElement.alt="Patient Image";imageFrame.innerHTML="";imageFrame.appendChild(imageElement);saveButton.disabled=false};reader.readAsDataURL(file)})}if(patientData.image){const imageElement=document.createElement("img");imageElement.src=patient.image;imageElement.alt="Patient Image";imageFrame.innerHTML="";imageFrame.appendChild(imageElement);deleteButton.disabled=false}function dataURItoBlob(dataURI){const byteString=atob(dataURI.split(",")[1]);const mimeString=dataURI.split(",")[0].split(":")[1].split(";")[0];const ab=new ArrayBuffer(byteString.length);const ia=new Uint8Array(ab);for(let i=0;i<byteString.length;i++){ia[i]=byteString.charCodeAt(i)}return new Blob([ab],{type:mimeString})}const patientName=patientData.name;const patientHistoryRef=ref(database,`patients/${patientName}/testsTaken`);function getLatestTestStatus(records){if(records.length===0)return"Unknown";records.sort((a,b)=>b.data.dateTaken-a.data.dateTaken);const latestTestStatus=records[0].data.results?.finalStatus||"Pending...";return latestTestStatus}onValue(patientHistoryRef,snapshot=>{patientHistoryElement.innerHTML="";if(snapshot.exists()){const records=[];snapshot.forEach(childSnapshot=>{const recordKey=childSnapshot.key;const record=childSnapshot.val();records.push({key:recordKey,data:record})});const currentStatusElement=document.getElementById("currentStatus");const currentStatus=getLatestTestStatus(records);currentStatusElement.textContent=currentStatus;records.forEach(recordObj=>{const recordKey=recordObj.key;const record=recordObj.data;const recordElement=createRecordElement(recordKey,record);patientHistoryElement.appendChild(recordElement);const testResultRef=ref(database,`patients/${patientName}/testsTaken/${recordKey}/resultsObtained`);onValue(testResultRef,resultSnapshot=>{const resultsObtainedElement=recordElement.querySelector(".results-obtained-data");if(resultsObtainedElement){if(resultSnapshot.exists()){const resultsObtained=resultSnapshot.val();resultsObtainedElement.textContent=resultsObtained==="Completed Successfully"?"Completed Successfully":"Pending...";resultsObtainedElement.style.color=resultsObtained==="Completed Successfully"?"darkblue":"orange"}else{resultsObtainedElement.textContent="Pending...";resultsObtainedElement.style.color="orange"}}else{console.error("results-obtained-data element not found in recordElement")}})})}else{const noRecordsElement=document.createElement("p");noRecordsElement.textContent="No Records Found";noRecordsElement.style.fontStyle="italic";patientHistoryElement.appendChild(noRecordsElement)}});function calculateEndDate(startDate,duration){const startDateObj=new Date(startDate);if(isNaN(startDateObj.getTime())){return"Invalid Start Date"}const endDate=new Date(startDateObj.getTime()+duration*24*60*60*1e3);return endDate.toISOString().slice(0,10)}function displayPatientVisitDetails(visitKeys,visitDetails){const patientVisitDetailsDiv=document.getElementById("patientVisitDetails");patientVisitDetailsDiv.innerHTML="";if(visitDetails){const visitKeys=Object.keys(visitDetails);visitKeys.sort((a,b)=>visitDetails[b].timestamp-visitDetails[a].timestamp);const visitCount=visitKeys.length;const visitCountElement=document.getElementById("visitCount");visitCountElement.textContent=visitCount;const latestVisitKey=visitKeys[0];const latestVisitData=visitDetails[latestVisitKey];const visitElement=document.createElement("div");visitElement.innerHTML=`

    <h3>LATEST VISIT TRIAGE:</h3>
<div class="visit-details-container">
  <p><b>Date:</b> ${formatDate(latestVisitData.timestamp)}</p>
  <p><b>Clinician's Name:</b> ${latestVisitData.clinicianName||"N/D"}</p>
  <p><b>Temperature:</b> ${latestVisitData.temperature||"N/D"} &deg;C</p>
  <p><b>BP:</b> ${latestVisitData.bp||"N/D"} (mmHg)</p>
  <p><b>RR:</b> ${latestVisitData.rr||"N/D"}</p>
  <p><b>HR:</b> ${latestVisitData.hr||"N/D"}</p>
  <p><b>SpO2:</b> ${latestVisitData.sp02||"N/D"} (%)</p>
  <p><b>WT:</b> ${latestVisitData.wt||"N/D"} (Kg)</p>
  <p><b>HT:</b> ${latestVisitData.ht||"N/D"} (Cm)</p>
  <p><b>BMI:</b> ${latestVisitData.bmi||"N/D"}</p>
  <p><b>MUAC:</b> ${latestVisitData.muac||"N/D"}</p>
  <p><b>Weight for Age Z score:</b> ${latestVisitData.weightForAgeZScore||"N/D"} (Kg)</p>
  <p><b>Disability:</b> ${latestVisitData.disability||"N/D"}</p>
  <p><b>Known Chronic Illness:</b> ${latestVisitData.chronicIllness||"N/D"}</p>
  <p><b>Any Drug Abuse:</b> ${latestVisitData.drugAbuse||"N/D"}</p>
  <p><b>Allergies:</b> ${latestVisitData.allergies&&latestVisitData.allergies.length>0?latestVisitData.allergies.join(", "):"N/D"}
  </p>
</div>
<hr>


    `;patientVisitDetailsDiv.appendChild(visitElement)}else{patientVisitDetailsDiv.textContent="No visit details found.";patientVisitDetailsDiv.style.fontStyle="italic"}}function getPatientVisitDetails(patientName){const visitsRef=ref(database,`patients/${patientName}/visits`);onValue(visitsRef,snapshot=>{const visitDetails=snapshot.val();if(visitDetails){const visitKeys=Object.keys(visitDetails);visitKeys.sort((a,b)=>visitDetails[b].timestamp-visitDetails[a].timestamp);displayPatientVisitDetails(visitKeys,visitDetails);createVisitTrendChart(visitKeys,visitDetails)}else{displayPatientVisitDetails(null);createVisitTrendChart([],{})}})}getPatientVisitDetails(patientName);let isPopupOpen=false;function closePopup(){visitPopupOverlay.style.display="none"}function formatDate(timestamp){const date=new Date(timestamp);const options={year:"numeric",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"};return date.toLocaleString("en-US",options)}let visitTrendChart;function destroyChart(){if(window.visitTrendChart&&window.visitTrendChart.destroy){window.visitTrendChart.destroy()}}function createVisitTrendChart(visitKeys,visitDetails){const visitTrendCanvas=document.getElementById("visitTrendChart");const ctx=visitTrendCanvas.getContext("2d");const vitalSignsData=visitKeys.map(visitKey=>{const visitData=visitDetails[visitKey];return{date:formatDate(visitData.timestamp),temperature:visitData.temperature,bp:visitData.bp,rr:visitData.rr,hr:visitData.hr,sp02:visitData.sp02,wt:visitData.wt,ht:visitData.ht,bmi:visitData.bmi,muac:visitData.muac}});const dates=vitalSignsData.map(data=>data.date);const temperatures=vitalSignsData.map(data=>data.temperature);const bloodPressures=vitalSignsData.map(data=>data.bp);const respiratoryRates=vitalSignsData.map(data=>data.rr);const heartRates=vitalSignsData.map(data=>data.hr);const spO2Values=vitalSignsData.map(data=>data.sp02);destroyChart();window.visitTrendChart=new Chart(ctx,{type:"line",data:{labels:dates,datasets:[{label:"Temperature (&deg;C)",data:temperatures,borderColor:"red",fill:false},{label:"Respiratory Rate",data:respiratoryRates,borderColor:"green",fill:false},{label:"Heart Rate",data:heartRates,borderColor:"purple",fill:false},{label:"SpO2 (%)",data:spO2Values,borderColor:"orange",fill:false}]},options:{responsive:true,scales:{x:{display:true,title:{display:true,text:"Date"}},y:{display:true,title:{display:true,text:"Value"}}}}})}function displayVisitsPopup(patientName){const visitsRef=ref(database,`patients/${patientName}/visits`);const tableBody=document.getElementById("tableBody");const visitTrendCanvas=document.getElementById("visitTrendChart");tableBody.innerHTML="";visitTrendCanvas.getContext("2d").clearRect(0,0,visitTrendCanvas.width,visitTrendCanvas.height);onValue(visitsRef,snapshot=>{const visitDetails=snapshot.val();if(visitDetails){const visitKeys=Object.keys(visitDetails);visitKeys.sort((a,b)=>visitDetails[b].timestamp-visitDetails[a].timestamp);visitKeys.forEach(visitKey=>{const visitData=visitDetails[visitKey];const row=document.createElement("tr");row.innerHTML=`
          <td>${formatDate(visitData.timestamp)}</td>
          <td>${visitData.clinicianName}</td>
          <td>${visitData.temperature} &deg;C</td>
          <td>${visitData.bp}</td>
          <td>${visitData.rr}</td>
          <td>${visitData.hr}</td>
          <td>${visitData.sp02}</td>
          <td>${visitData.wt}</td>
          <td>${visitData.ht}</td>
          <td>${visitData.bmi}</td>
          <td>${visitData.muac}</td>
          <td>${visitData.weightForAgeZScore}</td>
          <td>${visitData.disability}</td>
          <td>${visitData.chronicIllness}</td>
          <td>${visitData.drugAbuse}</td>
          <td>${visitData.allergies.join(", ")}</td>
        `;tableBody.appendChild(row)});createVisitTrendChart(visitKeys,visitDetails)}else{const noVisitsRow=document.createElement("tr");noVisitsRow.innerHTML='<td colspan="17">No visit details found.</td>';tableBody.appendChild(noVisitsRow)}});const popupOverlay=document.getElementById("popup-overlay4");popupOverlay.style.display="block"}function formatDate(timestamp){const date=new Date(timestamp);const options={year:"numeric",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"};return date.toLocaleString("en-US",options)}const closePopupBtn4=document.getElementById("closePopupBtn4");closePopupBtn4.addEventListener("click",()=>{const popupOverlay=document.getElementById("popup-overlay4");popupOverlay.style.display="none"});let currentPatientName=patientData.name;function createRecordElement(recordKey,record){const recordElement=document.createElement("div");recordElement.classList.add("record");const recordKeyElement=document.createElement("h4");recordKeyElement.textContent="Record Key: "+recordKey;recordElement.appendChild(recordKeyElement);const table=document.createElement("table");recordElement.appendChild(table);const recordKeyRow=document.createElement("tr");table.appendChild(recordKeyRow);const recordKeyHeader=document.createElement("th");recordKeyHeader.textContent="Record Key";recordKeyRow.appendChild(recordKeyHeader);const recordKeyData=document.createElement("td");recordKeyData.textContent=recordKey;recordKeyRow.appendChild(recordKeyData);const dateTakenRow=document.createElement("tr");table.appendChild(dateTakenRow);const dateTakenHeader=document.createElement("th");dateTakenHeader.textContent="Date Taken";dateTakenRow.appendChild(dateTakenHeader);const dateTakenData=document.createElement("td");const dateTaken=new Date(parseInt(record.dateTaken));if(!isNaN(dateTaken.getTime())){dateTakenData.textContent=dateTaken.toLocaleString()}else{dateTakenData.textContent="Invalid Date"}dateTakenRow.appendChild(dateTakenData);const testsTakenRow=document.createElement("tr");table.appendChild(testsTakenRow);const testsTakenHeader=document.createElement("th");testsTakenHeader.textContent="Tests Taken";testsTakenRow.appendChild(testsTakenHeader);const testsTakenData=document.createElement("td");testsTakenData.textContent=record.testsTaken;testsTakenRow.appendChild(testsTakenData);const paymentStatusRow=document.createElement("tr");table.appendChild(paymentStatusRow);const paymentStatusHeader=document.createElement("th");paymentStatusHeader.textContent="Test Payment";paymentStatusRow.appendChild(paymentStatusHeader);const paymentStatusData=document.createElement("td");paymentStatusData.textContent=record.paymentstatus||"Not Paid";paymentStatusRow.appendChild(paymentStatusData);if(record.paymentstatus!=="payment received"){paymentStatusData.style.color="red"}else{paymentStatusData.style.color="blue"}const medicineStatusRow=document.createElement("tr");table.appendChild(medicineStatusRow);const medicineStatusHeader=document.createElement("th");medicineStatusHeader.textContent="Medicine Payment";medicineStatusRow.appendChild(medicineStatusHeader);const medicineStatusData=document.createElement("td");medicineStatusData.textContent=record.medicinestatus||"Not Paid";medicineStatusRow.appendChild(medicineStatusData);if(record.medicinestatus!=="payment received"){medicineStatusData.style.color="red"}else{medicineStatusData.style.color="blue"}const resultsObtainedRow=document.createElement("tr");table.appendChild(resultsObtainedRow);const resultsObtainedHeader=document.createElement("th");resultsObtainedHeader.textContent="Test Results status ";resultsObtainedRow.appendChild(resultsObtainedHeader);const resultsObtainedData=document.createElement("td");resultsObtainedData.textContent=record.results?.resultsObtained||"Pending...";resultsObtainedData.classList.add("results-obtained-data");if(record.results&&record.results.resultsObtained==="Completed Successfully"){resultsObtainedData.style.color="darkblue"}else{resultsObtainedData.style.color="orange"}resultsObtainedRow.appendChild(resultsObtainedData);const additionalNotesRow=document.createElement("tr");table.appendChild(additionalNotesRow);const additionalNotesHeader=document.createElement("th");additionalNotesHeader.textContent="Diagnosis";additionalNotesRow.appendChild(additionalNotesHeader);const additionalNotesData=document.createElement("td");additionalNotesData.textContent=record.results?.additionalNotes||"Pending...";if(record.results&&!record.results.additionalNotes){additionalNotesData.classList.add("pending")}additionalNotesRow.appendChild(additionalNotesData);const finalStatusRow=document.createElement("tr");table.appendChild(finalStatusRow);const finalStatusHeader=document.createElement("th");finalStatusHeader.textContent="Final Status of Patient";finalStatusRow.appendChild(finalStatusHeader);const finalStatusData=document.createElement("td");finalStatusData.textContent=record.results?.finalStatus||"Pending...";finalStatusRow.appendChild(finalStatusData);const followUpRow=document.createElement("tr");table.appendChild(followUpRow);const followUpHeader=document.createElement("th");followUpHeader.textContent="Follow-up Date/Time";followUpRow.appendChild(followUpHeader);const followUpData=document.createElement("td");followUpData.textContent=record.results?.followUpDateTime||"none";followUpRow.appendChild(followUpData);const medicationTakenElement=document.createElement("div");medicationTakenElement.classList.add("medication-taken");const medicationTable=document.createElement("table");medicationTable.classList.add("medication-table");const tableHeaderRow=document.createElement("tr");const headers=["Medication","Prescription","Milligrams","Cost"];headers.forEach(headerText=>{const tableHeaderCell=document.createElement("th");tableHeaderCell.textContent=headerText;tableHeaderRow.appendChild(tableHeaderCell)});medicationTable.appendChild(tableHeaderRow);let totalCost=0;if(record.results&&record.results.medication){const medicationNodes=record.results.medication;Object.keys(medicationNodes).forEach(medicationKey=>{const medicationData=medicationNodes[medicationKey];const tableRow=document.createElement("tr");const medicationCell=document.createElement("td");medicationCell.textContent=medicationData.medication;const prescriptionCell=document.createElement("td");prescriptionCell.textContent=medicationData.prescription;const gramsCell=document.createElement("td");gramsCell.textContent=medicationData.grams;const totalCostCell=document.createElement("td");totalCostCell.textContent=medicationData.totalCost;tableRow.appendChild(medicationCell);tableRow.appendChild(prescriptionCell);tableRow.appendChild(gramsCell);tableRow.appendChild(totalCostCell);medicationTable.appendChild(tableRow);totalCost+=parseFloat(medicationData.totalCost)})}medicationTakenElement.appendChild(medicationTable);recordElement.appendChild(medicationTakenElement);const totalRow=document.createElement("tr");medicationTable.appendChild(totalRow);const emptyCell=document.createElement("td");emptyCell.setAttribute("colspan","3");totalRow.appendChild(emptyCell);const totalCostCell=document.createElement("td");totalCostCell.textContent="Total Cost: UGX "+totalCost.toFixed(2);totalCostCell.classList.add("total-cell");totalRow.appendChild(totalCostCell);window.addEventListener("load",function(){auth.onAuthStateChanged(function(user){if(user){console.log("User signed in:",user.email);const profileName=document.querySelector(".profile_info h2");if(user&&user.displayName){profileName.textContent=user.displayName}else{profileName.textContent="Unknown"}const profileImage=document.querySelector(".profile_pic img");profileImage.src=user.photoURL;const dropdownProfileImage=document.querySelector(".user-profile img");dropdownProfileImage.src=user.photoURL;displayMessage("Success",`Welcome, ${user.email}! You are authenticated.`,true)}else{var provider=new GoogleAuthProvider;signInWithPopup(auth,provider).then(function(result){var user=result.user;console.log("User signed in:",user.email);const profileName=document.querySelector(".profile_info h2");profileName.textContent=user.displayName;const profileImage=document.querySelector(".profile_pic img");profileImage.src=user.photoURL;const dropdownProfileImage=document.querySelector(".user-profile img");dropdownProfileImage.src=user.photoURL;displayMessage("Success",`Welcome, ${user.email}! You are authenticated.`,true)}).catch(function(error){console.error("Error signing in:",error);displayMessage("Access Denied","You are not authenticated. Please sign in with a valid email.")})}})});const shareButton=document.createElement("button");shareButton.id="shareButton";shareButton.innerHTML='<i class="fa fa-paper-plane"></i> Send Lab Request';shareButton.addEventListener("click",()=>{const currentUser=auth.currentUser;if(currentUser&&currentUser.displayName){shareRecord(patient,record,currentUser)}else{console.error("User object is undefined or does not have a displayName.")}});recordElement.appendChild(shareButton);function shareRecord(patient,record,user){const patientName=patient.name;const doctorUsername=user.displayName;const testKey=recordKey;const message=`New Test ${testKey} for patient ${patientName} to be done.`;const notification={timestamp:Date.now(),message:message};const chatRef=ref(database,"laboratory-requests");push(chatRef,notification).then(()=>{console.log("Notification sent successfully!");showMessage("Notification sent successfully!")}).catch(error=>{console.error("Error sending notification:",error);showMessage("Error sending notification:",error)})}const printButton=document.createElement("button");printButton.innerHTML='<i class="fa fa-print"></i> Print Record';printButton.classList.add("print-button");printButton.addEventListener("click",()=>{printRecord(patient,record)});recordElement.appendChild(printButton);function printRecord(patient,record){window.jsPDF=window.jspdf.jsPDF;const doc=new jsPDF;doc.setFontSize(12);const hospitalLogo="spena.png";const headerBoxX=20;const headerBoxY=10;const headerBoxWidth=170;const headerBoxHeight=40;doc.setDrawColor(0,0,0);doc.setFillColor(255,255,255);doc.rect(headerBoxX,headerBoxY,headerBoxWidth,headerBoxHeight,"D");const headerBoxCenterX=headerBoxX+headerBoxWidth/2;const headerBoxCenterY=headerBoxY+headerBoxHeight/2;doc.addImage(hospitalLogo,"PNG",headerBoxX+2,headerBoxY+10,26,26);const hospitalName="BAMBI MEDICAL CLINIC";const hospitalNameWidth=doc.getTextWidth(hospitalName);const hospitalNameY=headerBoxCenterY-5;doc.setFont("helvetica","bold");doc.setFontSize(16);doc.setTextColor(0,0,0);doc.text(hospitalName,headerBoxCenterX,hospitalNameY,{align:"center"});const hospitalAddress="Location: Kubbiri Round-about";const hospitalAddressY=headerBoxCenterY+2;doc.setFont("helvetica","normal");doc.setFontSize(12);doc.text(hospitalAddress,headerBoxCenterX,hospitalAddressY,{align:"center"});const telephoneContacts="Telephone: +123456789";const telephoneContactsY=headerBoxCenterY+9;doc.text(telephoneContacts,headerBoxCenterX,telephoneContactsY,{align:"center"});const email="Email: info@bambimedical.com";const emailY=headerBoxCenterY+15;doc.text(email,headerBoxCenterX,emailY,{align:"center"});doc.setFont("helvetica","normal");doc.setFont("helvetica","bold");doc.setFontSize(16);const reportHeading="LABORATORY REPORT";const reportHeadingWidth=doc.getTextWidth(reportHeading);const reportHeadingX=(doc.internal.pageSize.getWidth()-reportHeadingWidth)/2;const reportHeadingY=headerBoxY+headerBoxHeight+10;doc.text(reportHeading,reportHeadingX,reportHeadingY);doc.setFont("helvetica","normal");doc.setFontSize(12);const patientDetails=[["Patient Name",patient.name],["Date of Birth",patient.dob],["Payment Type",patient.payment],["Residence",patient.residence],["Contact",patient.parents],["Patient ID",patient.patientId]];const patientTableX=20;const patientTableY=reportHeadingY+5;const patientTableOptions={startX:patientTableX,startY:patientTableY,margin:{top:10},styles:{font:"helvetica",fontStyle:"normal",fontSize:10},headStyles:{fillColor:[211,211,211],fontStyle:"bold"},bodyStyles:{fillColor:255},columnStyles:{0:{cellWidth:80},1:{cellWidth:100}}};doc.autoTable({head:[["Field","Value"]],body:patientDetails,...patientTableOptions});doc.setFont("helvetica","bold");doc.setFontSize(16);const resultsHeading="TEST AND RESULTS";const resultsHeadingWidth=doc.getTextWidth(resultsHeading);const resultsHeadingX=(doc.internal.pageSize.getWidth()-resultsHeadingWidth)/2;const resultsHeadingY=patientTableY+65;doc.text(resultsHeading,resultsHeadingX,resultsHeadingY);doc.setFont("helvetica","normal");doc.setFontSize(12);const recordDetails=[["Record Key",recordKey],["Date Taken",dateTakenData.textContent],["Tests Taken",testsTakenData.textContent],["Test Payment",paymentStatusData.textContent],["Results Obtained",resultsObtainedData.textContent],["Additional Notes",additionalNotesData.textContent]];const recordTableX=20;const recordTableY=resultsHeadingY+5;const recordTableOptions={startX:recordTableX,startY:recordTableY,margin:{top:10},styles:{font:"helvetica",fontStyle:"normal",fontSize:10},headStyles:{fillColor:[211,211,211],fontStyle:"bold"},bodyStyles:{fillColor:255},columnStyles:{0:{cellWidth:80},1:{cellWidth:100}}};doc.autoTable({head:[["Field","Value"]],body:recordDetails,...recordTableOptions});const medicationTableData=[];const medicationRows=medicationTable.querySelectorAll("tr");for(let i=1;i<medicationRows.length;i++){const cells=medicationRows[i].querySelectorAll("td");if(cells.length===4){const medication=cells[0].textContent;const prescription=cells[1].textContent;const grams=cells[2].textContent;const totalCost=cells[3].textContent;medicationTableData.push([medication,prescription,grams,totalCost])}}doc.autoTable({startY:195,head:[["Medication","Prescription","Milligrams","Total Cost"]],body:medicationTableData,theme:"grid",styles:{fontSize:10,cellPadding:1.5,lineColor:[0,0,0],lineWidth:.1},columnStyles:{0:{cellWidth:50},1:{cellWidth:50},2:{cellWidth:40},3:{cellWidth:40}}});const signatureLabelX=20;const signatureLabelY=doc.internal.pageSize.getHeight()-20;doc.setFont("helvetica","normal");doc.setFontSize(12);doc.text("Doctor's Signature:",signatureLabelX,signatureLabelY,{align:"left"});doc.autoPrint();doc.output("dataurlnewwindow")}const deleteButton=document.createElement("button");deleteButton.classList.add("delete-button");const binIcon=document.createElement("i");binIcon.classList.add("fa","fa-trash");deleteButton.innerHTML="";deleteButton.appendChild(binIcon);deleteButton.innerHTML+=" Delete";deleteButton.addEventListener("click",()=>{const recordKey=recordKeyElement.getAttribute("data-record-key");deleteRecord(recordKey)});const finnishButton=document.createElement("button");finnishButton.textContent="+ Add Prescription";finnishButton.classList.add("finnish-button");const addMedicationForm=document.getElementById("addMedicationForm");finnishButton.addEventListener("click",()=>{const existingRecordKeyInput=addMedicationForm.querySelector('input[name="recordKey"]');if(existingRecordKeyInput){existingRecordKeyInput.remove()}const recordKey=recordKeyElement.textContent.replace("Record Key: ","");const overlay=document.createElement("div");overlay.classList.add("overlay3");const popup=document.createElement("div");popup.classList.add("popup3");const closeButton=document.createElement("button");closeButton.textContent="X";closeButton.classList.add("close-button");const heading=document.createElement("h2");heading.textContent="Add Medicine & Prescription";popup.appendChild(closeButton);popup.appendChild(heading);const recordKeyInput=document.createElement("input");recordKeyInput.type="hidden";recordKeyInput.name="recordKey";recordKeyInput.value=recordKey;addMedicationForm.appendChild(recordKeyInput);popup.appendChild(addMedicationForm);document.body.appendChild(overlay);document.body.appendChild(popup);overlay.style.display="block";popup.style.display="block";closeButton.addEventListener("click",()=>{const medicationContainer=document.getElementById("medicationInputsContainer");medicationContainer.innerHTML="";document.getElementById("additionalNotes").value="";overlay.style.display="none";popup.style.display="none"})});recordElement.appendChild(finnishButton);recordElement.appendChild(deleteButton);recordKeyElement.setAttribute("data-record-key",recordKey);return recordElement}function deleteRecord(recordKey){const patientName=patient.name;const confirmation=confirm("Are you sure you want to delete this record?");if(confirmation){const password=prompt("Please enter your password to confirm the deletion:");if(password==="mm"){const recordRef=ref(database,`patients/${patientName}/testsTaken/${recordKey}`);remove(recordRef).then(()=>{alert("Record deleted successfully!")}).catch(error=>{console.error("Error deleting record:",error);alert("Error deleting record. Please try again.")})}else{alert("Wrong password. Deletion cancelled.")}}}}const addMedicationBtn=document.getElementById("addMedicationBtn");const addRecordPopupOverlay=document.getElementById("addRecordPopupOverlay");const addRecordPopupClose=document.getElementById("addRecordPopupClose");addMedicationBtn.addEventListener("click",()=>{addRecordPopupOverlay.style.visibility="visible";addRecordPopupOverlay.style.opacity="1"});addRecordPopupClose.addEventListener("click",()=>{addRecordPopupOverlay.style.visibility="hidden";addRecordPopupOverlay.style.opacity="0"});const loaderElement=document.getElementById("loader");loaderElement.classList.remove("hidden");loaderElement.classList.add("hidden");const calculateTotal=()=>{const medicationCost=parseFloat(medicationInput.selectedOptions[0].dataset.costPerGram);const gramsValue=parseFloat(gramsInput.value);const total=medicationCost*gramsValue;totalElement.textContent="Total: $"+total.toFixed(2)};const createMedicationInput=()=>{const medicationInputContainer=document.createElement("div");medicationInputContainer.classList.add("medication-input-container");const medicationLabel=document.createElement("label");medicationLabel.textContent="Medicine:";medicationLabel.setAttribute("for","medicationInput");const medicationInput=document.createElement("select");medicationInput.required=true;medicationInput.classList.add("select2");const medicineRef=ref(database,"medicine");onValue(medicineRef,snapshot=>{const medicineData=snapshot.val();if(medicineData){Object.values(medicineData).forEach(medicine=>{const option=document.createElement("option");option.value=medicine.name;option.text=medicine.name;option.dataset.costPerGram=medicine.pricepergram;medicationInput.appendChild(option)});$(medicationInput).select2({dropdownParent:medicationInputContainer})}});const prescriptionLabel=document.createElement("label");prescriptionLabel.textContent="Prescription:";prescriptionLabel.setAttribute("for","prescriptionInput");const prescriptionInput=document.createElement("select");prescriptionInput.required=true;prescriptionInput.classList.add("select2");const prescriptionsRef=ref(database,"prescriptions");onValue(prescriptionsRef,snapshot=>{const prescriptionsData=snapshot.val();prescriptionInput.innerHTML="";if(prescriptionsData){const prescriptions=Object.values(prescriptionsData);prescriptions.forEach(prescription=>{const option=document.createElement("option");option.value=prescription.prescription;option.text=prescription.prescription;prescriptionInput.appendChild(option)})}});const gramsLabel=document.createElement("label");gramsLabel.textContent="Milligrams:";gramsLabel.setAttribute("for","gramsInput");const gramsInput=document.createElement("input");gramsInput.type="number";gramsInput.step="any";gramsInput.placeholder="Milligrams";const costPerGramLabel=document.createElement("label");costPerGramLabel.textContent="Cost of Milligrams:";costPerGramLabel.setAttribute("for","costPerGramOutput");const costPerGramOutput=document.createElement("output");costPerGramOutput.classList.add("cost-per-gram-output");costPerGramOutput.value="";const deleteButton=document.createElement("button");deleteButton.classList.add("delete-medication-button");deleteButton.innerHTML='<i class="fa fa-trash"></i>';deleteButton.addEventListener("click",()=>{medicationInputContainer.remove()});gramsInput.addEventListener("input",()=>{const gramsValue=parseFloat(gramsInput.value);const selectedOption=medicationInput.options[medicationInput.selectedIndex];const costPerGram=parseFloat(selectedOption.dataset.costPerGram);const totalCost=gramsValue*costPerGram;costPerGramOutput.value=totalCost.toFixed(2)});medicationInputContainer.appendChild(medicationLabel);medicationInputContainer.appendChild(medicationInput);medicationInputContainer.appendChild(prescriptionLabel);medicationInputContainer.appendChild(prescriptionInput);medicationInputContainer.appendChild(gramsLabel);medicationInputContainer.appendChild(gramsInput);medicationInputContainer.appendChild(costPerGramLabel);medicationInputContainer.appendChild(costPerGramOutput);medicationInputContainer.appendChild(deleteButton);const submitMedicationButton=document.createElement("button");submitMedicationButton.type="button";submitMedicationButton.textContent="Submit Medication";submitMedicationButton.classList.add("submit-medication-button");submitMedicationButton.addEventListener("click",()=>{const medicationRecord={medication:medicationInput.value,prescription:prescriptionInput.value,grams:parseFloat(gramsInput.value),totalCost:parseFloat(costPerGramOutput.value.replace(/,/g,""))};const recordKeyInput=document.querySelector('input[name="recordKey"]');const recordKey=recordKeyInput.value;const patientRef=ref(database,`patients/${currentPatientName}/testsTaken/${recordKey}/results/medication`);const newRecordRef=push(patientRef);set(newRecordRef,medicationRecord).then(()=>{showMessage("Medication submitted successfully!")}).catch(error=>{console.error("Error submitting medication:",error);showMessage("Error submitting medication. Please try again.")})});medicationInputContainer.appendChild(submitMedicationButton);return medicationInputContainer};const addMedicationButton=document.getElementById("addMedicationButton");const medicationContainer=document.getElementById("medicationInputsContainer");addMedicationButton.addEventListener("click",()=>{const medicationInput=createMedicationInput();medicationContainer.appendChild(medicationInput);$(medicationInput).find("select.select2").select2()});const medicationInputs=document.querySelectorAll(".medication-input-container");medicationInputs.forEach(medicationInput=>{const gramsInput=medicationInput.querySelector('input[type="number"]')});document.addEventListener("DOMContentLoaded",function(){const patientNameSelect=document.getElementById("patientNameSelect");const selectedTestsSelect=document.getElementById("selectedTests");const dobInput=document.getElementById("dob");$("#patientNameSelect").select2({dropdownParent:$("body")});$("#selectedTests").select2({dropdownParent:$("body")});function fetchAndPopulatePatients(){const patientsRef=ref(database,"patients");onValue(patientsRef,snapshot=>{const patientsData=snapshot.val();patientNameSelect.innerHTML="";if(patientsData){Object.entries(patientsData).forEach(([patientId,patient])=>{const option=new Option(patient.name+"   PI - "+patient.patientId,patientId);patientNameSelect.appendChild(option)})}$("#patientNameSelect").trigger("change")})}function populateSelectedTestsSelect(patientId){const testsTakenRef=ref(database,`patients/${patientId}/testsTaken`);onValue(testsTakenRef,snapshot=>{const testsTakenData=snapshot.val();selectedTestsSelect.innerHTML="";if(testsTakenData){Object.entries(testsTakenData).forEach(([testKey,test])=>{const option=new Option(`${test.testsTaken} (Key: ${testKey})`,testKey);selectedTestsSelect.appendChild(option)})}$("#selectedTests").trigger("change");showMessage("Search Complete")})}const checkPatientsButton=document.getElementById("checkPatientsButton");checkPatientsButton.addEventListener("click",()=>{const selectedPatientId=patientNameSelect.value;populateSelectedTestsSelect(selectedPatientId)});fetchAndPopulatePatients()});const addRecordForm=document.getElementById("addRecordForm");let currentPatientName="";function showMessage(message){const messageElement=document.getElementById("message");messageElement.textContent=message;messageElement.style.display="block";setTimeout(()=>{messageElement.style.display="none"},4e3)}showMessage("");addRecordForm.addEventListener("submit",function(e){e.preventDefault();const patientName=currentPatientName;const medicationInputs=document.querySelectorAll(".medication-input-container");const testsTakenSelect=document.getElementById("testsTaken");const selectedTestOption=testsTakenSelect.options[testsTakenSelect.selectedIndex];const testsTaken=selectedTestOption?selectedTestOption.value:"";const additionalNotes=document.getElementById("additionalNotes").value;const dateTaken=Date.now();const recordData={testsTaken:testsTaken,additionalNotes:additionalNotes,dateTaken:dateTaken};const patientRef=ref(database,`patients/${patientName}`);const testsTakenRef=child(patientRef,"testsTaken");get(testsTakenRef).then(snapshot=>{const testsData=snapshot.val();const testCount=testsData?Object.keys(testsData).length:0;const newTestNumber=testCount+1;const newRecordRef=child(testsTakenRef,"test"+newTestNumber);set(newRecordRef,recordData).then(()=>{medicationInputs.forEach(medicationInput=>{const medicationSelect=medicationInput.querySelector('select[name="medication"]');const prescriptionSelect=medicationInput.querySelector('select[name="prescription"]');const gramsInput=medicationInput.querySelector('input[name="grams"]');const costPerGramOutput=medicationInput.querySelector(".cost-per-gram-output");if(medicationSelect&&prescriptionSelect&&gramsInput&&costPerGramOutput){const medicationRecord={medication:medicationSelect.value,prescription:prescriptionSelect.value,grams:parseFloat(gramsInput.value),totalCost:parseFloat(costPerGramOutput.value.replace(/,/g,""))};const medicationRef=child(newRecordRef,"medication");push(medicationRef,medicationRecord)}}).catch(error=>{console.error("Error saving new record:",error)})}).catch(error=>{console.error("Error retrieving existing records:",error)});addRecordForm.reset();showMessage("Record added successfully!")}).catch(error=>{console.error("Error adding record:",error);showMessage("Error adding record. Please try again.")})});const submitMedicationBtn=document.getElementById("submitMedicationButton");submitMedicationBtn.addEventListener("click",event=>{event.preventDefault();const medicationRecord={additionalNotes:document.getElementById("additionalNotes").value,finalStatus:getFinalStatus(),followUpDateTime:document.getElementById("followUpDateTime").value};const recordKeyInput=document.querySelector('input[name="recordKey"]');const recordKey=recordKeyInput.value;const patientRef=ref(database,`patients/${currentPatientName}/testsTaken/${recordKey}/results`);set(patientRef,medicationRecord).then(()=>{showMessage("Medication submitted successfully!")}).catch(error=>{console.error("Error submitting medication:",error);showMessage("Error submitting medication. Please try again.")});const submitMedicationButtons=document.querySelectorAll(".submit-medication-button");submitMedicationButtons.forEach(button=>{button.click()});const medicationContainer=document.getElementById("medicationInputsContainer");medicationContainer.innerHTML="";document.getElementById("additionalNotes").value="";document.getElementById("followUpDateTime").value=""});function getFinalStatus(){const finalStatusRadios=document.getElementsByName("finalStatus");for(const radio of finalStatusRadios){if(radio.checked){return radio.value}}return""}function formatDate(timestamp){const date=new Date(timestamp);const options={year:"numeric",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"};return date.toLocaleString("en-US",options)}const onlineStatusElement=document.getElementById("onlineStatus");const overlayElement=document.getElementById("overlay");function updateOnlineStatus(){if(navigator.onLine){onlineStatusElement.innerHTML='<i class="fa fa-wifi"></i>';onlineStatusElement.classList.remove("offline");onlineStatusElement.classList.add("online");overlayElement.style.display="none"}else{onlineStatusElement.innerHTML='<i class="fa fa-exclamation-triangle"></i>';onlineStatusElement.classList.remove("online");onlineStatusElement.classList.add("offline");overlayElement.style.display="block"}}updateOnlineStatus();window.addEventListener("online",updateOnlineStatus);window.addEventListener("offline",updateOnlineStatus);window.addEventListener("load",function(){const splashScreen=document.getElementById("splashScreen");splashScreen.style.opacity="0";setTimeout(function(){splashScreen.style.display="none"},500)});